# 1 "wmma_example_tcsp.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

# 1
# 61 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3
extern "C" {
# 24
extern long __sysconf(int __name) noexcept(true); 
# 25
}
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef long ptrdiff_t; 
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
typedef 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
struct { 
# 427
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 428
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3
} max_align_t; 
# 444
typedef __decltype((nullptr)) nullptr_t; 
# 204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 204
enum cudaError { 
# 211
cudaSuccess, 
# 217
cudaErrorInvalidValue, 
# 223
cudaErrorMemoryAllocation, 
# 229
cudaErrorInitializationError, 
# 236
cudaErrorCudartUnloading, 
# 243
cudaErrorProfilerDisabled, 
# 251
cudaErrorProfilerNotInitialized, 
# 258
cudaErrorProfilerAlreadyStarted, 
# 265
cudaErrorProfilerAlreadyStopped, 
# 274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 280
cudaErrorInvalidPitchValue = 12, 
# 286
cudaErrorInvalidSymbol, 
# 294
cudaErrorInvalidHostPointer = 16, 
# 302
cudaErrorInvalidDevicePointer, 
# 308
cudaErrorInvalidTexture, 
# 314
cudaErrorInvalidTextureBinding, 
# 321
cudaErrorInvalidChannelDescriptor, 
# 327
cudaErrorInvalidMemcpyDirection, 
# 337 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 355 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureNotBound, 
# 364 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSynchronizationError, 
# 370
cudaErrorInvalidFilterSetting, 
# 376
cudaErrorInvalidNormSetting, 
# 384
cudaErrorMixedDeviceExecution, 
# 392
cudaErrorNotYetImplemented = 31, 
# 401 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 408
cudaErrorStubLibrary = 34, 
# 415
cudaErrorInsufficientDriver, 
# 422
cudaErrorCallRequiresNewerDriver, 
# 428
cudaErrorInvalidSurface, 
# 434
cudaErrorDuplicateVariableName = 43, 
# 440
cudaErrorDuplicateTextureName, 
# 446
cudaErrorDuplicateSurfaceName, 
# 456 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 469 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 475
cudaErrorMissingConfiguration = 52, 
# 484 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 491
cudaErrorLaunchMaxDepthExceeded = 65, 
# 499
cudaErrorLaunchFileScopedTex, 
# 507
cudaErrorLaunchFileScopedSurf, 
# 522 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 534 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 540
cudaErrorInvalidDeviceFunction = 98, 
# 546
cudaErrorNoDevice = 100, 
# 553
cudaErrorInvalidDevice, 
# 558
cudaErrorDeviceNotLicensed, 
# 567 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 572
cudaErrorStartupFailure = 127, 
# 577
cudaErrorInvalidKernelImage = 200, 
# 587 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 592
cudaErrorMapBufferObjectFailed = 205, 
# 597
cudaErrorUnmapBufferObjectFailed, 
# 603
cudaErrorArrayIsMapped, 
# 608
cudaErrorAlreadyMapped, 
# 616
cudaErrorNoKernelImageForDevice, 
# 621
cudaErrorAlreadyAcquired, 
# 626
cudaErrorNotMapped, 
# 632
cudaErrorNotMappedAsArray, 
# 638
cudaErrorNotMappedAsPointer, 
# 644
cudaErrorECCUncorrectable, 
# 650
cudaErrorUnsupportedLimit, 
# 656
cudaErrorDeviceAlreadyInUse, 
# 662
cudaErrorPeerAccessUnsupported, 
# 668
cudaErrorInvalidPtx, 
# 673
cudaErrorInvalidGraphicsContext, 
# 679
cudaErrorNvlinkUncorrectable, 
# 686
cudaErrorJitCompilerNotFound, 
# 693
cudaErrorUnsupportedPtxVersion, 
# 700
cudaErrorJitCompilationDisabled, 
# 705
cudaErrorUnsupportedExecAffinity, 
# 710
cudaErrorInvalidSource = 300, 
# 715
cudaErrorFileNotFound, 
# 720
cudaErrorSharedObjectSymbolNotFound, 
# 725
cudaErrorSharedObjectInitFailed, 
# 730
cudaErrorOperatingSystem, 
# 737
cudaErrorInvalidResourceHandle = 400, 
# 743
cudaErrorIllegalState, 
# 750
cudaErrorSymbolNotFound = 500, 
# 758
cudaErrorNotReady = 600, 
# 766
cudaErrorIllegalAddress = 700, 
# 775 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 786 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 792
cudaErrorLaunchIncompatibleTexturing, 
# 799
cudaErrorPeerAccessAlreadyEnabled, 
# 806
cudaErrorPeerAccessNotEnabled, 
# 819 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 826
cudaErrorContextIsDestroyed, 
# 833
cudaErrorAssert, 
# 840
cudaErrorTooManyPeers, 
# 846
cudaErrorHostMemoryAlreadyRegistered, 
# 852
cudaErrorHostMemoryNotRegistered, 
# 861 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorHardwareStackError, 
# 869
cudaErrorIllegalInstruction, 
# 878 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 889 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 897
cudaErrorInvalidPc, 
# 908 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchFailure, 
# 917 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 922
cudaErrorNotPermitted = 800, 
# 928
cudaErrorNotSupported, 
# 937 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSystemNotReady, 
# 944
cudaErrorSystemDriverMismatch, 
# 953 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 958
cudaErrorMpsConnectionFailed, 
# 963
cudaErrorMpsRpcFailure, 
# 969
cudaErrorMpsServerNotReady, 
# 974
cudaErrorMpsMaxClientsReached, 
# 979
cudaErrorMpsMaxConnectionsReached, 
# 984
cudaErrorStreamCaptureUnsupported = 900, 
# 990
cudaErrorStreamCaptureInvalidated, 
# 996
cudaErrorStreamCaptureMerge, 
# 1001
cudaErrorStreamCaptureUnmatched, 
# 1007
cudaErrorStreamCaptureUnjoined, 
# 1014
cudaErrorStreamCaptureIsolation, 
# 1020
cudaErrorStreamCaptureImplicit, 
# 1026
cudaErrorCapturedEvent, 
# 1033
cudaErrorStreamCaptureWrongThread, 
# 1038
cudaErrorTimeout, 
# 1044
cudaErrorGraphExecUpdateFailure, 
# 1054 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorExternalDevice, 
# 1067 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorUnknown = 999, 
# 1075
cudaErrorApiFailureBase = 10000
# 1076
}; 
#endif
# 1081 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1081
enum cudaChannelFormatKind { 
# 1083
cudaChannelFormatKindSigned, 
# 1084
cudaChannelFormatKindUnsigned, 
# 1085
cudaChannelFormatKindFloat, 
# 1086
cudaChannelFormatKindNone, 
# 1087
cudaChannelFormatKindNV12, 
# 1088
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1089
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1090
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1091
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1092
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1093
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1094
cudaChannelFormatKindSignedNormalized8X1, 
# 1095
cudaChannelFormatKindSignedNormalized8X2, 
# 1096
cudaChannelFormatKindSignedNormalized8X4, 
# 1097
cudaChannelFormatKindSignedNormalized16X1, 
# 1098
cudaChannelFormatKindSignedNormalized16X2, 
# 1099
cudaChannelFormatKindSignedNormalized16X4, 
# 1100
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1101
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1102
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1103
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1104
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1105
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1106
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1107
cudaChannelFormatKindSignedBlockCompressed4, 
# 1108
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1109
cudaChannelFormatKindSignedBlockCompressed5, 
# 1110
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1111
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1112
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1113
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1114
}; 
#endif
# 1119 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1119
struct cudaChannelFormatDesc { 
# 1121
int x; 
# 1122
int y; 
# 1123
int z; 
# 1124
int w; 
# 1125
cudaChannelFormatKind f; 
# 1126
}; 
#endif
# 1131 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1136
typedef const cudaArray *cudaArray_const_t; 
# 1138
struct cudaArray; 
# 1143
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1148
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1150
struct cudaMipmappedArray; 
# 1160 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1160
struct cudaArraySparseProperties { 
# 1161
struct { 
# 1162
unsigned width; 
# 1163
unsigned height; 
# 1164
unsigned depth; 
# 1165
} tileExtent; 
# 1166
unsigned miptailFirstLevel; 
# 1167
unsigned long long miptailSize; 
# 1168
unsigned flags; 
# 1169
unsigned reserved[4]; 
# 1170
}; 
#endif
# 1176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1176
struct cudaArrayMemoryRequirements { 
# 1177
size_t size; 
# 1178
size_t alignment; 
# 1179
unsigned reserved[4]; 
# 1180
}; 
#endif
# 1186 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1186
enum cudaMemoryType { 
# 1188
cudaMemoryTypeUnregistered, 
# 1189
cudaMemoryTypeHost, 
# 1190
cudaMemoryTypeDevice, 
# 1191
cudaMemoryTypeManaged
# 1192
}; 
#endif
# 1197 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1197
enum cudaMemcpyKind { 
# 1199
cudaMemcpyHostToHost, 
# 1200
cudaMemcpyHostToDevice, 
# 1201
cudaMemcpyDeviceToHost, 
# 1202
cudaMemcpyDeviceToDevice, 
# 1203
cudaMemcpyDefault
# 1204
}; 
#endif
# 1211 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1211
struct cudaPitchedPtr { 
# 1213
void *ptr; 
# 1214
size_t pitch; 
# 1215
size_t xsize; 
# 1216
size_t ysize; 
# 1217
}; 
#endif
# 1224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1224
struct cudaExtent { 
# 1226
size_t width; 
# 1227
size_t height; 
# 1228
size_t depth; 
# 1229
}; 
#endif
# 1236 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1236
struct cudaPos { 
# 1238
size_t x; 
# 1239
size_t y; 
# 1240
size_t z; 
# 1241
}; 
#endif
# 1246 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1246
struct cudaMemcpy3DParms { 
# 1248
cudaArray_t srcArray; 
# 1249
cudaPos srcPos; 
# 1250
cudaPitchedPtr srcPtr; 
# 1252
cudaArray_t dstArray; 
# 1253
cudaPos dstPos; 
# 1254
cudaPitchedPtr dstPtr; 
# 1256
cudaExtent extent; 
# 1257
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1258
}; 
#endif
# 1263 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1263
struct cudaMemcpy3DPeerParms { 
# 1265
cudaArray_t srcArray; 
# 1266
cudaPos srcPos; 
# 1267
cudaPitchedPtr srcPtr; 
# 1268
int srcDevice; 
# 1270
cudaArray_t dstArray; 
# 1271
cudaPos dstPos; 
# 1272
cudaPitchedPtr dstPtr; 
# 1273
int dstDevice; 
# 1275
cudaExtent extent; 
# 1276
}; 
#endif
# 1281 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1281
struct cudaMemsetParams { 
# 1282
void *dst; 
# 1283
size_t pitch; 
# 1284
unsigned value; 
# 1285
unsigned elementSize; 
# 1286
size_t width; 
# 1287
size_t height; 
# 1288
}; 
#endif
# 1293 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1293
enum cudaAccessProperty { 
# 1294
cudaAccessPropertyNormal, 
# 1295
cudaAccessPropertyStreaming, 
# 1296
cudaAccessPropertyPersisting
# 1297
}; 
#endif
# 1310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1310
struct cudaAccessPolicyWindow { 
# 1311
void *base_ptr; 
# 1312
size_t num_bytes; 
# 1313
float hitRatio; 
# 1314
cudaAccessProperty hitProp; 
# 1315
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1316
}; 
#endif
# 1328 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1333
#if 0
# 1333
struct cudaHostNodeParams { 
# 1334
cudaHostFn_t fn; 
# 1335
void *userData; 
# 1336
}; 
#endif
# 1341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1341
enum cudaStreamCaptureStatus { 
# 1342
cudaStreamCaptureStatusNone, 
# 1343
cudaStreamCaptureStatusActive, 
# 1344
cudaStreamCaptureStatusInvalidated
# 1346
}; 
#endif
# 1352 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1352
enum cudaStreamCaptureMode { 
# 1353
cudaStreamCaptureModeGlobal, 
# 1354
cudaStreamCaptureModeThreadLocal, 
# 1355
cudaStreamCaptureModeRelaxed
# 1356
}; 
#endif
# 1358 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1358
enum cudaSynchronizationPolicy { 
# 1359
cudaSyncPolicyAuto = 1, 
# 1360
cudaSyncPolicySpin, 
# 1361
cudaSyncPolicyYield, 
# 1362
cudaSyncPolicyBlockingSync
# 1363
}; 
#endif
# 1368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1368
enum cudaStreamAttrID { 
# 1369
cudaStreamAttributeAccessPolicyWindow = 1, 
# 1370
cudaStreamAttributeSynchronizationPolicy = 3
# 1371
}; 
#endif
# 1376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1376
union cudaStreamAttrValue { 
# 1377
cudaAccessPolicyWindow accessPolicyWindow; 
# 1378
cudaSynchronizationPolicy syncPolicy; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1379
}; 
#endif
# 1384 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1384
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1385
cudaStreamAddCaptureDependencies, 
# 1386
cudaStreamSetCaptureDependencies
# 1387
}; 
#endif
# 1392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1392
enum cudaUserObjectFlags { 
# 1393
cudaUserObjectNoDestructorSync = 1
# 1394
}; 
#endif
# 1399 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1399
enum cudaUserObjectRetainFlags { 
# 1400
cudaGraphUserObjectMove = 1
# 1401
}; 
#endif
# 1406 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
struct cudaGraphicsResource; 
# 1411
#if 0
# 1411
enum cudaGraphicsRegisterFlags { 
# 1413
cudaGraphicsRegisterFlagsNone, 
# 1414
cudaGraphicsRegisterFlagsReadOnly, 
# 1415
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1416
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1417
cudaGraphicsRegisterFlagsTextureGather = 8
# 1418
}; 
#endif
# 1423 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1423
enum cudaGraphicsMapFlags { 
# 1425
cudaGraphicsMapFlagsNone, 
# 1426
cudaGraphicsMapFlagsReadOnly, 
# 1427
cudaGraphicsMapFlagsWriteDiscard
# 1428
}; 
#endif
# 1433 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1433
enum cudaGraphicsCubeFace { 
# 1435
cudaGraphicsCubeFacePositiveX, 
# 1436
cudaGraphicsCubeFaceNegativeX, 
# 1437
cudaGraphicsCubeFacePositiveY, 
# 1438
cudaGraphicsCubeFaceNegativeY, 
# 1439
cudaGraphicsCubeFacePositiveZ, 
# 1440
cudaGraphicsCubeFaceNegativeZ
# 1441
}; 
#endif
# 1446 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1446
enum cudaKernelNodeAttrID { 
# 1447
cudaKernelNodeAttributeAccessPolicyWindow = 1, 
# 1448
cudaKernelNodeAttributeCooperative
# 1449
}; 
#endif
# 1454 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1454
union cudaKernelNodeAttrValue { 
# 1455
cudaAccessPolicyWindow accessPolicyWindow; 
# 1456
int cooperative; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1457
}; 
#endif
# 1462 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1462
enum cudaResourceType { 
# 1464
cudaResourceTypeArray, 
# 1465
cudaResourceTypeMipmappedArray, 
# 1466
cudaResourceTypeLinear, 
# 1467
cudaResourceTypePitch2D
# 1468
}; 
#endif
# 1473 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1473
enum cudaResourceViewFormat { 
# 1475
cudaResViewFormatNone, 
# 1476
cudaResViewFormatUnsignedChar1, 
# 1477
cudaResViewFormatUnsignedChar2, 
# 1478
cudaResViewFormatUnsignedChar4, 
# 1479
cudaResViewFormatSignedChar1, 
# 1480
cudaResViewFormatSignedChar2, 
# 1481
cudaResViewFormatSignedChar4, 
# 1482
cudaResViewFormatUnsignedShort1, 
# 1483
cudaResViewFormatUnsignedShort2, 
# 1484
cudaResViewFormatUnsignedShort4, 
# 1485
cudaResViewFormatSignedShort1, 
# 1486
cudaResViewFormatSignedShort2, 
# 1487
cudaResViewFormatSignedShort4, 
# 1488
cudaResViewFormatUnsignedInt1, 
# 1489
cudaResViewFormatUnsignedInt2, 
# 1490
cudaResViewFormatUnsignedInt4, 
# 1491
cudaResViewFormatSignedInt1, 
# 1492
cudaResViewFormatSignedInt2, 
# 1493
cudaResViewFormatSignedInt4, 
# 1494
cudaResViewFormatHalf1, 
# 1495
cudaResViewFormatHalf2, 
# 1496
cudaResViewFormatHalf4, 
# 1497
cudaResViewFormatFloat1, 
# 1498
cudaResViewFormatFloat2, 
# 1499
cudaResViewFormatFloat4, 
# 1500
cudaResViewFormatUnsignedBlockCompressed1, 
# 1501
cudaResViewFormatUnsignedBlockCompressed2, 
# 1502
cudaResViewFormatUnsignedBlockCompressed3, 
# 1503
cudaResViewFormatUnsignedBlockCompressed4, 
# 1504
cudaResViewFormatSignedBlockCompressed4, 
# 1505
cudaResViewFormatUnsignedBlockCompressed5, 
# 1506
cudaResViewFormatSignedBlockCompressed5, 
# 1507
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1508
cudaResViewFormatSignedBlockCompressed6H, 
# 1509
cudaResViewFormatUnsignedBlockCompressed7
# 1510
}; 
#endif
# 1515 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1515
struct cudaResourceDesc { 
# 1516
cudaResourceType resType; 
# 1518
union { 
# 1519
struct { 
# 1520
cudaArray_t array; 
# 1521
} array; 
# 1522
struct { 
# 1523
cudaMipmappedArray_t mipmap; 
# 1524
} mipmap; 
# 1525
struct { 
# 1526
void *devPtr; 
# 1527
cudaChannelFormatDesc desc; 
# 1528
size_t sizeInBytes; 
# 1529
} linear; 
# 1530
struct { 
# 1531
void *devPtr; 
# 1532
cudaChannelFormatDesc desc; 
# 1533
size_t width; 
# 1534
size_t height; 
# 1535
size_t pitchInBytes; 
# 1536
} pitch2D; 
# 1537
} res; 
# 1538
}; 
#endif
# 1543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1543
struct cudaResourceViewDesc { 
# 1545
cudaResourceViewFormat format; 
# 1546
size_t width; 
# 1547
size_t height; 
# 1548
size_t depth; 
# 1549
unsigned firstMipmapLevel; 
# 1550
unsigned lastMipmapLevel; 
# 1551
unsigned firstLayer; 
# 1552
unsigned lastLayer; 
# 1553
}; 
#endif
# 1558 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1558
struct cudaPointerAttributes { 
# 1564
cudaMemoryType type; 
# 1575 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
int device; 
# 1581
void *devicePointer; 
# 1590 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
void *hostPointer; 
# 1591
}; 
#endif
# 1596 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1596
struct cudaFuncAttributes { 
# 1603
size_t sharedSizeBytes; 
# 1609
size_t constSizeBytes; 
# 1614
size_t localSizeBytes; 
# 1621
int maxThreadsPerBlock; 
# 1626
int numRegs; 
# 1633
int ptxVersion; 
# 1640
int binaryVersion; 
# 1646
int cacheModeCA; 
# 1653
int maxDynamicSharedSizeBytes; 
# 1662 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
int preferredShmemCarveout; 
# 1712 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
}; 
#endif
# 1717 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1717
enum cudaFuncAttribute { 
# 1719
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1720
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1729 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaFuncAttributeMax
# 1730
}; 
#endif
# 1735 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1735
enum cudaFuncCache { 
# 1737
cudaFuncCachePreferNone, 
# 1738
cudaFuncCachePreferShared, 
# 1739
cudaFuncCachePreferL1, 
# 1740
cudaFuncCachePreferEqual
# 1741
}; 
#endif
# 1747 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1747
enum cudaSharedMemConfig { 
# 1749
cudaSharedMemBankSizeDefault, 
# 1750
cudaSharedMemBankSizeFourByte, 
# 1751
cudaSharedMemBankSizeEightByte
# 1752
}; 
#endif
# 1757 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1757
enum cudaSharedCarveout { 
# 1758
cudaSharedmemCarveoutDefault = (-1), 
# 1759
cudaSharedmemCarveoutMaxShared = 100, 
# 1760
cudaSharedmemCarveoutMaxL1 = 0
# 1761
}; 
#endif
# 1777 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1777
enum cudaComputeMode { 
# 1779
cudaComputeModeDefault, 
# 1780
cudaComputeModeExclusive, 
# 1781
cudaComputeModeProhibited, 
# 1782
cudaComputeModeExclusiveProcess
# 1783
}; 
#endif
# 1788 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1788
enum cudaLimit { 
# 1790
cudaLimitStackSize, 
# 1791
cudaLimitPrintfFifoSize, 
# 1792
cudaLimitMallocHeapSize, 
# 1793
cudaLimitDevRuntimeSyncDepth, 
# 1794
cudaLimitDevRuntimePendingLaunchCount, 
# 1795
cudaLimitMaxL2FetchGranularity, 
# 1796
cudaLimitPersistingL2CacheSize
# 1797
}; 
#endif
# 1802 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1802
enum cudaMemoryAdvise { 
# 1804
cudaMemAdviseSetReadMostly = 1, 
# 1805
cudaMemAdviseUnsetReadMostly, 
# 1806
cudaMemAdviseSetPreferredLocation, 
# 1807
cudaMemAdviseUnsetPreferredLocation, 
# 1808
cudaMemAdviseSetAccessedBy, 
# 1809
cudaMemAdviseUnsetAccessedBy
# 1810
}; 
#endif
# 1815 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1815
enum cudaMemRangeAttribute { 
# 1817
cudaMemRangeAttributeReadMostly = 1, 
# 1818
cudaMemRangeAttributePreferredLocation, 
# 1819
cudaMemRangeAttributeAccessedBy, 
# 1820
cudaMemRangeAttributeLastPrefetchLocation
# 1821
}; 
#endif
# 1826 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1826
enum cudaOutputMode { 
# 1828
cudaKeyValuePair, 
# 1829
cudaCSV
# 1830
}; 
#endif
# 1835 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1835
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1836
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1837
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1838
}; 
#endif
# 1843 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1843
enum cudaGPUDirectRDMAWritesOrdering { 
# 1844
cudaGPUDirectRDMAWritesOrderingNone, 
# 1845
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1846
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1847
}; 
#endif
# 1852 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1852
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1853
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1854
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1855
}; 
#endif
# 1860 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1860
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1861
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1862
}; 
#endif
# 1868 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1868
enum cudaDeviceAttr { 
# 1870
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1871
cudaDevAttrMaxBlockDimX, 
# 1872
cudaDevAttrMaxBlockDimY, 
# 1873
cudaDevAttrMaxBlockDimZ, 
# 1874
cudaDevAttrMaxGridDimX, 
# 1875
cudaDevAttrMaxGridDimY, 
# 1876
cudaDevAttrMaxGridDimZ, 
# 1877
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1878
cudaDevAttrTotalConstantMemory, 
# 1879
cudaDevAttrWarpSize, 
# 1880
cudaDevAttrMaxPitch, 
# 1881
cudaDevAttrMaxRegistersPerBlock, 
# 1882
cudaDevAttrClockRate, 
# 1883
cudaDevAttrTextureAlignment, 
# 1884
cudaDevAttrGpuOverlap, 
# 1885
cudaDevAttrMultiProcessorCount, 
# 1886
cudaDevAttrKernelExecTimeout, 
# 1887
cudaDevAttrIntegrated, 
# 1888
cudaDevAttrCanMapHostMemory, 
# 1889
cudaDevAttrComputeMode, 
# 1890
cudaDevAttrMaxTexture1DWidth, 
# 1891
cudaDevAttrMaxTexture2DWidth, 
# 1892
cudaDevAttrMaxTexture2DHeight, 
# 1893
cudaDevAttrMaxTexture3DWidth, 
# 1894
cudaDevAttrMaxTexture3DHeight, 
# 1895
cudaDevAttrMaxTexture3DDepth, 
# 1896
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1897
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1898
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1899
cudaDevAttrSurfaceAlignment, 
# 1900
cudaDevAttrConcurrentKernels, 
# 1901
cudaDevAttrEccEnabled, 
# 1902
cudaDevAttrPciBusId, 
# 1903
cudaDevAttrPciDeviceId, 
# 1904
cudaDevAttrTccDriver, 
# 1905
cudaDevAttrMemoryClockRate, 
# 1906
cudaDevAttrGlobalMemoryBusWidth, 
# 1907
cudaDevAttrL2CacheSize, 
# 1908
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1909
cudaDevAttrAsyncEngineCount, 
# 1910
cudaDevAttrUnifiedAddressing, 
# 1911
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1912
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1913
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1914
cudaDevAttrMaxTexture2DGatherHeight, 
# 1915
cudaDevAttrMaxTexture3DWidthAlt, 
# 1916
cudaDevAttrMaxTexture3DHeightAlt, 
# 1917
cudaDevAttrMaxTexture3DDepthAlt, 
# 1918
cudaDevAttrPciDomainId, 
# 1919
cudaDevAttrTexturePitchAlignment, 
# 1920
cudaDevAttrMaxTextureCubemapWidth, 
# 1921
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1922
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1923
cudaDevAttrMaxSurface1DWidth, 
# 1924
cudaDevAttrMaxSurface2DWidth, 
# 1925
cudaDevAttrMaxSurface2DHeight, 
# 1926
cudaDevAttrMaxSurface3DWidth, 
# 1927
cudaDevAttrMaxSurface3DHeight, 
# 1928
cudaDevAttrMaxSurface3DDepth, 
# 1929
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1930
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1931
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1932
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1933
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1934
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1935
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1936
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1937
cudaDevAttrMaxTexture1DLinearWidth, 
# 1938
cudaDevAttrMaxTexture2DLinearWidth, 
# 1939
cudaDevAttrMaxTexture2DLinearHeight, 
# 1940
cudaDevAttrMaxTexture2DLinearPitch, 
# 1941
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1942
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1943
cudaDevAttrComputeCapabilityMajor, 
# 1944
cudaDevAttrComputeCapabilityMinor, 
# 1945
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1946
cudaDevAttrStreamPrioritiesSupported, 
# 1947
cudaDevAttrGlobalL1CacheSupported, 
# 1948
cudaDevAttrLocalL1CacheSupported, 
# 1949
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1950
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1951
cudaDevAttrManagedMemory, 
# 1952
cudaDevAttrIsMultiGpuBoard, 
# 1953
cudaDevAttrMultiGpuBoardGroupID, 
# 1954
cudaDevAttrHostNativeAtomicSupported, 
# 1955
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1956
cudaDevAttrPageableMemoryAccess, 
# 1957
cudaDevAttrConcurrentManagedAccess, 
# 1958
cudaDevAttrComputePreemptionSupported, 
# 1959
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1960
cudaDevAttrReserved92, 
# 1961
cudaDevAttrReserved93, 
# 1962
cudaDevAttrReserved94, 
# 1963
cudaDevAttrCooperativeLaunch, 
# 1964
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1965
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1966
cudaDevAttrCanFlushRemoteWrites, 
# 1967
cudaDevAttrHostRegisterSupported, 
# 1968
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1969
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1970
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1971
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1972
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1973
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1974
cudaDevAttrSparseCudaArraySupported, 
# 1975
cudaDevAttrHostRegisterReadOnlySupported, 
# 1976
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 1977
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 1978
cudaDevAttrMemoryPoolsSupported, 
# 1979
cudaDevAttrGPUDirectRDMASupported, 
# 1980
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1981
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1982
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1987
cudaDevAttrDeferredMappingCudaArraySupported = 121, 
# 1989
cudaDevAttrMax
# 1990
}; 
#endif
# 1995 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1995
enum cudaMemPoolAttr { 
# 2005 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 2012
cudaMemPoolReuseAllowOpportunistic, 
# 2020
cudaMemPoolReuseAllowInternalDependencies, 
# 2031 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 2037
cudaMemPoolAttrReservedMemCurrent, 
# 2044
cudaMemPoolAttrReservedMemHigh, 
# 2050
cudaMemPoolAttrUsedMemCurrent, 
# 2057
cudaMemPoolAttrUsedMemHigh
# 2058
}; 
#endif
# 2063 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2063
enum cudaMemLocationType { 
# 2064
cudaMemLocationTypeInvalid, 
# 2065
cudaMemLocationTypeDevice
# 2066
}; 
#endif
# 2073 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2073
struct cudaMemLocation { 
# 2074
cudaMemLocationType type; 
# 2075
int id; 
# 2076
}; 
#endif
# 2081 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2081
enum cudaMemAccessFlags { 
# 2082
cudaMemAccessFlagsProtNone, 
# 2083
cudaMemAccessFlagsProtRead, 
# 2084
cudaMemAccessFlagsProtReadWrite = 3
# 2085
}; 
#endif
# 2090 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2090
struct cudaMemAccessDesc { 
# 2091
cudaMemLocation location; 
# 2092
cudaMemAccessFlags flags; 
# 2093
}; 
#endif
# 2098 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2098
enum cudaMemAllocationType { 
# 2099
cudaMemAllocationTypeInvalid, 
# 2103
cudaMemAllocationTypePinned, 
# 2104
cudaMemAllocationTypeMax = 2147483647
# 2105
}; 
#endif
# 2110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2110
enum cudaMemAllocationHandleType { 
# 2111
cudaMemHandleTypeNone, 
# 2112
cudaMemHandleTypePosixFileDescriptor, 
# 2113
cudaMemHandleTypeWin32, 
# 2114
cudaMemHandleTypeWin32Kmt = 4
# 2115
}; 
#endif
# 2120 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2120
struct cudaMemPoolProps { 
# 2121
cudaMemAllocationType allocType; 
# 2122
cudaMemAllocationHandleType handleTypes; 
# 2123
cudaMemLocation location; 
# 2130
void *win32SecurityAttributes; 
# 2131
unsigned char reserved[64]; 
# 2132
}; 
#endif
# 2137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2137
struct cudaMemPoolPtrExportData { 
# 2138
unsigned char reserved[64]; 
# 2139
}; 
#endif
# 2144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2144
struct cudaMemAllocNodeParams { 
# 2149
cudaMemPoolProps poolProps; 
# 2150
const cudaMemAccessDesc *accessDescs; 
# 2151
size_t accessDescCount; 
# 2152
size_t bytesize; 
# 2153
void *dptr; 
# 2154
}; 
#endif
# 2159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2159
enum cudaGraphMemAttributeType { 
# 2164
cudaGraphMemAttrUsedMemCurrent, 
# 2171
cudaGraphMemAttrUsedMemHigh, 
# 2178
cudaGraphMemAttrReservedMemCurrent, 
# 2185
cudaGraphMemAttrReservedMemHigh
# 2186
}; 
#endif
# 2192 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2192
enum cudaDeviceP2PAttr { 
# 2193
cudaDevP2PAttrPerformanceRank = 1, 
# 2194
cudaDevP2PAttrAccessSupported, 
# 2195
cudaDevP2PAttrNativeAtomicSupported, 
# 2196
cudaDevP2PAttrCudaArrayAccessSupported
# 2197
}; 
#endif
# 2204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2204
struct CUuuid_st { 
# 2205
char bytes[16]; 
# 2206
}; 
#endif
# 2207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2207
CUuuid; 
#endif
# 2209 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2209
cudaUUID_t; 
#endif
# 2214 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2214
struct cudaDeviceProp { 
# 2216
char name[256]; 
# 2217
cudaUUID_t uuid; 
# 2218
char luid[8]; 
# 2219
unsigned luidDeviceNodeMask; 
# 2220
size_t totalGlobalMem; 
# 2221
size_t sharedMemPerBlock; 
# 2222
int regsPerBlock; 
# 2223
int warpSize; 
# 2224
size_t memPitch; 
# 2225
int maxThreadsPerBlock; 
# 2226
int maxThreadsDim[3]; 
# 2227
int maxGridSize[3]; 
# 2228
int clockRate; 
# 2229
size_t totalConstMem; 
# 2230
int major; 
# 2231
int minor; 
# 2232
size_t textureAlignment; 
# 2233
size_t texturePitchAlignment; 
# 2234
int deviceOverlap; 
# 2235
int multiProcessorCount; 
# 2236
int kernelExecTimeoutEnabled; 
# 2237
int integrated; 
# 2238
int canMapHostMemory; 
# 2239
int computeMode; 
# 2240
int maxTexture1D; 
# 2241
int maxTexture1DMipmap; 
# 2242
int maxTexture1DLinear; 
# 2243
int maxTexture2D[2]; 
# 2244
int maxTexture2DMipmap[2]; 
# 2245
int maxTexture2DLinear[3]; 
# 2246
int maxTexture2DGather[2]; 
# 2247
int maxTexture3D[3]; 
# 2248
int maxTexture3DAlt[3]; 
# 2249
int maxTextureCubemap; 
# 2250
int maxTexture1DLayered[2]; 
# 2251
int maxTexture2DLayered[3]; 
# 2252
int maxTextureCubemapLayered[2]; 
# 2253
int maxSurface1D; 
# 2254
int maxSurface2D[2]; 
# 2255
int maxSurface3D[3]; 
# 2256
int maxSurface1DLayered[2]; 
# 2257
int maxSurface2DLayered[3]; 
# 2258
int maxSurfaceCubemap; 
# 2259
int maxSurfaceCubemapLayered[2]; 
# 2260
size_t surfaceAlignment; 
# 2261
int concurrentKernels; 
# 2262
int ECCEnabled; 
# 2263
int pciBusID; 
# 2264
int pciDeviceID; 
# 2265
int pciDomainID; 
# 2266
int tccDriver; 
# 2267
int asyncEngineCount; 
# 2268
int unifiedAddressing; 
# 2269
int memoryClockRate; 
# 2270
int memoryBusWidth; 
# 2271
int l2CacheSize; 
# 2272
int persistingL2CacheMaxSize; 
# 2273
int maxThreadsPerMultiProcessor; 
# 2274
int streamPrioritiesSupported; 
# 2275
int globalL1CacheSupported; 
# 2276
int localL1CacheSupported; 
# 2277
size_t sharedMemPerMultiprocessor; 
# 2278
int regsPerMultiprocessor; 
# 2279
int managedMemory; 
# 2280
int isMultiGpuBoard; 
# 2281
int multiGpuBoardGroupID; 
# 2282
int hostNativeAtomicSupported; 
# 2283
int singleToDoublePrecisionPerfRatio; 
# 2284
int pageableMemoryAccess; 
# 2285
int concurrentManagedAccess; 
# 2286
int computePreemptionSupported; 
# 2287
int canUseHostPointerForRegisteredMem; 
# 2288
int cooperativeLaunch; 
# 2289
int cooperativeMultiDeviceLaunch; 
# 2290
size_t sharedMemPerBlockOptin; 
# 2291
int pageableMemoryAccessUsesHostPageTables; 
# 2292
int directManagedMemAccessFromHost; 
# 2293
int maxBlocksPerMultiProcessor; 
# 2294
int accessPolicyMaxWindowSize; 
# 2295
size_t reservedSharedMemPerBlock; 
# 2296
}; 
#endif
# 2397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2394
struct cudaIpcEventHandle_st { 
# 2396
char reserved[64]; 
# 2397
} cudaIpcEventHandle_t; 
#endif
# 2405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2402
struct cudaIpcMemHandle_st { 
# 2404
char reserved[64]; 
# 2405
} cudaIpcMemHandle_t; 
#endif
# 2410 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2410
enum cudaExternalMemoryHandleType { 
# 2414
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2418
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2422
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2426
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2430
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2434
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2438
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2442
cudaExternalMemoryHandleTypeNvSciBuf
# 2443
}; 
#endif
# 2485 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2485
struct cudaExternalMemoryHandleDesc { 
# 2489
cudaExternalMemoryHandleType type; 
# 2490
union { 
# 2496
int fd; 
# 2512 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2516
void *handle; 
# 2521
const void *name; 
# 2522
} win32; 
# 2527
const void *nvSciBufObject; 
# 2528
} handle; 
# 2532
unsigned long long size; 
# 2536
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2537
}; 
#endif
# 2542 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2542
struct cudaExternalMemoryBufferDesc { 
# 2546
unsigned long long offset; 
# 2550
unsigned long long size; 
# 2554
unsigned flags; 
# 2555
}; 
#endif
# 2560 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2560
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2565
unsigned long long offset; 
# 2569
cudaChannelFormatDesc formatDesc; 
# 2573
cudaExtent extent; 
# 2578
unsigned flags; 
# 2582
unsigned numLevels; 
# 2583
}; 
#endif
# 2588 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2588
enum cudaExternalSemaphoreHandleType { 
# 2592
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2596
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2600
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2604
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2608
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2612
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2616
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2620
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2624
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2628
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2629
}; 
#endif
# 2634 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2634
struct cudaExternalSemaphoreHandleDesc { 
# 2638
cudaExternalSemaphoreHandleType type; 
# 2639
union { 
# 2646
int fd; 
# 2662 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2666
void *handle; 
# 2671
const void *name; 
# 2672
} win32; 
# 2676
const void *nvSciSyncObj; 
# 2677
} handle; 
# 2681
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2682
}; 
#endif
# 2687 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2687
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2688
struct { 
# 2692
struct { 
# 2696
unsigned long long value; 
# 2697
} fence; 
# 2698
union { 
# 2703
void *fence; 
# 2704
unsigned long long reserved; 
# 2705
} nvSciSync; 
# 2709
struct { 
# 2713
unsigned long long key; 
# 2714
} keyedMutex; 
# 2715
} params; 
# 2726 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2727
}; 
#endif
# 2732 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2732
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2733
struct { 
# 2737
struct { 
# 2741
unsigned long long value; 
# 2742
} fence; 
# 2743
union { 
# 2748
void *fence; 
# 2749
unsigned long long reserved; 
# 2750
} nvSciSync; 
# 2754
struct { 
# 2758
unsigned long long key; 
# 2762
unsigned timeoutMs; 
# 2763
} keyedMutex; 
# 2764
} params; 
# 2775 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2776
}; 
#endif
# 2781 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2781
struct cudaExternalSemaphoreSignalParams { 
# 2782
struct { 
# 2786
struct { 
# 2790
unsigned long long value; 
# 2791
} fence; 
# 2792
union { 
# 2797
void *fence; 
# 2798
unsigned long long reserved; 
# 2799
} nvSciSync; 
# 2803
struct { 
# 2807
unsigned long long key; 
# 2808
} keyedMutex; 
# 2809
unsigned reserved[12]; 
# 2810
} params; 
# 2821 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2822
unsigned reserved[16]; 
# 2823
}; 
#endif
# 2828 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2828
struct cudaExternalSemaphoreWaitParams { 
# 2829
struct { 
# 2833
struct { 
# 2837
unsigned long long value; 
# 2838
} fence; 
# 2839
union { 
# 2844
void *fence; 
# 2845
unsigned long long reserved; 
# 2846
} nvSciSync; 
# 2850
struct { 
# 2854
unsigned long long key; 
# 2858
unsigned timeoutMs; 
# 2859
} keyedMutex; 
# 2860
unsigned reserved[10]; 
# 2861
} params; 
# 2872 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2873
unsigned reserved[16]; 
# 2874
}; 
#endif
# 2886 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaError 
# 2886
cudaError_t; 
#endif
# 2891 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2891
cudaStream_t; 
#endif
# 2896 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2896
cudaEvent_t; 
#endif
# 2901 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2901
cudaGraphicsResource_t; 
#endif
# 2906 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 2906
cudaOutputMode_t; 
#endif
# 2911 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2911
cudaExternalMemory_t; 
#endif
# 2916 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2916
cudaExternalSemaphore_t; 
#endif
# 2921 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2921
cudaGraph_t; 
#endif
# 2926 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2926
cudaGraphNode_t; 
#endif
# 2931 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2931
cudaUserObject_t; 
#endif
# 2936 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2936
cudaFunction_t; 
#endif
# 2941 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2941
cudaMemPool_t; 
#endif
# 2946 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2946
enum cudaCGScope { 
# 2947
cudaCGScopeInvalid, 
# 2948
cudaCGScopeGrid, 
# 2949
cudaCGScopeMultiGrid
# 2950
}; 
#endif
# 2955 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2955
struct cudaLaunchParams { 
# 2957
void *func; 
# 2958
dim3 gridDim; 
# 2959
dim3 blockDim; 
# 2960
void **args; 
# 2961
size_t sharedMem; 
# 2962
cudaStream_t stream; 
# 2963
}; 
#endif
# 2968 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2968
struct cudaKernelNodeParams { 
# 2969
void *func; 
# 2970
dim3 gridDim; 
# 2971
dim3 blockDim; 
# 2972
unsigned sharedMemBytes; 
# 2973
void **kernelParams; 
# 2974
void **extra; 
# 2975
}; 
#endif
# 2980 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2980
struct cudaExternalSemaphoreSignalNodeParams { 
# 2981
cudaExternalSemaphore_t *extSemArray; 
# 2982
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2983
unsigned numExtSems; 
# 2984
}; 
#endif
# 2989 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2989
struct cudaExternalSemaphoreWaitNodeParams { 
# 2990
cudaExternalSemaphore_t *extSemArray; 
# 2991
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2992
unsigned numExtSems; 
# 2993
}; 
#endif
# 2998 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2998
enum cudaGraphNodeType { 
# 2999
cudaGraphNodeTypeKernel, 
# 3000
cudaGraphNodeTypeMemcpy, 
# 3001
cudaGraphNodeTypeMemset, 
# 3002
cudaGraphNodeTypeHost, 
# 3003
cudaGraphNodeTypeGraph, 
# 3004
cudaGraphNodeTypeEmpty, 
# 3005
cudaGraphNodeTypeWaitEvent, 
# 3006
cudaGraphNodeTypeEventRecord, 
# 3007
cudaGraphNodeTypeExtSemaphoreSignal, 
# 3008
cudaGraphNodeTypeExtSemaphoreWait, 
# 3009
cudaGraphNodeTypeMemAlloc, 
# 3010
cudaGraphNodeTypeMemFree, 
# 3011
cudaGraphNodeTypeCount
# 3012
}; 
#endif
# 3017 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 3022
#if 0
# 3022
enum cudaGraphExecUpdateResult { 
# 3023
cudaGraphExecUpdateSuccess, 
# 3024
cudaGraphExecUpdateError, 
# 3025
cudaGraphExecUpdateErrorTopologyChanged, 
# 3026
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 3027
cudaGraphExecUpdateErrorFunctionChanged, 
# 3028
cudaGraphExecUpdateErrorParametersChanged, 
# 3029
cudaGraphExecUpdateErrorNotSupported, 
# 3030
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 3031
cudaGraphExecUpdateErrorAttributesChanged
# 3032
}; 
#endif
# 3038 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3038
enum cudaGetDriverEntryPointFlags { 
# 3039
cudaEnableDefault, 
# 3040
cudaEnableLegacyStream, 
# 3041
cudaEnablePerThreadDefaultStream
# 3042
}; 
#endif
# 3047 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3047
enum cudaGraphDebugDotFlags { 
# 3048
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3049
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3050
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3051
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3052
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3053
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3054
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3055
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3056
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3057
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 3058
}; 
#endif
# 3063 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3063
enum cudaGraphInstantiateFlags { 
# 3064
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1
# 3065
}; 
#endif
# 84 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 158
int disableTrilinearOptimization; 
# 159
int __cudaReserved[14]; 
# 160
}; 
#endif
# 165 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 165
struct cudaTextureDesc { 
# 170
cudaTextureAddressMode addressMode[3]; 
# 174
cudaTextureFilterMode filterMode; 
# 178
cudaTextureReadMode readMode; 
# 182
int sRGB; 
# 186
float borderColor[4]; 
# 190
int normalizedCoords; 
# 194
unsigned maxAnisotropy; 
# 198
cudaTextureFilterMode mipmapFilterMode; 
# 202
float mipmapLevelBias; 
# 206
float minMipmapLevelClamp; 
# 210
float maxMipmapLevelClamp; 
# 214
int disableTrilinearOptimization; 
# 218
int seamlessCubemap; 
# 219
}; 
#endif
# 224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
typedef unsigned long long 
# 224
cudaTextureObject_t; 
#endif
# 84 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/library_types.h"
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_16BF = 14, 
# 59
CUDA_C_16BF, 
# 60
CUDA_R_32F = 0, 
# 61
CUDA_C_32F = 4, 
# 62
CUDA_R_64F = 1, 
# 63
CUDA_C_64F = 5, 
# 64
CUDA_R_4I = 16, 
# 65
CUDA_C_4I, 
# 66
CUDA_R_4U, 
# 67
CUDA_C_4U, 
# 68
CUDA_R_8I = 3, 
# 69
CUDA_C_8I = 7, 
# 70
CUDA_R_8U, 
# 71
CUDA_C_8U, 
# 72
CUDA_R_16I = 20, 
# 73
CUDA_C_16I, 
# 74
CUDA_R_16U, 
# 75
CUDA_C_16U, 
# 76
CUDA_R_32I = 10, 
# 77
CUDA_C_32I, 
# 78
CUDA_R_32U, 
# 79
CUDA_C_32U, 
# 80
CUDA_R_64I = 24, 
# 81
CUDA_C_64I, 
# 82
CUDA_R_64U, 
# 83
CUDA_C_64U
# 84
} cudaDataType; 
# 92
typedef 
# 87
enum libraryPropertyType_t { 
# 89
MAJOR_VERSION, 
# 90
MINOR_VERSION, 
# 91
PATCH_LEVEL
# 92
} libraryPropertyType; 
# 131 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern "C" {
# 133
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 134
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 135
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 136
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 137
extern cudaError_t cudaDeviceSynchronize(); 
# 138
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 139
extern cudaError_t cudaGetLastError(); 
# 140
extern cudaError_t cudaPeekAtLastError(); 
# 141
extern const char *cudaGetErrorString(cudaError_t error); 
# 142
extern const char *cudaGetErrorName(cudaError_t error); 
# 143
extern cudaError_t cudaGetDeviceCount(int * count); 
# 144
extern cudaError_t cudaGetDevice(int * device); 
# 145
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 146
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 147
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 148
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 149
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 150
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 151
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 152
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 153
__attribute__((unused)) extern cudaError_t cudaEventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 154
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 155
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 156
extern cudaError_t cudaFree(void * devPtr); 
# 157
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 158
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 159
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 160
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 161
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 162
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 163
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 164
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 165
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 166
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 167
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 168
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 169
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 170
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 191 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBuffer(size_t alignment, size_t size); 
# 219 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 220
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 221
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 239 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 240
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 243
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 244
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 246
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 247
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 248
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 249
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 250
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 251
}
# 253
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 254
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 255
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 256
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern "C" {
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 328 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 473 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 507 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 588 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 619 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 663 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 690 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 720 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 768 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 809 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 852 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 916 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 952 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 984 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1028 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1054 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1219 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1282 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1330 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1362 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1668 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1872 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1890 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1914 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1934 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 1982 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2022 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2043 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2084 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2201 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2245 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2285 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2317 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2363 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2430 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2471 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue * value_out); 
# 2495 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue * value); 
# 2529 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2560 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2568
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2635 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2659 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2684 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2768 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2807 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2858 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 2886 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 2924 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 2956 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus, unsigned long long * pId); 
# 3011 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
# 3044 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
# 3081 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3118 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3158 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3205 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3237 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3267 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3296 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3519 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3574 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3634 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3658 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3811 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3878 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3954 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 3977 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4044 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4101 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4202 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4249 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4304 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4337 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4374 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4400 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4424 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4492 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4549 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 4578 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4623 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4744 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 4777 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 4810 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 4853 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 4907 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 4936 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 4959 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 4982 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5005 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5071 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 5164 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 5187 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5254 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5293 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5440 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5587 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5620 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5725 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 5756 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 5874 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 5900 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 5934 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 5960 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 5989 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6013 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6037 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6066 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6096 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 6176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 6225 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6275 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6325 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 6372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6458 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6515 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6550 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 6613 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6671 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6728 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6779 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6830 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6859 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 6893 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 6939 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 6975 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 7016 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 7069 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7097 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7124 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 7194 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 7369 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 7408 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 7468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 7510 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 7553 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7604 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7654 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7723 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
# 7749 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 7774 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
# 7818 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7866 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 7881 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
# 7894 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 7914 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 7936 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 7972 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 7997 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8024 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8047 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8076 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8228 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8269 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8311 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8471 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8506 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8538 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 8576 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8605 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8676 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = ((2147483647) * 2U) + 1U); 
# 8735 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
# 8773 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8813 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 8839 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 8868 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
# 8898 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 8943 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 8968 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 9003 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 9033 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9257 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9277 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9297 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9317 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9338 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9383 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9422 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9456 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9481 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9658 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9683 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9703 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9726 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue * value_out); 
# 9750 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue * value); 
# 9800 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9859 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9928 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9996 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10028 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 10054 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 10093 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10185 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10255 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10278 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10319 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10342 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10365 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 10432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10469 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 10512 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10539 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10566 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10612 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10639 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10666 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10715 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10748 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10775 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10824 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10857 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10884 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10961 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10988 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 11048 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
# 11072 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 11100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11171 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11199 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11227 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11289 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 11320 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 11354 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 11385 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 11417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 11448 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11479 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11509 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11547 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphNode_t * pErrorNode, char * pLogBuffer, size_t bufferSize); 
# 11590 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags); 
# 11634 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11684 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11739 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11802 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11863 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 11917 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 11956 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12002 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12046 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12090 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 12258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 12336 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t * hErrorNode_out, cudaGraphExecUpdateResult * updateResult_out); 
# 12361 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12436 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12455 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12491 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12515 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12571 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12596 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12662 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags); 
# 12667
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12843 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12985 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
}
# 124 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 125
{ 
# 126
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 148
} 
# 150
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 151
{ 
# 152
int e = (((int)sizeof(unsigned short)) * 8); 
# 154
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 155
} 
# 157
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 158
{ 
# 159
int e = (((int)sizeof(char)) * 8); 
# 164
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 169
{ 
# 170
int e = (((int)sizeof(signed char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 176
{ 
# 177
int e = (((int)sizeof(unsigned char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 183
{ 
# 184
int e = (((int)sizeof(signed char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 190
{ 
# 191
int e = (((int)sizeof(unsigned char)) * 8); 
# 193
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 197
{ 
# 198
int e = (((int)sizeof(signed char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 204
{ 
# 205
int e = (((int)sizeof(unsigned char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 211
{ 
# 212
int e = (((int)sizeof(signed char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 218
{ 
# 219
int e = (((int)sizeof(unsigned char)) * 8); 
# 221
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 225
{ 
# 226
int e = (((int)sizeof(short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 232
{ 
# 233
int e = (((int)sizeof(unsigned short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 239
{ 
# 240
int e = (((int)sizeof(short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 246
{ 
# 247
int e = (((int)sizeof(unsigned short)) * 8); 
# 249
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 253
{ 
# 254
int e = (((int)sizeof(short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 260
{ 
# 261
int e = (((int)sizeof(unsigned short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 267
{ 
# 268
int e = (((int)sizeof(short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 274
{ 
# 275
int e = (((int)sizeof(unsigned short)) * 8); 
# 277
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 281
{ 
# 282
int e = (((int)sizeof(int)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 288
{ 
# 289
int e = (((int)sizeof(unsigned)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 295
{ 
# 296
int e = (((int)sizeof(int)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 302
{ 
# 303
int e = (((int)sizeof(unsigned)) * 8); 
# 305
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 309
{ 
# 310
int e = (((int)sizeof(int)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 316
{ 
# 317
int e = (((int)sizeof(unsigned)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 323
{ 
# 324
int e = (((int)sizeof(int)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 327
} 
# 329
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 330
{ 
# 331
int e = (((int)sizeof(unsigned)) * 8); 
# 333
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 334
} 
# 396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 415
} 
# 417
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 418
{ 
# 419
int e = (((int)sizeof(float)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 422
} 
# 424
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 425
{ 
# 426
int e = (((int)sizeof(char)) * 8); 
# 428
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 429
} 
# 431
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 432
{ 
# 433
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 434
} 
# 437
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 438
{ 
# 439
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 440
} 
# 442
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 443
{ 
# 444
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 445
} 
# 447
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 448
{ 
# 449
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 450
} 
# 453
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 454
{ 
# 455
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 456
} 
# 458
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 459
{ 
# 460
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 461
} 
# 463
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 464
{ 
# 465
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 466
} 
# 469
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 470
{ 
# 471
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 472
} 
# 474
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 475
{ 
# 476
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 477
} 
# 479
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 480
{ 
# 481
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 482
} 
# 485
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 486
{ 
# 487
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 488
} 
# 490
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 491
{ 
# 492
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 493
} 
# 495
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 496
{ 
# 497
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 498
} 
# 501
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 502
{ 
# 503
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 504
} 
# 507
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 508
{ 
# 509
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 510
} 
# 513
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 514
{ 
# 515
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 516
} 
# 519
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 520
{ 
# 521
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 522
} 
# 525
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 526
{ 
# 527
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 528
} 
# 531
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 532
{ 
# 533
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 534
} 
# 537
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 538
{ 
# 539
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 540
} 
# 543
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 544
{ 
# 545
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 546
} 
# 549
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 550
{ 
# 551
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 552
} 
# 555
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 556
{ 
# 557
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 558
} 
# 561
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 562
{ 
# 563
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 564
} 
# 567
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 568
{ 
# 569
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 570
} 
# 573
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 574
{ 
# 575
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 576
} 
# 579
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 580
{ 
# 581
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 582
} 
# 585
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 586
{ 
# 587
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 588
} 
# 79 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, size_t __n) noexcept(true)
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) noexcept(true)
# 56
 __attribute((__nonnull__(1, 2))); 
# 61
extern void *memset(void * __s, int __c, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 80 "/usr/include/string.h" 3
extern int __memcmpeq(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 81
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 85
extern "C++" {
# 87
extern void *memchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 88
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89
extern const void *memchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 90
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105 "/usr/include/string.h" 3
}
# 115 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern "C++" const void *rawmemchr(const void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 126
extern "C++" void *memrchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 127
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 129
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 130
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 141 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 142
 __attribute((__nonnull__(1, 2))); 
# 144
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 146
 __attribute((__nonnull__(1, 2))); 
# 149
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 150
 __attribute((__nonnull__(1, 2))); 
# 152
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 153
 __attribute((__nonnull__(1, 2))); 
# 156
extern int strcmp(const char * __s1, const char * __s2) noexcept(true)
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 159
extern int strncmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 160
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 163
extern int strcoll(const char * __s1, const char * __s2) noexcept(true)
# 164
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 166
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 168
 __attribute((__nonnull__(2))); 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
}; 
# 41
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 175 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) noexcept(true)
# 176
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 179
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) noexcept(true)
# 180
 __attribute((__nonnull__(2, 4))); 
# 187
extern char *strdup(const char * __s) noexcept(true)
# 188
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 195
extern char *strndup(const char * __string, size_t __n) noexcept(true)
# 196
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
extern "C++" {
# 226
extern char *strchr(char * __s, int __c) noexcept(true) __asm__("strchr")
# 227
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 228
extern const char *strchr(const char * __s, int __c) noexcept(true) __asm__("strchr")
# 229
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244 "/usr/include/string.h" 3
}
# 251
extern "C++" {
# 253
extern char *strrchr(char * __s, int __c) noexcept(true) __asm__("strrchr")
# 254
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 255
extern const char *strrchr(const char * __s, int __c) noexcept(true) __asm__("strrchr")
# 256
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 271 "/usr/include/string.h" 3
}
# 281 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 282
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 283
extern "C++" const char *strchrnul(const char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 293 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) noexcept(true)
# 294
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
extern size_t strspn(const char * __s, const char * __accept) noexcept(true)
# 298
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301
extern "C++" {
# 303
extern char *strpbrk(char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 304
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 305
extern const char *strpbrk(const char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 306
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 321 "/usr/include/string.h" 3
}
# 328
extern "C++" {
# 330
extern char *strstr(char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 331
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 332
extern const char *strstr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 333
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 348 "/usr/include/string.h" 3
}
# 356
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) noexcept(true)
# 357
 __attribute((__nonnull__(2))); 
# 361
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 364
 __attribute((__nonnull__(2, 3))); 
# 366
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 368
 __attribute((__nonnull__(2, 3))); 
# 374
extern "C++" char *strcasestr(char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 375
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 376
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 378
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 389 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) noexcept(true)
# 391
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 397
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 399
 __attribute((__nonnull__(1, 2))); 
# 400
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 402
 __attribute((__nonnull__(1, 2))); 
# 407
extern size_t strlen(const char * __s) noexcept(true)
# 408
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern size_t strnlen(const char * __string, size_t __maxlen) noexcept(true)
# 414
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 419
extern char *strerror(int __errnum) noexcept(true); 
# 444 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) noexcept(true)
# 445
 __attribute((__nonnull__(2))); 
# 450
extern const char *strerrordesc_np(int __err) noexcept(true); 
# 452
extern const char *strerrorname_np(int __err) noexcept(true); 
# 458
extern char *strerror_l(int __errnum, locale_t __l) noexcept(true); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, size_t __n) noexcept(true)
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) noexcept(true) __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) noexcept(true) __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) noexcept(true) __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) noexcept(true) __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) noexcept(true) __attribute((const)); 
# 110
extern int ffsl(long __l) noexcept(true) __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) noexcept(true)
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) noexcept(true)
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) noexcept(true)
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) noexcept(true)
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 466 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 471
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) noexcept(true)
# 473
 __attribute((__nonnull__(1, 2))); 
# 478
extern char *strsignal(int __sig) noexcept(true); 
# 482
extern const char *sigabbrev_np(int __sig) noexcept(true); 
# 485
extern const char *sigdescr_np(int __sig) noexcept(true); 
# 489
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 490
 __attribute((__nonnull__(1, 2))); 
# 491
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 492
 __attribute((__nonnull__(1, 2))); 
# 496
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 498
 __attribute((__nonnull__(1, 2))); 
# 499
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 501
 __attribute((__nonnull__(1, 2))); 
# 506
extern int strverscmp(const char * __s1, const char * __s2) noexcept(true)
# 507
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 510
extern char *strfry(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 513
extern void *memfrob(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 522
extern "C++" char *basename(char * __filename) noexcept(true) __asm__("basename")
# 523
 __attribute((__nonnull__(1))); 
# 524
extern "C++" const char *basename(const char * __filename) noexcept(true) __asm__("basename")
# 525
 __attribute((__nonnull__(1))); 
# 539 "/usr/include/string.h" 3
}
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 163
typedef long __suseconds64_t; 
# 165
typedef int __daddr_t; 
# 166
typedef int __key_t; 
# 169
typedef int __clockid_t; 
# 172
typedef void *__timer_t; 
# 175
typedef long __blksize_t; 
# 180
typedef long __blkcnt_t; 
# 181
typedef long __blkcnt64_t; 
# 184
typedef unsigned long __fsblkcnt_t; 
# 185
typedef unsigned long __fsblkcnt64_t; 
# 188
typedef unsigned long __fsfilcnt_t; 
# 189
typedef unsigned long __fsfilcnt64_t; 
# 192
typedef long __fsword_t; 
# 194
typedef long __ssize_t; 
# 197
typedef long __syscall_slong_t; 
# 199
typedef unsigned long __syscall_ulong_t; 
# 203
typedef __off64_t __loff_t; 
# 204
typedef char *__caddr_t; 
# 207
typedef long __intptr_t; 
# 210
typedef unsigned __socklen_t; 
# 215
typedef int __sig_atomic_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 14
__time_t tv_sec; 
# 15
__suseconds_t tv_usec; 
# 17
}; 
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
unsigned modes; 
# 59
__syscall_slong_t offset; 
# 60
__syscall_slong_t freq; 
# 61
__syscall_slong_t maxerror; 
# 62
__syscall_slong_t esterror; 
# 63
int status; 
# 64
__syscall_slong_t constant; 
# 65
__syscall_slong_t precision; 
# 66
__syscall_slong_t tolerance; 
# 67
timeval time; 
# 68
__syscall_slong_t tick; 
# 69
__syscall_slong_t ppsfreq; 
# 70
__syscall_slong_t jitter; 
# 71
int shift; 
# 72
__syscall_slong_t stabil; 
# 73
__syscall_slong_t jitcnt; 
# 74
__syscall_slong_t calcnt; 
# 75
__syscall_slong_t errcnt; 
# 76
__syscall_slong_t stbcnt; 
# 78
int tai; 
# 81
int:32; int:32; int:32; int:32; 
# 82
int:32; int:32; int:32; int:32; 
# 83
int:32; int:32; int:32; 
# 85
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) noexcept(true); 
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 16
__time_t tv_sec; 
# 21
__syscall_slong_t tv_nsec; 
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 54
typedef __pid_t pid_t; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() noexcept(true); 
# 76
extern time_t time(time_t * __timer) noexcept(true); 
# 79
extern double difftime(time_t __time1, time_t __time0) noexcept(true)
# 80
 __attribute((const)); 
# 83
extern time_t mktime(tm * __tp) noexcept(true); 
# 100 "/usr/include/time.h" 3
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 107
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) noexcept(true); 
# 116
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 123
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) noexcept(true); 
# 132
extern tm *gmtime(const time_t * __timer) noexcept(true); 
# 136
extern tm *localtime(const time_t * __timer) noexcept(true); 
# 154 "/usr/include/time.h" 3
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 159
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 179 "/usr/include/time.h" 3
extern char *asctime(const tm * __tp) noexcept(true); 
# 183
extern char *ctime(const time_t * __timer) noexcept(true); 
# 197 "/usr/include/time.h" 3
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) noexcept(true); 
# 202
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) noexcept(true); 
# 217 "/usr/include/time.h" 3
extern char *__tzname[2]; 
# 218
extern int __daylight; 
# 219
extern long __timezone; 
# 224
extern char *tzname[2]; 
# 228
extern void tzset() noexcept(true); 
# 232
extern int daylight; 
# 233
extern long timezone; 
# 249 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) noexcept(true); 
# 251
extern time_t timelocal(tm * __tp) noexcept(true); 
# 262 "/usr/include/time.h" 3
extern int dysize(int __year) noexcept(true) __attribute((const)); 
# 272 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 276
extern int clock_getres(clockid_t __clock_id, timespec * __res) noexcept(true); 
# 279
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) noexcept(true); 
# 282
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) noexcept(true); 
# 311 "/usr/include/time.h" 3
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 326 "/usr/include/time.h" 3
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) noexcept(true); 
# 331
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) noexcept(true); 
# 336
extern int timer_delete(timer_t __timerid) noexcept(true); 
# 340
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) noexcept(true); 
# 345
extern int timer_gettime(timer_t __timerid, itimerspec * __value) noexcept(true); 
# 364 "/usr/include/time.h" 3
extern int timer_getoverrun(timer_t __timerid) noexcept(true); 
# 371
extern int timespec_get(timespec * __ts, int __base) noexcept(true)
# 372
 __attribute((__nonnull__(1))); 
# 387 "/usr/include/time.h" 3
extern int timespec_getres(timespec * __ts, int __base) noexcept(true); 
# 413 "/usr/include/time.h" 3
extern int getdate_err; 
# 422 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 436 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 440
}
# 88 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() noexcept(true); 
# 96 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memset(void *, int, size_t) noexcept(true); 
# 97 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, size_t) noexcept(true); 
# 99 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/common_functions.h"
}
# 115 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 213 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int abs(int a) noexcept(true); 
# 221 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long labs(long a) noexcept(true); 
# 229 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llabs(long long a) noexcept(true); 
# 279 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fabs(double x) noexcept(true); 
# 320 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fabsf(float x) noexcept(true); 
# 330 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 337
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 344
extern inline long long llmin(const long long a, const long long b); 
# 351
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fminf(float x, float y) noexcept(true); 
# 392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmin(double x, double y) noexcept(true); 
# 405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 413
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 420
extern inline long long llmax(const long long a, const long long b); 
# 427
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 448 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaxf(float x, float y) noexcept(true); 
# 468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmax(double, double) noexcept(true); 
# 512 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sin(double x) noexcept(true); 
# 545 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cos(double x) noexcept(true); 
# 564 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) noexcept(true); 
# 580 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) noexcept(true); 
# 625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tan(double x) noexcept(true); 
# 694 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sqrt(double x) noexcept(true); 
# 766 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 836 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 892 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log2(double x) noexcept(true); 
# 917 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp2(double x) noexcept(true); 
# 942 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp2f(float x) noexcept(true); 
# 969 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp10(double x) noexcept(true); 
# 992 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp10f(float x) noexcept(true); 
# 1038 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double expm1(double x) noexcept(true); 
# 1083 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expm1f(float x) noexcept(true); 
# 1139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log2f(float x) noexcept(true); 
# 1193 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log10(double x) noexcept(true); 
# 1264 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log(double x) noexcept(true); 
# 1367 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log1p(double x) noexcept(true); 
# 1473 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log1pf(float x) noexcept(true); 
# 1537 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double floor(double x) noexcept(true); 
# 1576 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp(double x) noexcept(true); 
# 1607 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cosh(double x) noexcept(true); 
# 1657 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinh(double x) noexcept(true); 
# 1687 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tanh(double x) noexcept(true); 
# 1722 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acosh(double x) noexcept(true); 
# 1760 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acoshf(float x) noexcept(true); 
# 1813 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asinh(double x) noexcept(true); 
# 1865 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinhf(float x) noexcept(true); 
# 1919 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atanh(double x) noexcept(true); 
# 1973 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanhf(float x) noexcept(true); 
# 2032 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ldexp(double x, int exp) noexcept(true); 
# 2088 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) noexcept(true); 
# 2140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double logb(double x) noexcept(true); 
# 2195 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logbf(float x) noexcept(true); 
# 2226 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogb(double x) noexcept(true); 
# 2257 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogbf(float x) noexcept(true); 
# 2333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbn(double x, int n) noexcept(true); 
# 2409 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalbnf(float x, int n) noexcept(true); 
# 2485 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbln(double x, long n) noexcept(true); 
# 2561 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalblnf(float x, long n) noexcept(true); 
# 2639 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) noexcept(true); 
# 2714 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) noexcept(true); 
# 2728 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double round(double x) noexcept(true); 
# 2745 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float roundf(float x) noexcept(true); 
# 2763 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lround(double x) noexcept(true); 
# 2781 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lroundf(float x) noexcept(true); 
# 2799 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llround(double x) noexcept(true); 
# 2817 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llroundf(float x) noexcept(true); 
# 2869 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rintf(float x) noexcept(true); 
# 2886 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrint(double x) noexcept(true); 
# 2903 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrintf(float x) noexcept(true); 
# 2920 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrint(double x) noexcept(true); 
# 2937 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrintf(float x) noexcept(true); 
# 2990 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nearbyint(double x) noexcept(true); 
# 3043 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nearbyintf(float x) noexcept(true); 
# 3105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ceil(double x) noexcept(true); 
# 3117 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double trunc(double x) noexcept(true); 
# 3132 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float truncf(float x) noexcept(true); 
# 3158 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fdim(double x, double y) noexcept(true); 
# 3184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fdimf(float x, float y) noexcept(true); 
# 3220 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan2(double y, double x) noexcept(true); 
# 3251 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan(double x) noexcept(true); 
# 3274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acos(double x) noexcept(true); 
# 3306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asin(double x) noexcept(true); 
# 3352 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double hypot(double x, double y) noexcept(true); 
# 3450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float hypotf(float x, float y) noexcept(true); 
# 4182 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cbrt(double x) noexcept(true); 
# 4268 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cbrtf(float x) noexcept(true); 
# 4323 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 4373 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 4433 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinpi(double x); 
# 4493 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinpif(float x); 
# 4545 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cospi(double x); 
# 4597 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cospif(float x); 
# 4627 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 4657 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 4990 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double pow(double x, double y) noexcept(true); 
# 5046 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double modf(double x, double * iptr) noexcept(true); 
# 5105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmod(double x, double y) noexcept(true); 
# 5191 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remainder(double x, double y) noexcept(true); 
# 5281 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remainderf(float x, float y) noexcept(true); 
# 5335 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) noexcept(true); 
# 5389 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) noexcept(true); 
# 5430 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j0(double x) noexcept(true); 
# 5472 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j0f(float x) noexcept(true); 
# 5541 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j1(double x) noexcept(true); 
# 5610 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j1f(float x) noexcept(true); 
# 5653 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double jn(int n, double x) noexcept(true); 
# 5696 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float jnf(int n, float x) noexcept(true); 
# 5748 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y0(double x) noexcept(true); 
# 5800 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y0f(float x) noexcept(true); 
# 5852 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y1(double x) noexcept(true); 
# 5904 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y1f(float x) noexcept(true); 
# 5957 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double yn(int n, double x) noexcept(true); 
# 6010 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ynf(int n, float x) noexcept(true); 
# 6199 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erf(double x) noexcept(true); 
# 6281 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erff(float x) noexcept(true); 
# 6345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfinv(double y); 
# 6402 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfinvf(float y); 
# 6441 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfc(double x) noexcept(true); 
# 6479 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcf(float x) noexcept(true); 
# 6606 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double lgamma(double x) noexcept(true); 
# 6669 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcinv(double y); 
# 6725 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcinvf(float y); 
# 6783 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdfinv(double y); 
# 6841 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdfinvf(float y); 
# 6884 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdf(double y); 
# 6927 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdff(float y); 
# 7002 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcx(double x); 
# 7077 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 7210 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float lgammaf(float x) noexcept(true); 
# 7319 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tgamma(double x) noexcept(true); 
# 7428 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tgammaf(float x) noexcept(true); 
# 7441 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double copysign(double x, double y) noexcept(true); 
# 7454 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float copysignf(float x, float y) noexcept(true); 
# 7473 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nextafter(double x, double y) noexcept(true); 
# 7492 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nextafterf(float x, float y) noexcept(true); 
# 7508 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nan(const char * tagp) noexcept(true); 
# 7524 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nanf(const char * tagp) noexcept(true); 
# 7531 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinff(float) noexcept(true); 
# 7532 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanf(float) noexcept(true); 
# 7542 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finite(double) noexcept(true); 
# 7543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitef(float) noexcept(true); 
# 7544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbit(double) noexcept(true); 
# 7545 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnan(double) noexcept(true); 
# 7546 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinf(double) noexcept(true); 
# 7549 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitf(float) noexcept(true); 
# 7708 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fma(double x, double y, double z) noexcept(true); 
# 7866 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) noexcept(true); 
# 7877 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitl(long double) noexcept(true); 
# 7883 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitel(long double) noexcept(true); 
# 7884 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinfl(long double) noexcept(true); 
# 7885 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanl(long double) noexcept(true); 
# 7935 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acosf(float x) noexcept(true); 
# 7975 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinf(float x) noexcept(true); 
# 8015 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanf(float x) noexcept(true); 
# 8048 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atan2f(float y, float x) noexcept(true); 
# 8072 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cosf(float x) noexcept(true); 
# 8114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinf(float x) noexcept(true); 
# 8156 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanf(float x) noexcept(true); 
# 8187 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float coshf(float x) noexcept(true); 
# 8237 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinhf(float x) noexcept(true); 
# 8267 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanhf(float x) noexcept(true); 
# 8319 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logf(float x) noexcept(true); 
# 8369 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expf(float x) noexcept(true); 
# 8421 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log10f(float x) noexcept(true); 
# 8476 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float modff(float x, float * iptr) noexcept(true); 
# 8806 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float powf(float x, float y) noexcept(true); 
# 8875 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sqrtf(float x) noexcept(true); 
# 8934 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ceilf(float x) noexcept(true); 
# 8995 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float floorf(float x) noexcept(true); 
# 9053 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmodf(float x, float y) noexcept(true); 
# 9068 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std { 
# 231
typedef unsigned long size_t; 
# 232
typedef long ptrdiff_t; 
# 235
typedef __decltype((nullptr)) nullptr_t; 
# 237
}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std { 
# 253
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 254
}
# 255
namespace __gnu_cxx { 
# 257
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 258
}
# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 176
template<> struct __is_integer< char16_t>  { 
# 178
enum { __value = 1}; 
# 179
typedef __true_type __type; 
# 180
}; 
# 183
template<> struct __is_integer< char32_t>  { 
# 185
enum { __value = 1}; 
# 186
typedef __true_type __type; 
# 187
}; 
# 191
template<> struct __is_integer< short>  { 
# 193
enum { __value = 1}; 
# 194
typedef __true_type __type; 
# 195
}; 
# 198
template<> struct __is_integer< unsigned short>  { 
# 200
enum { __value = 1}; 
# 201
typedef __true_type __type; 
# 202
}; 
# 205
template<> struct __is_integer< int>  { 
# 207
enum { __value = 1}; 
# 208
typedef __true_type __type; 
# 209
}; 
# 212
template<> struct __is_integer< unsigned>  { 
# 214
enum { __value = 1}; 
# 215
typedef __true_type __type; 
# 216
}; 
# 219
template<> struct __is_integer< long>  { 
# 221
enum { __value = 1}; 
# 222
typedef __true_type __type; 
# 223
}; 
# 226
template<> struct __is_integer< unsigned long>  { 
# 228
enum { __value = 1}; 
# 229
typedef __true_type __type; 
# 230
}; 
# 233
template<> struct __is_integer< long long>  { 
# 235
enum { __value = 1}; 
# 236
typedef __true_type __type; 
# 237
}; 
# 240
template<> struct __is_integer< unsigned long long>  { 
# 242
enum { __value = 1}; 
# 243
typedef __true_type __type; 
# 244
}; 
# 278 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 279
struct __is_floating { 
# 281
enum { __value}; 
# 282
typedef __false_type __type; 
# 283
}; 
# 287
template<> struct __is_floating< float>  { 
# 289
enum { __value = 1}; 
# 290
typedef __true_type __type; 
# 291
}; 
# 294
template<> struct __is_floating< double>  { 
# 296
enum { __value = 1}; 
# 297
typedef __true_type __type; 
# 298
}; 
# 301
template<> struct __is_floating< long double>  { 
# 303
enum { __value = 1}; 
# 304
typedef __true_type __type; 
# 305
}; 
# 310
template< class _Tp> 
# 311
struct __is_pointer { 
# 313
enum { __value}; 
# 314
typedef __false_type __type; 
# 315
}; 
# 317
template< class _Tp> 
# 318
struct __is_pointer< _Tp *>  { 
# 320
enum { __value = 1}; 
# 321
typedef __true_type __type; 
# 322
}; 
# 327
template< class _Tp> 
# 328
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 330
}; 
# 335
template< class _Tp> 
# 336
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 338
}; 
# 343
template< class _Tp> 
# 344
struct __is_char { 
# 346
enum { __value}; 
# 347
typedef __false_type __type; 
# 348
}; 
# 351
template<> struct __is_char< char>  { 
# 353
enum { __value = 1}; 
# 354
typedef __true_type __type; 
# 355
}; 
# 359
template<> struct __is_char< wchar_t>  { 
# 361
enum { __value = 1}; 
# 362
typedef __true_type __type; 
# 363
}; 
# 366
template< class _Tp> 
# 367
struct __is_byte { 
# 369
enum { __value}; 
# 370
typedef __false_type __type; 
# 371
}; 
# 374
template<> struct __is_byte< char>  { 
# 376
enum { __value = 1}; 
# 377
typedef __true_type __type; 
# 378
}; 
# 381
template<> struct __is_byte< signed char>  { 
# 383
enum { __value = 1}; 
# 384
typedef __true_type __type; 
# 385
}; 
# 388
template<> struct __is_byte< unsigned char>  { 
# 390
enum { __value = 1}; 
# 391
typedef __true_type __type; 
# 392
}; 
# 397
template< class _Tp> 
# 398
struct __is_move_iterator { 
# 400
enum { __value}; 
# 401
typedef __false_type __type; 
# 402
}; 
# 406
template< class _Iterator> inline _Iterator 
# 408
__miter_base(_Iterator __it) 
# 409
{ return __it; } 
# 412
}
# 413
}
# 37 "/usr/include/c++/7/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 167
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 168
struct __promote { 
# 169
typedef double __type; }; 
# 174
template< class _Tp> 
# 175
struct __promote< _Tp, false>  { 
# 176
}; 
# 179
template<> struct __promote< long double>  { 
# 180
typedef long double __type; }; 
# 183
template<> struct __promote< double>  { 
# 184
typedef double __type; }; 
# 187
template<> struct __promote< float>  { 
# 188
typedef float __type; }; 
# 190
template< class _Tp, class _Up, class 
# 191
_Tp2 = typename __promote< _Tp> ::__type, class 
# 192
_Up2 = typename __promote< _Up> ::__type> 
# 193
struct __promote_2 { 
# 195
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 196
}; 
# 198
template< class _Tp, class _Up, class _Vp, class 
# 199
_Tp2 = typename __promote< _Tp> ::__type, class 
# 200
_Up2 = typename __promote< _Up> ::__type, class 
# 201
_Vp2 = typename __promote< _Vp> ::__type> 
# 202
struct __promote_3 { 
# 204
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 205
}; 
# 207
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 208
_Tp2 = typename __promote< _Tp> ::__type, class 
# 209
_Up2 = typename __promote< _Up> ::__type, class 
# 210
_Vp2 = typename __promote< _Vp> ::__type, class 
# 211
_Wp2 = typename __promote< _Wp> ::__type> 
# 212
struct __promote_4 { 
# 214
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 215
}; 
# 218
}
# 219
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 163 "/usr/include/math.h" 3
typedef float float_t; 
# 164
typedef double double_t; 
# 252 "/usr/include/math.h" 3
enum { 
# 253
FP_INT_UPWARD, 
# 256
FP_INT_DOWNWARD, 
# 259
FP_INT_TOWARDZERO, 
# 262
FP_INT_TONEARESTFROMZERO, 
# 265
FP_INT_TONEAREST
# 268
}; 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbit(double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinf(double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finite(double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnan(double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsig(double __x, double __y) noexcept(true); 
# 44
extern int __issignaling(double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) noexcept(true); extern double __acos(double __x) noexcept(true); 
# 55
extern double asin(double __x) noexcept(true); extern double __asin(double __x) noexcept(true); 
# 57
extern double atan(double __x) noexcept(true); extern double __atan(double __x) noexcept(true); 
# 59
extern double atan2(double __y, double __x) noexcept(true); extern double __atan2(double __y, double __x) noexcept(true); 
# 62
extern double cos(double __x) noexcept(true); extern double __cos(double __x) noexcept(true); 
# 64
extern double sin(double __x) noexcept(true); extern double __sin(double __x) noexcept(true); 
# 66
extern double tan(double __x) noexcept(true); extern double __tan(double __x) noexcept(true); 
# 71
extern double cosh(double __x) noexcept(true); extern double __cosh(double __x) noexcept(true); 
# 73
extern double sinh(double __x) noexcept(true); extern double __sinh(double __x) noexcept(true); 
# 75
extern double tanh(double __x) noexcept(true); extern double __tanh(double __x) noexcept(true); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) noexcept(true); extern void __sincos(double __x, double * __sinx, double * __cosx) noexcept(true); 
# 85
extern double acosh(double __x) noexcept(true); extern double __acosh(double __x) noexcept(true); 
# 87
extern double asinh(double __x) noexcept(true); extern double __asinh(double __x) noexcept(true); 
# 89
extern double atanh(double __x) noexcept(true); extern double __atanh(double __x) noexcept(true); 
# 95
extern double exp(double __x) noexcept(true); extern double __exp(double __x) noexcept(true); 
# 98
extern double frexp(double __x, int * __exponent) noexcept(true); extern double __frexp(double __x, int * __exponent) noexcept(true); 
# 101
extern double ldexp(double __x, int __exponent) noexcept(true); extern double __ldexp(double __x, int __exponent) noexcept(true); 
# 104
extern double log(double __x) noexcept(true); extern double __log(double __x) noexcept(true); 
# 107
extern double log10(double __x) noexcept(true); extern double __log10(double __x) noexcept(true); 
# 110
extern double modf(double __x, double * __iptr) noexcept(true); extern double __modf(double __x, double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) noexcept(true); extern double __exp10(double __x) noexcept(true); 
# 119
extern double expm1(double __x) noexcept(true); extern double __expm1(double __x) noexcept(true); 
# 122
extern double log1p(double __x) noexcept(true); extern double __log1p(double __x) noexcept(true); 
# 125
extern double logb(double __x) noexcept(true); extern double __logb(double __x) noexcept(true); 
# 130
extern double exp2(double __x) noexcept(true); extern double __exp2(double __x) noexcept(true); 
# 133
extern double log2(double __x) noexcept(true); extern double __log2(double __x) noexcept(true); 
# 140
extern double pow(double __x, double __y) noexcept(true); extern double __pow(double __x, double __y) noexcept(true); 
# 143
extern double sqrt(double __x) noexcept(true); extern double __sqrt(double __x) noexcept(true); 
# 147
extern double hypot(double __x, double __y) noexcept(true); extern double __hypot(double __x, double __y) noexcept(true); 
# 152
extern double cbrt(double __x) noexcept(true); extern double __cbrt(double __x) noexcept(true); 
# 159
extern double ceil(double __x) noexcept(true) __attribute((const)); extern double __ceil(double __x) noexcept(true) __attribute((const)); 
# 162
extern double fabs(double __x) noexcept(true) __attribute((const)); extern double __fabs(double __x) noexcept(true) __attribute((const)); 
# 165
extern double floor(double __x) noexcept(true) __attribute((const)); extern double __floor(double __x) noexcept(true) __attribute((const)); 
# 168
extern double fmod(double __x, double __y) noexcept(true); extern double __fmod(double __x, double __y) noexcept(true); 
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern double drem(double __x, double __y) noexcept(true); extern double __drem(double __x, double __y) noexcept(true); 
# 191
extern double significand(double __x) noexcept(true); extern double __significand(double __x) noexcept(true); 
# 198
extern double copysign(double __x, double __y) noexcept(true) __attribute((const)); extern double __copysign(double __x, double __y) noexcept(true) __attribute((const)); 
# 203
extern double nan(const char * __tagb) noexcept(true); extern double __nan(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) noexcept(true); extern double __j0(double) noexcept(true); 
# 221
extern double j1(double) noexcept(true); extern double __j1(double) noexcept(true); 
# 222
extern double jn(int, double) noexcept(true); extern double __jn(int, double) noexcept(true); 
# 223
extern double y0(double) noexcept(true); extern double __y0(double) noexcept(true); 
# 224
extern double y1(double) noexcept(true); extern double __y1(double) noexcept(true); 
# 225
extern double yn(int, double) noexcept(true); extern double __yn(int, double) noexcept(true); 
# 231
extern double erf(double) noexcept(true); extern double __erf(double) noexcept(true); 
# 232
extern double erfc(double) noexcept(true); extern double __erfc(double) noexcept(true); 
# 233
extern double lgamma(double) noexcept(true); extern double __lgamma(double) noexcept(true); 
# 238
extern double tgamma(double) noexcept(true); extern double __tgamma(double) noexcept(true); 
# 244
extern double gamma(double) noexcept(true); extern double __gamma(double) noexcept(true); 
# 252
extern double lgamma_r(double, int * __signgamp) noexcept(true); extern double __lgamma_r(double, int * __signgamp) noexcept(true); 
# 259
extern double rint(double __x) noexcept(true); extern double __rint(double __x) noexcept(true); 
# 262
extern double nextafter(double __x, double __y) noexcept(true); extern double __nextafter(double __x, double __y) noexcept(true); 
# 264
extern double nexttoward(double __x, long double __y) noexcept(true); extern double __nexttoward(double __x, long double __y) noexcept(true); 
# 269
extern double nextdown(double __x) noexcept(true); extern double __nextdown(double __x) noexcept(true); 
# 271
extern double nextup(double __x) noexcept(true); extern double __nextup(double __x) noexcept(true); 
# 275
extern double remainder(double __x, double __y) noexcept(true); extern double __remainder(double __x, double __y) noexcept(true); 
# 279
extern double scalbn(double __x, int __n) noexcept(true); extern double __scalbn(double __x, int __n) noexcept(true); 
# 283
extern int ilogb(double __x) noexcept(true); extern int __ilogb(double __x) noexcept(true); 
# 288
extern long llogb(double __x) noexcept(true); extern long __llogb(double __x) noexcept(true); 
# 293
extern double scalbln(double __x, long __n) noexcept(true); extern double __scalbln(double __x, long __n) noexcept(true); 
# 297
extern double nearbyint(double __x) noexcept(true); extern double __nearbyint(double __x) noexcept(true); 
# 301
extern double round(double __x) noexcept(true) __attribute((const)); extern double __round(double __x) noexcept(true) __attribute((const)); 
# 305
extern double trunc(double __x) noexcept(true) __attribute((const)); extern double __trunc(double __x) noexcept(true) __attribute((const)); 
# 310
extern double remquo(double __x, double __y, int * __quo) noexcept(true); extern double __remquo(double __x, double __y, int * __quo) noexcept(true); 
# 317
extern long lrint(double __x) noexcept(true); extern long __lrint(double __x) noexcept(true); 
# 319
__extension__ extern long long llrint(double __x) noexcept(true); extern long long __llrint(double __x) noexcept(true); 
# 323
extern long lround(double __x) noexcept(true); extern long __lround(double __x) noexcept(true); 
# 325
__extension__ extern long long llround(double __x) noexcept(true); extern long long __llround(double __x) noexcept(true); 
# 329
extern double fdim(double __x, double __y) noexcept(true); extern double __fdim(double __x, double __y) noexcept(true); 
# 333
extern double fmax(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmax(double __x, double __y) noexcept(true) __attribute((const)); 
# 336
extern double fmin(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmin(double __x, double __y) noexcept(true) __attribute((const)); 
# 340
extern double fma(double __x, double __y, double __z) noexcept(true); extern double __fma(double __x, double __y, double __z) noexcept(true); 
# 345
extern double roundeven(double __x) noexcept(true) __attribute((const)); extern double __roundeven(double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfp(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalize(double * __cx, const double * __x) noexcept(true); 
# 377
extern double fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 380
extern double fminmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 385
extern double fmaximum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum(double __x, double __y) noexcept(true) __attribute((const)); 
# 388
extern double fminimum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum(double __x, double __y) noexcept(true) __attribute((const)); 
# 391
extern double fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 394
extern double fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 397
extern double fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 400
extern double fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 403
extern double fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 406
extern double fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorder(const double * __x, const double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermag(const double * __x, const double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern double getpayload(const double * __x) noexcept(true); extern double __getpayload(const double * __x) noexcept(true); 
# 424
extern int setpayload(double * __x, double __payload) noexcept(true); 
# 427
extern int setpayloadsig(double * __x, double __payload) noexcept(true); 
# 435
extern double scalb(double __x, double __n) noexcept(true); extern double __scalb(double __x, double __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf(float __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff(float __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef(float __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf(float __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf(float __x, float __y) noexcept(true); 
# 44
extern int __issignalingf(float __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) noexcept(true); extern float __acosf(float __x) noexcept(true); 
# 55
extern float asinf(float __x) noexcept(true); extern float __asinf(float __x) noexcept(true); 
# 57
extern float atanf(float __x) noexcept(true); extern float __atanf(float __x) noexcept(true); 
# 59
extern float atan2f(float __y, float __x) noexcept(true); extern float __atan2f(float __y, float __x) noexcept(true); 
# 62
extern float cosf(float __x) noexcept(true); 
# 64
extern float sinf(float __x) noexcept(true); 
# 66
extern float tanf(float __x) noexcept(true); 
# 71
extern float coshf(float __x) noexcept(true); extern float __coshf(float __x) noexcept(true); 
# 73
extern float sinhf(float __x) noexcept(true); extern float __sinhf(float __x) noexcept(true); 
# 75
extern float tanhf(float __x) noexcept(true); extern float __tanhf(float __x) noexcept(true); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) noexcept(true); 
# 85
extern float acoshf(float __x) noexcept(true); extern float __acoshf(float __x) noexcept(true); 
# 87
extern float asinhf(float __x) noexcept(true); extern float __asinhf(float __x) noexcept(true); 
# 89
extern float atanhf(float __x) noexcept(true); extern float __atanhf(float __x) noexcept(true); 
# 95
extern float expf(float __x) noexcept(true); 
# 98
extern float frexpf(float __x, int * __exponent) noexcept(true); extern float __frexpf(float __x, int * __exponent) noexcept(true); 
# 101
extern float ldexpf(float __x, int __exponent) noexcept(true); extern float __ldexpf(float __x, int __exponent) noexcept(true); 
# 104
extern float logf(float __x) noexcept(true); 
# 107
extern float log10f(float __x) noexcept(true); 
# 110
extern float modff(float __x, float * __iptr) noexcept(true); extern float __modff(float __x, float * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) noexcept(true); 
# 119
extern float expm1f(float __x) noexcept(true); extern float __expm1f(float __x) noexcept(true); 
# 122
extern float log1pf(float __x) noexcept(true); extern float __log1pf(float __x) noexcept(true); 
# 125
extern float logbf(float __x) noexcept(true); extern float __logbf(float __x) noexcept(true); 
# 130
extern float exp2f(float __x) noexcept(true); extern float __exp2f(float __x) noexcept(true); 
# 133
extern float log2f(float __x) noexcept(true); 
# 140
extern float powf(float __x, float __y) noexcept(true); 
# 143
extern float sqrtf(float __x) noexcept(true); extern float __sqrtf(float __x) noexcept(true); 
# 147
extern float hypotf(float __x, float __y) noexcept(true); extern float __hypotf(float __x, float __y) noexcept(true); 
# 152
extern float cbrtf(float __x) noexcept(true); extern float __cbrtf(float __x) noexcept(true); 
# 159
extern float ceilf(float __x) noexcept(true) __attribute((const)); extern float __ceilf(float __x) noexcept(true) __attribute((const)); 
# 162
extern float fabsf(float __x) noexcept(true) __attribute((const)); extern float __fabsf(float __x) noexcept(true) __attribute((const)); 
# 165
extern float floorf(float __x) noexcept(true) __attribute((const)); extern float __floorf(float __x) noexcept(true) __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) noexcept(true); extern float __fmodf(float __x, float __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitef(float __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern float dremf(float __x, float __y) noexcept(true); extern float __dremf(float __x, float __y) noexcept(true); 
# 191
extern float significandf(float __x) noexcept(true); extern float __significandf(float __x) noexcept(true); 
# 198
extern float copysignf(float __x, float __y) noexcept(true) __attribute((const)); extern float __copysignf(float __x, float __y) noexcept(true) __attribute((const)); 
# 203
extern float nanf(const char * __tagb) noexcept(true); extern float __nanf(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern float j0f(float) noexcept(true); extern float __j0f(float) noexcept(true); 
# 221
extern float j1f(float) noexcept(true); extern float __j1f(float) noexcept(true); 
# 222
extern float jnf(int, float) noexcept(true); extern float __jnf(int, float) noexcept(true); 
# 223
extern float y0f(float) noexcept(true); extern float __y0f(float) noexcept(true); 
# 224
extern float y1f(float) noexcept(true); extern float __y1f(float) noexcept(true); 
# 225
extern float ynf(int, float) noexcept(true); extern float __ynf(int, float) noexcept(true); 
# 231
extern float erff(float) noexcept(true); extern float __erff(float) noexcept(true); 
# 232
extern float erfcf(float) noexcept(true); extern float __erfcf(float) noexcept(true); 
# 233
extern float lgammaf(float) noexcept(true); extern float __lgammaf(float) noexcept(true); 
# 238
extern float tgammaf(float) noexcept(true); extern float __tgammaf(float) noexcept(true); 
# 244
extern float gammaf(float) noexcept(true); extern float __gammaf(float) noexcept(true); 
# 252
extern float lgammaf_r(float, int * __signgamp) noexcept(true); extern float __lgammaf_r(float, int * __signgamp) noexcept(true); 
# 259
extern float rintf(float __x) noexcept(true); extern float __rintf(float __x) noexcept(true); 
# 262
extern float nextafterf(float __x, float __y) noexcept(true); extern float __nextafterf(float __x, float __y) noexcept(true); 
# 264
extern float nexttowardf(float __x, long double __y) noexcept(true); extern float __nexttowardf(float __x, long double __y) noexcept(true); 
# 269
extern float nextdownf(float __x) noexcept(true); extern float __nextdownf(float __x) noexcept(true); 
# 271
extern float nextupf(float __x) noexcept(true); extern float __nextupf(float __x) noexcept(true); 
# 275
extern float remainderf(float __x, float __y) noexcept(true); extern float __remainderf(float __x, float __y) noexcept(true); 
# 279
extern float scalbnf(float __x, int __n) noexcept(true); extern float __scalbnf(float __x, int __n) noexcept(true); 
# 283
extern int ilogbf(float __x) noexcept(true); extern int __ilogbf(float __x) noexcept(true); 
# 288
extern long llogbf(float __x) noexcept(true); extern long __llogbf(float __x) noexcept(true); 
# 293
extern float scalblnf(float __x, long __n) noexcept(true); extern float __scalblnf(float __x, long __n) noexcept(true); 
# 297
extern float nearbyintf(float __x) noexcept(true); extern float __nearbyintf(float __x) noexcept(true); 
# 301
extern float roundf(float __x) noexcept(true) __attribute((const)); extern float __roundf(float __x) noexcept(true) __attribute((const)); 
# 305
extern float truncf(float __x) noexcept(true) __attribute((const)); extern float __truncf(float __x) noexcept(true) __attribute((const)); 
# 310
extern float remquof(float __x, float __y, int * __quo) noexcept(true); extern float __remquof(float __x, float __y, int * __quo) noexcept(true); 
# 317
extern long lrintf(float __x) noexcept(true); extern long __lrintf(float __x) noexcept(true); 
# 319
__extension__ extern long long llrintf(float __x) noexcept(true); extern long long __llrintf(float __x) noexcept(true); 
# 323
extern long lroundf(float __x) noexcept(true); extern long __lroundf(float __x) noexcept(true); 
# 325
__extension__ extern long long llroundf(float __x) noexcept(true); extern long long __llroundf(float __x) noexcept(true); 
# 329
extern float fdimf(float __x, float __y) noexcept(true); extern float __fdimf(float __x, float __y) noexcept(true); 
# 333
extern float fmaxf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxf(float __x, float __y) noexcept(true) __attribute((const)); 
# 336
extern float fminf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminf(float __x, float __y) noexcept(true) __attribute((const)); 
# 340
extern float fmaf(float __x, float __y, float __z) noexcept(true); extern float __fmaf(float __x, float __y, float __z) noexcept(true); 
# 345
extern float roundevenf(float __x) noexcept(true) __attribute((const)); extern float __roundevenf(float __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef(float * __cx, const float * __x) noexcept(true); 
# 377
extern float fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 380
extern float fminmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 385
extern float fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 388
extern float fminimumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 391
extern float fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 394
extern float fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 397
extern float fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 400
extern float fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 403
extern float fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 406
extern float fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf(const float * __x, const float * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf(const float * __x, const float * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern float getpayloadf(const float * __x) noexcept(true); extern float __getpayloadf(const float * __x) noexcept(true); 
# 424
extern int setpayloadf(float * __x, float __payload) noexcept(true); 
# 427
extern int setpayloadsigf(float * __x, float __payload) noexcept(true); 
# 435
extern float scalbf(float __x, float __n) noexcept(true); extern float __scalbf(float __x, float __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitl(long double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinfl(long double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitel(long double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanl(long double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigl(long double __x, long double __y) noexcept(true); 
# 44
extern int __issignalingl(long double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) noexcept(true); extern long double __acosl(long double __x) noexcept(true); 
# 55
extern long double asinl(long double __x) noexcept(true); extern long double __asinl(long double __x) noexcept(true); 
# 57
extern long double atanl(long double __x) noexcept(true); extern long double __atanl(long double __x) noexcept(true); 
# 59
extern long double atan2l(long double __y, long double __x) noexcept(true); extern long double __atan2l(long double __y, long double __x) noexcept(true); 
# 62
extern long double cosl(long double __x) noexcept(true); extern long double __cosl(long double __x) noexcept(true); 
# 64
extern long double sinl(long double __x) noexcept(true); extern long double __sinl(long double __x) noexcept(true); 
# 66
extern long double tanl(long double __x) noexcept(true); extern long double __tanl(long double __x) noexcept(true); 
# 71
extern long double coshl(long double __x) noexcept(true); extern long double __coshl(long double __x) noexcept(true); 
# 73
extern long double sinhl(long double __x) noexcept(true); extern long double __sinhl(long double __x) noexcept(true); 
# 75
extern long double tanhl(long double __x) noexcept(true); extern long double __tanhl(long double __x) noexcept(true); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); 
# 85
extern long double acoshl(long double __x) noexcept(true); extern long double __acoshl(long double __x) noexcept(true); 
# 87
extern long double asinhl(long double __x) noexcept(true); extern long double __asinhl(long double __x) noexcept(true); 
# 89
extern long double atanhl(long double __x) noexcept(true); extern long double __atanhl(long double __x) noexcept(true); 
# 95
extern long double expl(long double __x) noexcept(true); extern long double __expl(long double __x) noexcept(true); 
# 98
extern long double frexpl(long double __x, int * __exponent) noexcept(true); extern long double __frexpl(long double __x, int * __exponent) noexcept(true); 
# 101
extern long double ldexpl(long double __x, int __exponent) noexcept(true); extern long double __ldexpl(long double __x, int __exponent) noexcept(true); 
# 104
extern long double logl(long double __x) noexcept(true); extern long double __logl(long double __x) noexcept(true); 
# 107
extern long double log10l(long double __x) noexcept(true); extern long double __log10l(long double __x) noexcept(true); 
# 110
extern long double modfl(long double __x, long double * __iptr) noexcept(true); extern long double __modfl(long double __x, long double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) noexcept(true); extern long double __exp10l(long double __x) noexcept(true); 
# 119
extern long double expm1l(long double __x) noexcept(true); extern long double __expm1l(long double __x) noexcept(true); 
# 122
extern long double log1pl(long double __x) noexcept(true); extern long double __log1pl(long double __x) noexcept(true); 
# 125
extern long double logbl(long double __x) noexcept(true); extern long double __logbl(long double __x) noexcept(true); 
# 130
extern long double exp2l(long double __x) noexcept(true); extern long double __exp2l(long double __x) noexcept(true); 
# 133
extern long double log2l(long double __x) noexcept(true); extern long double __log2l(long double __x) noexcept(true); 
# 140
extern long double powl(long double __x, long double __y) noexcept(true); extern long double __powl(long double __x, long double __y) noexcept(true); 
# 143
extern long double sqrtl(long double __x) noexcept(true); extern long double __sqrtl(long double __x) noexcept(true); 
# 147
extern long double hypotl(long double __x, long double __y) noexcept(true); extern long double __hypotl(long double __x, long double __y) noexcept(true); 
# 152
extern long double cbrtl(long double __x) noexcept(true); extern long double __cbrtl(long double __x) noexcept(true); 
# 159
extern long double ceill(long double __x) noexcept(true) __attribute((const)); extern long double __ceill(long double __x) noexcept(true) __attribute((const)); 
# 162
extern long double fabsl(long double __x) noexcept(true) __attribute((const)); extern long double __fabsl(long double __x) noexcept(true) __attribute((const)); 
# 165
extern long double floorl(long double __x) noexcept(true) __attribute((const)); extern long double __floorl(long double __x) noexcept(true) __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) noexcept(true); extern long double __fmodl(long double __x, long double __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitel(long double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern long double dreml(long double __x, long double __y) noexcept(true); extern long double __dreml(long double __x, long double __y) noexcept(true); 
# 191
extern long double significandl(long double __x) noexcept(true); extern long double __significandl(long double __x) noexcept(true); 
# 198
extern long double copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 203
extern long double nanl(const char * __tagb) noexcept(true); extern long double __nanl(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern long double j0l(long double) noexcept(true); extern long double __j0l(long double) noexcept(true); 
# 221
extern long double j1l(long double) noexcept(true); extern long double __j1l(long double) noexcept(true); 
# 222
extern long double jnl(int, long double) noexcept(true); extern long double __jnl(int, long double) noexcept(true); 
# 223
extern long double y0l(long double) noexcept(true); extern long double __y0l(long double) noexcept(true); 
# 224
extern long double y1l(long double) noexcept(true); extern long double __y1l(long double) noexcept(true); 
# 225
extern long double ynl(int, long double) noexcept(true); extern long double __ynl(int, long double) noexcept(true); 
# 231
extern long double erfl(long double) noexcept(true); extern long double __erfl(long double) noexcept(true); 
# 232
extern long double erfcl(long double) noexcept(true); extern long double __erfcl(long double) noexcept(true); 
# 233
extern long double lgammal(long double) noexcept(true); extern long double __lgammal(long double) noexcept(true); 
# 238
extern long double tgammal(long double) noexcept(true); extern long double __tgammal(long double) noexcept(true); 
# 244
extern long double gammal(long double) noexcept(true); extern long double __gammal(long double) noexcept(true); 
# 252
extern long double lgammal_r(long double, int * __signgamp) noexcept(true); extern long double __lgammal_r(long double, int * __signgamp) noexcept(true); 
# 259
extern long double rintl(long double __x) noexcept(true); extern long double __rintl(long double __x) noexcept(true); 
# 262
extern long double nextafterl(long double __x, long double __y) noexcept(true); extern long double __nextafterl(long double __x, long double __y) noexcept(true); 
# 264
extern long double nexttowardl(long double __x, long double __y) noexcept(true); extern long double __nexttowardl(long double __x, long double __y) noexcept(true); 
# 269
extern long double nextdownl(long double __x) noexcept(true); extern long double __nextdownl(long double __x) noexcept(true); 
# 271
extern long double nextupl(long double __x) noexcept(true); extern long double __nextupl(long double __x) noexcept(true); 
# 275
extern long double remainderl(long double __x, long double __y) noexcept(true); extern long double __remainderl(long double __x, long double __y) noexcept(true); 
# 279
extern long double scalbnl(long double __x, int __n) noexcept(true); extern long double __scalbnl(long double __x, int __n) noexcept(true); 
# 283
extern int ilogbl(long double __x) noexcept(true); extern int __ilogbl(long double __x) noexcept(true); 
# 288
extern long llogbl(long double __x) noexcept(true); extern long __llogbl(long double __x) noexcept(true); 
# 293
extern long double scalblnl(long double __x, long __n) noexcept(true); extern long double __scalblnl(long double __x, long __n) noexcept(true); 
# 297
extern long double nearbyintl(long double __x) noexcept(true); extern long double __nearbyintl(long double __x) noexcept(true); 
# 301
extern long double roundl(long double __x) noexcept(true) __attribute((const)); extern long double __roundl(long double __x) noexcept(true) __attribute((const)); 
# 305
extern long double truncl(long double __x) noexcept(true) __attribute((const)); extern long double __truncl(long double __x) noexcept(true) __attribute((const)); 
# 310
extern long double remquol(long double __x, long double __y, int * __quo) noexcept(true); extern long double __remquol(long double __x, long double __y, int * __quo) noexcept(true); 
# 317
extern long lrintl(long double __x) noexcept(true); extern long __lrintl(long double __x) noexcept(true); 
# 319
__extension__ extern long long llrintl(long double __x) noexcept(true); extern long long __llrintl(long double __x) noexcept(true); 
# 323
extern long lroundl(long double __x) noexcept(true); extern long __lroundl(long double __x) noexcept(true); 
# 325
__extension__ extern long long llroundl(long double __x) noexcept(true); extern long long __llroundl(long double __x) noexcept(true); 
# 329
extern long double fdiml(long double __x, long double __y) noexcept(true); extern long double __fdiml(long double __x, long double __y) noexcept(true); 
# 333
extern long double fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 336
extern long double fminl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 340
extern long double fmal(long double __x, long double __y, long double __z) noexcept(true); extern long double __fmal(long double __x, long double __y, long double __z) noexcept(true); 
# 345
extern long double roundevenl(long double __x) noexcept(true) __attribute((const)); extern long double __roundevenl(long double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizel(long double * __cx, const long double * __x) noexcept(true); 
# 377
extern long double fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 380
extern long double fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 385
extern long double fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 388
extern long double fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 391
extern long double fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 394
extern long double fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 397
extern long double fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 400
extern long double fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 403
extern long double fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 406
extern long double fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderl(const long double * __x, const long double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagl(const long double * __x, const long double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern long double getpayloadl(const long double * __x) noexcept(true); extern long double __getpayloadl(const long double * __x) noexcept(true); 
# 424
extern int setpayloadl(long double * __x, long double __payload) noexcept(true); 
# 427
extern int setpayloadsigl(long double * __x, long double __payload) noexcept(true); 
# 435
extern long double scalbl(long double __x, long double __n) noexcept(true); extern long double __scalbl(long double __x, long double __n) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) noexcept(true); extern _Float32 __acosf32(_Float32 __x) noexcept(true); 
# 55
extern _Float32 asinf32(_Float32 __x) noexcept(true); extern _Float32 __asinf32(_Float32 __x) noexcept(true); 
# 57
extern _Float32 atanf32(_Float32 __x) noexcept(true); extern _Float32 __atanf32(_Float32 __x) noexcept(true); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) noexcept(true); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) noexcept(true); 
# 62
extern _Float32 cosf32(_Float32 __x) noexcept(true); extern _Float32 __cosf32(_Float32 __x) noexcept(true); 
# 64
extern _Float32 sinf32(_Float32 __x) noexcept(true); extern _Float32 __sinf32(_Float32 __x) noexcept(true); 
# 66
extern _Float32 tanf32(_Float32 __x) noexcept(true); extern _Float32 __tanf32(_Float32 __x) noexcept(true); 
# 71
extern _Float32 coshf32(_Float32 __x) noexcept(true); extern _Float32 __coshf32(_Float32 __x) noexcept(true); 
# 73
extern _Float32 sinhf32(_Float32 __x) noexcept(true); extern _Float32 __sinhf32(_Float32 __x) noexcept(true); 
# 75
extern _Float32 tanhf32(_Float32 __x) noexcept(true); extern _Float32 __tanhf32(_Float32 __x) noexcept(true); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); 
# 85
extern _Float32 acoshf32(_Float32 __x) noexcept(true); extern _Float32 __acoshf32(_Float32 __x) noexcept(true); 
# 87
extern _Float32 asinhf32(_Float32 __x) noexcept(true); extern _Float32 __asinhf32(_Float32 __x) noexcept(true); 
# 89
extern _Float32 atanhf32(_Float32 __x) noexcept(true); extern _Float32 __atanhf32(_Float32 __x) noexcept(true); 
# 95
extern _Float32 expf32(_Float32 __x) noexcept(true); extern _Float32 __expf32(_Float32 __x) noexcept(true); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) noexcept(true); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) noexcept(true); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) noexcept(true); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) noexcept(true); 
# 104
extern _Float32 logf32(_Float32 __x) noexcept(true); extern _Float32 __logf32(_Float32 __x) noexcept(true); 
# 107
extern _Float32 log10f32(_Float32 __x) noexcept(true); extern _Float32 __log10f32(_Float32 __x) noexcept(true); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) noexcept(true); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) noexcept(true); extern _Float32 __exp10f32(_Float32 __x) noexcept(true); 
# 119
extern _Float32 expm1f32(_Float32 __x) noexcept(true); extern _Float32 __expm1f32(_Float32 __x) noexcept(true); 
# 122
extern _Float32 log1pf32(_Float32 __x) noexcept(true); extern _Float32 __log1pf32(_Float32 __x) noexcept(true); 
# 125
extern _Float32 logbf32(_Float32 __x) noexcept(true); extern _Float32 __logbf32(_Float32 __x) noexcept(true); 
# 130
extern _Float32 exp2f32(_Float32 __x) noexcept(true); extern _Float32 __exp2f32(_Float32 __x) noexcept(true); 
# 133
extern _Float32 log2f32(_Float32 __x) noexcept(true); extern _Float32 __log2f32(_Float32 __x) noexcept(true); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __powf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 143
extern _Float32 sqrtf32(_Float32 __x) noexcept(true); extern _Float32 __sqrtf32(_Float32 __x) noexcept(true); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 152
extern _Float32 cbrtf32(_Float32 __x) noexcept(true); extern _Float32 __cbrtf32(_Float32 __x) noexcept(true); 
# 159
extern _Float32 ceilf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __floorf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32 nanf32(const char * __tagb) noexcept(true); extern _Float32 __nanf32(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) noexcept(true); extern _Float32 __j0f32(_Float32) noexcept(true); 
# 221
extern _Float32 j1f32(_Float32) noexcept(true); extern _Float32 __j1f32(_Float32) noexcept(true); 
# 222
extern _Float32 jnf32(int, _Float32) noexcept(true); extern _Float32 __jnf32(int, _Float32) noexcept(true); 
# 223
extern _Float32 y0f32(_Float32) noexcept(true); extern _Float32 __y0f32(_Float32) noexcept(true); 
# 224
extern _Float32 y1f32(_Float32) noexcept(true); extern _Float32 __y1f32(_Float32) noexcept(true); 
# 225
extern _Float32 ynf32(int, _Float32) noexcept(true); extern _Float32 __ynf32(int, _Float32) noexcept(true); 
# 231
extern _Float32 erff32(_Float32) noexcept(true); extern _Float32 __erff32(_Float32) noexcept(true); 
# 232
extern _Float32 erfcf32(_Float32) noexcept(true); extern _Float32 __erfcf32(_Float32) noexcept(true); 
# 233
extern _Float32 lgammaf32(_Float32) noexcept(true); extern _Float32 __lgammaf32(_Float32) noexcept(true); 
# 238
extern _Float32 tgammaf32(_Float32) noexcept(true); extern _Float32 __tgammaf32(_Float32) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) noexcept(true); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) noexcept(true); 
# 259
extern _Float32 rintf32(_Float32 __x) noexcept(true); extern _Float32 __rintf32(_Float32 __x) noexcept(true); 
# 262
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 269
extern _Float32 nextdownf32(_Float32 __x) noexcept(true); extern _Float32 __nextdownf32(_Float32 __x) noexcept(true); 
# 271
extern _Float32 nextupf32(_Float32 __x) noexcept(true); extern _Float32 __nextupf32(_Float32 __x) noexcept(true); 
# 275
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 279
extern _Float32 scalbnf32(_Float32 __x, int __n) noexcept(true); extern _Float32 __scalbnf32(_Float32 __x, int __n) noexcept(true); 
# 283
extern int ilogbf32(_Float32 __x) noexcept(true); extern int __ilogbf32(_Float32 __x) noexcept(true); 
# 288
extern long llogbf32(_Float32 __x) noexcept(true); extern long __llogbf32(_Float32 __x) noexcept(true); 
# 293
extern _Float32 scalblnf32(_Float32 __x, long __n) noexcept(true); extern _Float32 __scalblnf32(_Float32 __x, long __n) noexcept(true); 
# 297
extern _Float32 nearbyintf32(_Float32 __x) noexcept(true); extern _Float32 __nearbyintf32(_Float32 __x) noexcept(true); 
# 301
extern _Float32 roundf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32 truncf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __truncf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32(_Float32 __x) noexcept(true); extern long __lrintf32(_Float32 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32(_Float32 __x) noexcept(true); extern long long __llrintf32(_Float32 __x) noexcept(true); 
# 323
extern long lroundf32(_Float32 __x) noexcept(true); extern long __lroundf32(_Float32 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32(_Float32 __x) noexcept(true); extern long long __llroundf32(_Float32 __x) noexcept(true); 
# 329
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 333
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32 fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); 
# 345
extern _Float32 roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) noexcept(true); 
# 377
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32 fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32 fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32 fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32 fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32 fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32 fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32 fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32 fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32 getpayloadf32(const _Float32 * __x) noexcept(true); extern _Float32 __getpayloadf32(const _Float32 * __x) noexcept(true); 
# 424
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 427
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) noexcept(true); extern _Float64 __acosf64(_Float64 __x) noexcept(true); 
# 55
extern _Float64 asinf64(_Float64 __x) noexcept(true); extern _Float64 __asinf64(_Float64 __x) noexcept(true); 
# 57
extern _Float64 atanf64(_Float64 __x) noexcept(true); extern _Float64 __atanf64(_Float64 __x) noexcept(true); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) noexcept(true); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) noexcept(true); 
# 62
extern _Float64 cosf64(_Float64 __x) noexcept(true); extern _Float64 __cosf64(_Float64 __x) noexcept(true); 
# 64
extern _Float64 sinf64(_Float64 __x) noexcept(true); extern _Float64 __sinf64(_Float64 __x) noexcept(true); 
# 66
extern _Float64 tanf64(_Float64 __x) noexcept(true); extern _Float64 __tanf64(_Float64 __x) noexcept(true); 
# 71
extern _Float64 coshf64(_Float64 __x) noexcept(true); extern _Float64 __coshf64(_Float64 __x) noexcept(true); 
# 73
extern _Float64 sinhf64(_Float64 __x) noexcept(true); extern _Float64 __sinhf64(_Float64 __x) noexcept(true); 
# 75
extern _Float64 tanhf64(_Float64 __x) noexcept(true); extern _Float64 __tanhf64(_Float64 __x) noexcept(true); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); 
# 85
extern _Float64 acoshf64(_Float64 __x) noexcept(true); extern _Float64 __acoshf64(_Float64 __x) noexcept(true); 
# 87
extern _Float64 asinhf64(_Float64 __x) noexcept(true); extern _Float64 __asinhf64(_Float64 __x) noexcept(true); 
# 89
extern _Float64 atanhf64(_Float64 __x) noexcept(true); extern _Float64 __atanhf64(_Float64 __x) noexcept(true); 
# 95
extern _Float64 expf64(_Float64 __x) noexcept(true); extern _Float64 __expf64(_Float64 __x) noexcept(true); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) noexcept(true); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) noexcept(true); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) noexcept(true); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) noexcept(true); 
# 104
extern _Float64 logf64(_Float64 __x) noexcept(true); extern _Float64 __logf64(_Float64 __x) noexcept(true); 
# 107
extern _Float64 log10f64(_Float64 __x) noexcept(true); extern _Float64 __log10f64(_Float64 __x) noexcept(true); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) noexcept(true); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) noexcept(true); extern _Float64 __exp10f64(_Float64 __x) noexcept(true); 
# 119
extern _Float64 expm1f64(_Float64 __x) noexcept(true); extern _Float64 __expm1f64(_Float64 __x) noexcept(true); 
# 122
extern _Float64 log1pf64(_Float64 __x) noexcept(true); extern _Float64 __log1pf64(_Float64 __x) noexcept(true); 
# 125
extern _Float64 logbf64(_Float64 __x) noexcept(true); extern _Float64 __logbf64(_Float64 __x) noexcept(true); 
# 130
extern _Float64 exp2f64(_Float64 __x) noexcept(true); extern _Float64 __exp2f64(_Float64 __x) noexcept(true); 
# 133
extern _Float64 log2f64(_Float64 __x) noexcept(true); extern _Float64 __log2f64(_Float64 __x) noexcept(true); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __powf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 143
extern _Float64 sqrtf64(_Float64 __x) noexcept(true); extern _Float64 __sqrtf64(_Float64 __x) noexcept(true); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 152
extern _Float64 cbrtf64(_Float64 __x) noexcept(true); extern _Float64 __cbrtf64(_Float64 __x) noexcept(true); 
# 159
extern _Float64 ceilf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __floorf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64 nanf64(const char * __tagb) noexcept(true); extern _Float64 __nanf64(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) noexcept(true); extern _Float64 __j0f64(_Float64) noexcept(true); 
# 221
extern _Float64 j1f64(_Float64) noexcept(true); extern _Float64 __j1f64(_Float64) noexcept(true); 
# 222
extern _Float64 jnf64(int, _Float64) noexcept(true); extern _Float64 __jnf64(int, _Float64) noexcept(true); 
# 223
extern _Float64 y0f64(_Float64) noexcept(true); extern _Float64 __y0f64(_Float64) noexcept(true); 
# 224
extern _Float64 y1f64(_Float64) noexcept(true); extern _Float64 __y1f64(_Float64) noexcept(true); 
# 225
extern _Float64 ynf64(int, _Float64) noexcept(true); extern _Float64 __ynf64(int, _Float64) noexcept(true); 
# 231
extern _Float64 erff64(_Float64) noexcept(true); extern _Float64 __erff64(_Float64) noexcept(true); 
# 232
extern _Float64 erfcf64(_Float64) noexcept(true); extern _Float64 __erfcf64(_Float64) noexcept(true); 
# 233
extern _Float64 lgammaf64(_Float64) noexcept(true); extern _Float64 __lgammaf64(_Float64) noexcept(true); 
# 238
extern _Float64 tgammaf64(_Float64) noexcept(true); extern _Float64 __tgammaf64(_Float64) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) noexcept(true); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) noexcept(true); 
# 259
extern _Float64 rintf64(_Float64 __x) noexcept(true); extern _Float64 __rintf64(_Float64 __x) noexcept(true); 
# 262
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 269
extern _Float64 nextdownf64(_Float64 __x) noexcept(true); extern _Float64 __nextdownf64(_Float64 __x) noexcept(true); 
# 271
extern _Float64 nextupf64(_Float64 __x) noexcept(true); extern _Float64 __nextupf64(_Float64 __x) noexcept(true); 
# 275
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 279
extern _Float64 scalbnf64(_Float64 __x, int __n) noexcept(true); extern _Float64 __scalbnf64(_Float64 __x, int __n) noexcept(true); 
# 283
extern int ilogbf64(_Float64 __x) noexcept(true); extern int __ilogbf64(_Float64 __x) noexcept(true); 
# 288
extern long llogbf64(_Float64 __x) noexcept(true); extern long __llogbf64(_Float64 __x) noexcept(true); 
# 293
extern _Float64 scalblnf64(_Float64 __x, long __n) noexcept(true); extern _Float64 __scalblnf64(_Float64 __x, long __n) noexcept(true); 
# 297
extern _Float64 nearbyintf64(_Float64 __x) noexcept(true); extern _Float64 __nearbyintf64(_Float64 __x) noexcept(true); 
# 301
extern _Float64 roundf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64 truncf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __truncf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64(_Float64 __x) noexcept(true); extern long __lrintf64(_Float64 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64(_Float64 __x) noexcept(true); extern long long __llrintf64(_Float64 __x) noexcept(true); 
# 323
extern long lroundf64(_Float64 __x) noexcept(true); extern long __lroundf64(_Float64 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64(_Float64 __x) noexcept(true); extern long long __llroundf64(_Float64 __x) noexcept(true); 
# 329
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 333
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64 fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 345
extern _Float64 roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) noexcept(true); 
# 377
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64 fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64 fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64 fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64 fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64 fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64 fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64 fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64 fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64 getpayloadf64(const _Float64 * __x) noexcept(true); extern _Float64 __getpayloadf64(const _Float64 * __x) noexcept(true); 
# 424
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 427
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) noexcept(true); extern _Float32x __acosf32x(_Float32x __x) noexcept(true); 
# 55
extern _Float32x asinf32x(_Float32x __x) noexcept(true); extern _Float32x __asinf32x(_Float32x __x) noexcept(true); 
# 57
extern _Float32x atanf32x(_Float32x __x) noexcept(true); extern _Float32x __atanf32x(_Float32x __x) noexcept(true); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); 
# 62
extern _Float32x cosf32x(_Float32x __x) noexcept(true); extern _Float32x __cosf32x(_Float32x __x) noexcept(true); 
# 64
extern _Float32x sinf32x(_Float32x __x) noexcept(true); extern _Float32x __sinf32x(_Float32x __x) noexcept(true); 
# 66
extern _Float32x tanf32x(_Float32x __x) noexcept(true); extern _Float32x __tanf32x(_Float32x __x) noexcept(true); 
# 71
extern _Float32x coshf32x(_Float32x __x) noexcept(true); extern _Float32x __coshf32x(_Float32x __x) noexcept(true); 
# 73
extern _Float32x sinhf32x(_Float32x __x) noexcept(true); extern _Float32x __sinhf32x(_Float32x __x) noexcept(true); 
# 75
extern _Float32x tanhf32x(_Float32x __x) noexcept(true); extern _Float32x __tanhf32x(_Float32x __x) noexcept(true); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); 
# 85
extern _Float32x acoshf32x(_Float32x __x) noexcept(true); extern _Float32x __acoshf32x(_Float32x __x) noexcept(true); 
# 87
extern _Float32x asinhf32x(_Float32x __x) noexcept(true); extern _Float32x __asinhf32x(_Float32x __x) noexcept(true); 
# 89
extern _Float32x atanhf32x(_Float32x __x) noexcept(true); extern _Float32x __atanhf32x(_Float32x __x) noexcept(true); 
# 95
extern _Float32x expf32x(_Float32x __x) noexcept(true); extern _Float32x __expf32x(_Float32x __x) noexcept(true); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) noexcept(true); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) noexcept(true); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) noexcept(true); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) noexcept(true); 
# 104
extern _Float32x logf32x(_Float32x __x) noexcept(true); extern _Float32x __logf32x(_Float32x __x) noexcept(true); 
# 107
extern _Float32x log10f32x(_Float32x __x) noexcept(true); extern _Float32x __log10f32x(_Float32x __x) noexcept(true); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) noexcept(true); extern _Float32x __exp10f32x(_Float32x __x) noexcept(true); 
# 119
extern _Float32x expm1f32x(_Float32x __x) noexcept(true); extern _Float32x __expm1f32x(_Float32x __x) noexcept(true); 
# 122
extern _Float32x log1pf32x(_Float32x __x) noexcept(true); extern _Float32x __log1pf32x(_Float32x __x) noexcept(true); 
# 125
extern _Float32x logbf32x(_Float32x __x) noexcept(true); extern _Float32x __logbf32x(_Float32x __x) noexcept(true); 
# 130
extern _Float32x exp2f32x(_Float32x __x) noexcept(true); extern _Float32x __exp2f32x(_Float32x __x) noexcept(true); 
# 133
extern _Float32x log2f32x(_Float32x __x) noexcept(true); extern _Float32x __log2f32x(_Float32x __x) noexcept(true); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) noexcept(true); extern _Float32x __sqrtf32x(_Float32x __x) noexcept(true); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) noexcept(true); extern _Float32x __cbrtf32x(_Float32x __x) noexcept(true); 
# 159
extern _Float32x ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32x nanf32x(const char * __tagb) noexcept(true); extern _Float32x __nanf32x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) noexcept(true); extern _Float32x __j0f32x(_Float32x) noexcept(true); 
# 221
extern _Float32x j1f32x(_Float32x) noexcept(true); extern _Float32x __j1f32x(_Float32x) noexcept(true); 
# 222
extern _Float32x jnf32x(int, _Float32x) noexcept(true); extern _Float32x __jnf32x(int, _Float32x) noexcept(true); 
# 223
extern _Float32x y0f32x(_Float32x) noexcept(true); extern _Float32x __y0f32x(_Float32x) noexcept(true); 
# 224
extern _Float32x y1f32x(_Float32x) noexcept(true); extern _Float32x __y1f32x(_Float32x) noexcept(true); 
# 225
extern _Float32x ynf32x(int, _Float32x) noexcept(true); extern _Float32x __ynf32x(int, _Float32x) noexcept(true); 
# 231
extern _Float32x erff32x(_Float32x) noexcept(true); extern _Float32x __erff32x(_Float32x) noexcept(true); 
# 232
extern _Float32x erfcf32x(_Float32x) noexcept(true); extern _Float32x __erfcf32x(_Float32x) noexcept(true); 
# 233
extern _Float32x lgammaf32x(_Float32x) noexcept(true); extern _Float32x __lgammaf32x(_Float32x) noexcept(true); 
# 238
extern _Float32x tgammaf32x(_Float32x) noexcept(true); extern _Float32x __tgammaf32x(_Float32x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); 
# 259
extern _Float32x rintf32x(_Float32x __x) noexcept(true); extern _Float32x __rintf32x(_Float32x __x) noexcept(true); 
# 262
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 269
extern _Float32x nextdownf32x(_Float32x __x) noexcept(true); extern _Float32x __nextdownf32x(_Float32x __x) noexcept(true); 
# 271
extern _Float32x nextupf32x(_Float32x __x) noexcept(true); extern _Float32x __nextupf32x(_Float32x __x) noexcept(true); 
# 275
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 279
extern _Float32x scalbnf32x(_Float32x __x, int __n) noexcept(true); extern _Float32x __scalbnf32x(_Float32x __x, int __n) noexcept(true); 
# 283
extern int ilogbf32x(_Float32x __x) noexcept(true); extern int __ilogbf32x(_Float32x __x) noexcept(true); 
# 288
extern long llogbf32x(_Float32x __x) noexcept(true); extern long __llogbf32x(_Float32x __x) noexcept(true); 
# 293
extern _Float32x scalblnf32x(_Float32x __x, long __n) noexcept(true); extern _Float32x __scalblnf32x(_Float32x __x, long __n) noexcept(true); 
# 297
extern _Float32x nearbyintf32x(_Float32x __x) noexcept(true); extern _Float32x __nearbyintf32x(_Float32x __x) noexcept(true); 
# 301
extern _Float32x roundf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32x truncf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32x(_Float32x __x) noexcept(true); extern long __lrintf32x(_Float32x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32x(_Float32x __x) noexcept(true); extern long long __llrintf32x(_Float32x __x) noexcept(true); 
# 323
extern long lroundf32x(_Float32x __x) noexcept(true); extern long __lroundf32x(_Float32x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32x(_Float32x __x) noexcept(true); extern long long __llroundf32x(_Float32x __x) noexcept(true); 
# 329
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 333
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 345
extern _Float32x roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) noexcept(true); 
# 377
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32x fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32x fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32x fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32x fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32x fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32x fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32x fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32x fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32x getpayloadf32x(const _Float32x * __x) noexcept(true); extern _Float32x __getpayloadf32x(const _Float32x * __x) noexcept(true); 
# 424
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 427
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) noexcept(true); extern _Float64x __acosf64x(_Float64x __x) noexcept(true); 
# 55
extern _Float64x asinf64x(_Float64x __x) noexcept(true); extern _Float64x __asinf64x(_Float64x __x) noexcept(true); 
# 57
extern _Float64x atanf64x(_Float64x __x) noexcept(true); extern _Float64x __atanf64x(_Float64x __x) noexcept(true); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); 
# 62
extern _Float64x cosf64x(_Float64x __x) noexcept(true); extern _Float64x __cosf64x(_Float64x __x) noexcept(true); 
# 64
extern _Float64x sinf64x(_Float64x __x) noexcept(true); extern _Float64x __sinf64x(_Float64x __x) noexcept(true); 
# 66
extern _Float64x tanf64x(_Float64x __x) noexcept(true); extern _Float64x __tanf64x(_Float64x __x) noexcept(true); 
# 71
extern _Float64x coshf64x(_Float64x __x) noexcept(true); extern _Float64x __coshf64x(_Float64x __x) noexcept(true); 
# 73
extern _Float64x sinhf64x(_Float64x __x) noexcept(true); extern _Float64x __sinhf64x(_Float64x __x) noexcept(true); 
# 75
extern _Float64x tanhf64x(_Float64x __x) noexcept(true); extern _Float64x __tanhf64x(_Float64x __x) noexcept(true); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); 
# 85
extern _Float64x acoshf64x(_Float64x __x) noexcept(true); extern _Float64x __acoshf64x(_Float64x __x) noexcept(true); 
# 87
extern _Float64x asinhf64x(_Float64x __x) noexcept(true); extern _Float64x __asinhf64x(_Float64x __x) noexcept(true); 
# 89
extern _Float64x atanhf64x(_Float64x __x) noexcept(true); extern _Float64x __atanhf64x(_Float64x __x) noexcept(true); 
# 95
extern _Float64x expf64x(_Float64x __x) noexcept(true); extern _Float64x __expf64x(_Float64x __x) noexcept(true); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) noexcept(true); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) noexcept(true); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) noexcept(true); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) noexcept(true); 
# 104
extern _Float64x logf64x(_Float64x __x) noexcept(true); extern _Float64x __logf64x(_Float64x __x) noexcept(true); 
# 107
extern _Float64x log10f64x(_Float64x __x) noexcept(true); extern _Float64x __log10f64x(_Float64x __x) noexcept(true); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) noexcept(true); extern _Float64x __exp10f64x(_Float64x __x) noexcept(true); 
# 119
extern _Float64x expm1f64x(_Float64x __x) noexcept(true); extern _Float64x __expm1f64x(_Float64x __x) noexcept(true); 
# 122
extern _Float64x log1pf64x(_Float64x __x) noexcept(true); extern _Float64x __log1pf64x(_Float64x __x) noexcept(true); 
# 125
extern _Float64x logbf64x(_Float64x __x) noexcept(true); extern _Float64x __logbf64x(_Float64x __x) noexcept(true); 
# 130
extern _Float64x exp2f64x(_Float64x __x) noexcept(true); extern _Float64x __exp2f64x(_Float64x __x) noexcept(true); 
# 133
extern _Float64x log2f64x(_Float64x __x) noexcept(true); extern _Float64x __log2f64x(_Float64x __x) noexcept(true); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) noexcept(true); extern _Float64x __sqrtf64x(_Float64x __x) noexcept(true); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) noexcept(true); extern _Float64x __cbrtf64x(_Float64x __x) noexcept(true); 
# 159
extern _Float64x ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64x nanf64x(const char * __tagb) noexcept(true); extern _Float64x __nanf64x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) noexcept(true); extern _Float64x __j0f64x(_Float64x) noexcept(true); 
# 221
extern _Float64x j1f64x(_Float64x) noexcept(true); extern _Float64x __j1f64x(_Float64x) noexcept(true); 
# 222
extern _Float64x jnf64x(int, _Float64x) noexcept(true); extern _Float64x __jnf64x(int, _Float64x) noexcept(true); 
# 223
extern _Float64x y0f64x(_Float64x) noexcept(true); extern _Float64x __y0f64x(_Float64x) noexcept(true); 
# 224
extern _Float64x y1f64x(_Float64x) noexcept(true); extern _Float64x __y1f64x(_Float64x) noexcept(true); 
# 225
extern _Float64x ynf64x(int, _Float64x) noexcept(true); extern _Float64x __ynf64x(int, _Float64x) noexcept(true); 
# 231
extern _Float64x erff64x(_Float64x) noexcept(true); extern _Float64x __erff64x(_Float64x) noexcept(true); 
# 232
extern _Float64x erfcf64x(_Float64x) noexcept(true); extern _Float64x __erfcf64x(_Float64x) noexcept(true); 
# 233
extern _Float64x lgammaf64x(_Float64x) noexcept(true); extern _Float64x __lgammaf64x(_Float64x) noexcept(true); 
# 238
extern _Float64x tgammaf64x(_Float64x) noexcept(true); extern _Float64x __tgammaf64x(_Float64x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); 
# 259
extern _Float64x rintf64x(_Float64x __x) noexcept(true); extern _Float64x __rintf64x(_Float64x __x) noexcept(true); 
# 262
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 269
extern _Float64x nextdownf64x(_Float64x __x) noexcept(true); extern _Float64x __nextdownf64x(_Float64x __x) noexcept(true); 
# 271
extern _Float64x nextupf64x(_Float64x __x) noexcept(true); extern _Float64x __nextupf64x(_Float64x __x) noexcept(true); 
# 275
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 279
extern _Float64x scalbnf64x(_Float64x __x, int __n) noexcept(true); extern _Float64x __scalbnf64x(_Float64x __x, int __n) noexcept(true); 
# 283
extern int ilogbf64x(_Float64x __x) noexcept(true); extern int __ilogbf64x(_Float64x __x) noexcept(true); 
# 288
extern long llogbf64x(_Float64x __x) noexcept(true); extern long __llogbf64x(_Float64x __x) noexcept(true); 
# 293
extern _Float64x scalblnf64x(_Float64x __x, long __n) noexcept(true); extern _Float64x __scalblnf64x(_Float64x __x, long __n) noexcept(true); 
# 297
extern _Float64x nearbyintf64x(_Float64x __x) noexcept(true); extern _Float64x __nearbyintf64x(_Float64x __x) noexcept(true); 
# 301
extern _Float64x roundf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64x truncf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64x(_Float64x __x) noexcept(true); extern long __lrintf64x(_Float64x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64x(_Float64x __x) noexcept(true); extern long long __llrintf64x(_Float64x __x) noexcept(true); 
# 323
extern long lroundf64x(_Float64x __x) noexcept(true); extern long __lroundf64x(_Float64x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64x(_Float64x __x) noexcept(true); extern long long __llroundf64x(_Float64x __x) noexcept(true); 
# 329
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 333
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 345
extern _Float64x roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) noexcept(true); 
# 377
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64x fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64x fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64x fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64x fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64x fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64x fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64x fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64x fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64x getpayloadf64x(const _Float64x * __x) noexcept(true); extern _Float64x __getpayloadf64x(const _Float64x * __x) noexcept(true); 
# 424
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 427
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) noexcept(true); 
# 27
extern float fdiv(double __x, double __y) noexcept(true); 
# 30
extern float ffma(double __x, double __y, double __z) noexcept(true); 
# 33
extern float fmul(double __x, double __y) noexcept(true); 
# 36
extern float fsqrt(double __x) noexcept(true); 
# 39
extern float fsub(double __x, double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) noexcept(true); 
# 27
extern float fdivl(long double __x, long double __y) noexcept(true); 
# 30
extern float ffmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern float fmull(long double __x, long double __y) noexcept(true); 
# 36
extern float fsqrtl(long double __x) noexcept(true); 
# 39
extern float fsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) noexcept(true); 
# 27
extern double ddivl(long double __x, long double __y) noexcept(true); 
# 30
extern double dfmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern double dmull(long double __x, long double __y) noexcept(true); 
# 36
extern double dsqrtl(long double __x) noexcept(true); 
# 39
extern double dsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 33
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf32x(_Float32x __x) noexcept(true); 
# 39
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float64 f64fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 854 "/usr/include/math.h" 3
extern int signgam; 
# 935 "/usr/include/math.h" 3
enum { 
# 936
FP_NAN, 
# 939
FP_INFINITE, 
# 942
FP_ZERO, 
# 945
FP_SUBNORMAL, 
# 948
FP_NORMAL
# 951
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) noexcept(true)
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 53
}
# 1066 "/usr/include/math.h" 3
extern "C++" {
# 1067
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 1068
inline int issignaling(double __val) { return __issignaling(__val); } 
# 1070
inline int issignaling(long double __val) 
# 1071
{ 
# 1075
return __issignalingl(__val); 
# 1077
} 
# 1083
}
# 1097 "/usr/include/math.h" 3
extern "C++" {
# 1128 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1129
iszero(__T __val) 
# 1130
{ 
# 1131
return __val == 0; 
# 1132
} 
# 1134
}
# 1363 "/usr/include/math.h" 3
extern "C++" {
# 1364
template< class > struct __iseqsig_type; 
# 1366
template<> struct __iseqsig_type< float>  { 
# 1368
static int __call(float __x, float __y) throw() 
# 1369
{ 
# 1370
return __iseqsigf(__x, __y); 
# 1371
} 
# 1372
}; 
# 1374
template<> struct __iseqsig_type< double>  { 
# 1376
static int __call(double __x, double __y) throw() 
# 1377
{ 
# 1378
return __iseqsig(__x, __y); 
# 1379
} 
# 1380
}; 
# 1382
template<> struct __iseqsig_type< long double>  { 
# 1384
static int __call(long double __x, long double __y) throw() 
# 1385
{ 
# 1387
return __iseqsigl(__x, __y); 
# 1391
} 
# 1392
}; 
# 1406 "/usr/include/math.h" 3
template< class _T1, class _T2> inline int 
# 1408
iseqsig(_T1 __x, _T2 __y) throw() 
# 1409
{ 
# 1411
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1415
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1416
} 
# 1418
}
# 1423
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 63 "/usr/include/stdlib.h" 3
typedef 
# 60
struct { 
# 61
int quot; 
# 62
int rem; 
# 63
} div_t; 
# 71
typedef 
# 68
struct { 
# 69
long quot; 
# 70
long rem; 
# 71
} ldiv_t; 
# 81
__extension__ typedef 
# 78
struct { 
# 79
long long quot; 
# 80
long long rem; 
# 81
} lldiv_t; 
# 98 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() noexcept(true); 
# 102
extern double atof(const char * __nptr) noexcept(true)
# 103
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105
extern int atoi(const char * __nptr) noexcept(true)
# 106
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 108
extern long atol(const char * __nptr) noexcept(true)
# 109
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 113
__extension__ extern long long atoll(const char * __nptr) noexcept(true)
# 114
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 118
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 120
 __attribute((__nonnull__(1))); 
# 124
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 125
 __attribute((__nonnull__(1))); 
# 127
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 129
 __attribute((__nonnull__(1))); 
# 141 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 143
 __attribute((__nonnull__(1))); 
# 147
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 149
 __attribute((__nonnull__(1))); 
# 159 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 161
 __attribute((__nonnull__(1))); 
# 165
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 167
 __attribute((__nonnull__(1))); 
# 177 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 179
 __attribute((__nonnull__(1))); 
# 181
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 183
 __attribute((__nonnull__(1))); 
# 188
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 190
 __attribute((__nonnull__(1))); 
# 193
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 195
 __attribute((__nonnull__(1))); 
# 201
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 203
 __attribute((__nonnull__(1))); 
# 206
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 208
 __attribute((__nonnull__(1))); 
# 213
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) noexcept(true)
# 215
 __attribute((__nonnull__(3))); 
# 217
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) noexcept(true)
# 219
 __attribute((__nonnull__(3))); 
# 221
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) noexcept(true)
# 223
 __attribute((__nonnull__(3))); 
# 233 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) noexcept(true)
# 235
 __attribute((__nonnull__(3))); 
# 239
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) noexcept(true)
# 241
 __attribute((__nonnull__(3))); 
# 251 "/usr/include/stdlib.h" 3
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) noexcept(true)
# 253
 __attribute((__nonnull__(3))); 
# 257
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) noexcept(true)
# 259
 __attribute((__nonnull__(3))); 
# 275 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 277
 __attribute((__nonnull__(1, 4))); 
# 279
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 282
 __attribute((__nonnull__(1, 4))); 
# 285
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 288
 __attribute((__nonnull__(1, 4))); 
# 291
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 294
 __attribute((__nonnull__(1, 4))); 
# 296
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 298
 __attribute((__nonnull__(1, 3))); 
# 300
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 302
 __attribute((__nonnull__(1, 3))); 
# 304
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 307
 __attribute((__nonnull__(1, 3))); 
# 317 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 320
 __attribute((__nonnull__(1, 3))); 
# 324
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 327
 __attribute((__nonnull__(1, 3))); 
# 338 "/usr/include/stdlib.h" 3
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 341
 __attribute((__nonnull__(1, 3))); 
# 345
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 348
 __attribute((__nonnull__(1, 3))); 
# 386 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) noexcept(true); 
# 389
extern long a64l(const char * __s) noexcept(true)
# 390
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 33 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3
typedef 
# 26
union { 
# 27
__extension__ unsigned long long __value64; 
# 29
struct { 
# 30
unsigned __low; 
# 31
unsigned __high; 
# 32
} __value32; 
# 33
} __atomic_wide_counter; 
# 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 51
struct __pthread_internal_list { 
# 53
__pthread_internal_list *__prev; 
# 54
__pthread_internal_list *__next; 
# 55
} __pthread_list_t; 
# 60
typedef 
# 57
struct __pthread_internal_slist { 
# 59
__pthread_internal_slist *__next; 
# 60
} __pthread_slist_t; 
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
}; 
# 94 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 96
__atomic_wide_counter __wseq; 
# 97
__atomic_wide_counter __g1_start; 
# 98
unsigned __g_refs[2]; 
# 99
unsigned __g_size[2]; 
# 100
unsigned __g1_orig_size; 
# 101
unsigned __wrefs; 
# 102
unsigned __g_signals[2]; 
# 103
}; 
# 105
typedef unsigned __tss_t; 
# 106
typedef unsigned long __thrd_t; 
# 111
typedef 
# 109
struct { 
# 110
int __data; 
# 111
} __once_flag; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 402 "/usr/include/stdlib.h" 3
extern long random() noexcept(true); 
# 405
extern void srandom(unsigned __seed) noexcept(true); 
# 411
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) noexcept(true)
# 412
 __attribute((__nonnull__(2))); 
# 416
extern char *setstate(char * __statebuf) noexcept(true) __attribute((__nonnull__(1))); 
# 424
struct random_data { 
# 426
int32_t *fptr; 
# 427
int32_t *rptr; 
# 428
int32_t *state; 
# 429
int rand_type; 
# 430
int rand_deg; 
# 431
int rand_sep; 
# 432
int32_t *end_ptr; 
# 433
}; 
# 435
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) noexcept(true)
# 436
 __attribute((__nonnull__(1, 2))); 
# 438
extern int srandom_r(unsigned __seed, random_data * __buf) noexcept(true)
# 439
 __attribute((__nonnull__(2))); 
# 441
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) noexcept(true)
# 444
 __attribute((__nonnull__(2, 4))); 
# 446
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) noexcept(true)
# 448
 __attribute((__nonnull__(1, 2))); 
# 454
extern int rand() noexcept(true); 
# 456
extern void srand(unsigned __seed) noexcept(true); 
# 460
extern int rand_r(unsigned * __seed) noexcept(true); 
# 468
extern double drand48() noexcept(true); 
# 469
extern double erand48(unsigned short  __xsubi[3]) noexcept(true) __attribute((__nonnull__(1))); 
# 472
extern long lrand48() noexcept(true); 
# 473
extern long nrand48(unsigned short  __xsubi[3]) noexcept(true)
# 474
 __attribute((__nonnull__(1))); 
# 477
extern long mrand48() noexcept(true); 
# 478
extern long jrand48(unsigned short  __xsubi[3]) noexcept(true)
# 479
 __attribute((__nonnull__(1))); 
# 482
extern void srand48(long __seedval) noexcept(true); 
# 483
extern unsigned short *seed48(unsigned short  __seed16v[3]) noexcept(true)
# 484
 __attribute((__nonnull__(1))); 
# 485
extern void lcong48(unsigned short  __param[7]) noexcept(true) __attribute((__nonnull__(1))); 
# 491
struct drand48_data { 
# 493
unsigned short __x[3]; 
# 494
unsigned short __old_x[3]; 
# 495
unsigned short __c; 
# 496
unsigned short __init; 
# 497
__extension__ unsigned long long __a; 
# 499
}; 
# 502
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 503
 __attribute((__nonnull__(1, 2))); 
# 504
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 506
 __attribute((__nonnull__(1, 2))); 
# 509
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 511
 __attribute((__nonnull__(1, 2))); 
# 512
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 515
 __attribute((__nonnull__(1, 2))); 
# 518
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 520
 __attribute((__nonnull__(1, 2))); 
# 521
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 524
 __attribute((__nonnull__(1, 2))); 
# 527
extern int srand48_r(long __seedval, drand48_data * __buffer) noexcept(true)
# 528
 __attribute((__nonnull__(2))); 
# 530
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) noexcept(true)
# 531
 __attribute((__nonnull__(1, 2))); 
# 533
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) noexcept(true)
# 535
 __attribute((__nonnull__(1, 2))); 
# 540
extern void *malloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 541
 __attribute((__alloc_size__(1))); 
# 543
extern void *calloc(size_t __nmemb, size_t __size) noexcept(true)
# 544
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 551
extern void *realloc(void * __ptr, size_t __size) noexcept(true)
# 552
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 555
extern void free(void * __ptr) noexcept(true); 
# 563
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true)
# 564
 __attribute((__warn_unused_result__))
# 565
 __attribute((__alloc_size__(2, 3))); 
# 569
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) noexcept(true); 
# 38
}
# 580 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 581
 __attribute((__alloc_size__(1))); 
# 586
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) noexcept(true)
# 587
 __attribute((__nonnull__(1))); 
# 592
extern void *aligned_alloc(size_t __alignment, size_t __size) noexcept(true)
# 593
 __attribute((__malloc__)) __attribute((__alloc_align__(1 )))
# 594
 __attribute((__alloc_size__(2))); 
# 598
extern void abort() noexcept(true) __attribute((__noreturn__)); 
# 602
extern int atexit(void (* __func)(void)) noexcept(true) __attribute((__nonnull__(1))); 
# 607
extern "C++" int at_quick_exit(void (* __func)(void)) noexcept(true) __asm__("at_quick_exit")
# 608
 __attribute((__nonnull__(1))); 
# 617 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) noexcept(true)
# 618
 __attribute((__nonnull__(1))); 
# 624
extern void exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 630
extern void quick_exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 636
extern void _Exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 641
extern char *getenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 646
extern char *secure_getenv(const char * __name) noexcept(true)
# 647
 __attribute((__nonnull__(1))); 
# 654
extern int putenv(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 660
extern int setenv(const char * __name, const char * __value, int __replace) noexcept(true)
# 661
 __attribute((__nonnull__(2))); 
# 664
extern int unsetenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 671
extern int clearenv() noexcept(true); 
# 682 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 695 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 705 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 717 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 727 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 728
 __attribute((__nonnull__(1))); 
# 738 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 749 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 759 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 769 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 770
 __attribute((__nonnull__(1))); 
# 781 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 782
 __attribute((__nonnull__(1))); 
# 791 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 797
extern char *canonicalize_file_name(const char * __name) noexcept(true)
# 798
 __attribute((__nonnull__(1))) __attribute((__malloc__)); 
# 808 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) noexcept(true); 
# 816
typedef int (*__compar_fn_t)(const void *, const void *); 
# 819
typedef __compar_fn_t comparison_fn_t; 
# 823
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 828
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 830
 __attribute((__nonnull__(1, 2, 5))); 
# 838
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 839
 __attribute((__nonnull__(1, 4))); 
# 841
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 843
 __attribute((__nonnull__(1, 4))); 
# 848
extern int abs(int __x) noexcept(true) __attribute((const)); 
# 849
extern long labs(long __x) noexcept(true) __attribute((const)); 
# 852
__extension__ extern long long llabs(long long __x) noexcept(true)
# 853
 __attribute((const)); 
# 860
extern div_t div(int __numer, int __denom) noexcept(true)
# 861
 __attribute((const)); 
# 862
extern ldiv_t ldiv(long __numer, long __denom) noexcept(true)
# 863
 __attribute((const)); 
# 866
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) noexcept(true)
# 868
 __attribute((const)); 
# 880 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 881
 __attribute((__nonnull__(3, 4))); 
# 886
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 887
 __attribute((__nonnull__(3, 4))); 
# 892
extern char *gcvt(double __value, int __ndigit, char * __buf) noexcept(true)
# 893
 __attribute((__nonnull__(3))); 
# 898
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 900
 __attribute((__nonnull__(3, 4))); 
# 901
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 903
 __attribute((__nonnull__(3, 4))); 
# 904
extern char *qgcvt(long double __value, int __ndigit, char * __buf) noexcept(true)
# 905
 __attribute((__nonnull__(3))); 
# 910
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 915
 __attribute((__nonnull__(3, 4, 5))); 
# 917
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 920
 __attribute((__nonnull__(3, 4, 5))); 
# 921
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 924
 __attribute((__nonnull__(3, 4, 5))); 
# 930
extern int mblen(const char * __s, size_t __n) noexcept(true); 
# 933
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) noexcept(true); 
# 937
extern int wctomb(char * __s, wchar_t __wchar) noexcept(true); 
# 941
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) noexcept(true); 
# 945
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) noexcept(true); 
# 956
extern int rpmatch(const char * __response) noexcept(true) __attribute((__nonnull__(1))); 
# 967 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) noexcept(true)
# 970
 __attribute((__nonnull__(1, 2, 3))); 
# 978
extern int posix_openpt(int __oflag); 
# 986
extern int grantpt(int __fd) noexcept(true); 
# 990
extern int unlockpt(int __fd) noexcept(true); 
# 995
extern char *ptsname(int __fd) noexcept(true); 
# 1002
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) noexcept(true)
# 1003
 __attribute((__nonnull__(2))); 
# 1006
extern int getpt(); 
# 1013
extern int getloadavg(double  __loadavg[], int __nelem) noexcept(true)
# 1014
 __attribute((__nonnull__(1))); 
# 1035 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 70
constexpr double abs(double __x) 
# 71
{ return __builtin_fabs(__x); } 
# 74
constexpr float abs(float __x) 
# 75
{ return __builtin_fabsf(__x); } 
# 78
constexpr long double abs(long double __x) 
# 79
{ return __builtin_fabsl(__x); } 
# 107 "/usr/include/c++/7/bits/std_abs.h" 3
}
# 108
}
# 77 "/usr/include/c++/7/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/7/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 517
}
# 536 "/usr/include/c++/7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 544
constexpr int fpclassify(float __x) 
# 545
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 546
} 
# 549
constexpr int fpclassify(double __x) 
# 550
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 551
} 
# 554
constexpr int fpclassify(long double __x) 
# 555
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 556
} 
# 560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 563
fpclassify(_Tp __x) 
# 564
{ return (__x != 0) ? 4 : 2; } 
# 569
constexpr bool isfinite(float __x) 
# 570
{ return __builtin_isfinite(__x); } 
# 573
constexpr bool isfinite(double __x) 
# 574
{ return __builtin_isfinite(__x); } 
# 577
constexpr bool isfinite(long double __x) 
# 578
{ return __builtin_isfinite(__x); } 
# 582
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 585
isfinite(_Tp __x) 
# 586
{ return true; } 
# 591
constexpr bool isinf(float __x) 
# 592
{ return __builtin_isinf(__x); } 
# 599
constexpr bool isinf(double __x) 
# 600
{ return __builtin_isinf(__x); } 
# 604
constexpr bool isinf(long double __x) 
# 605
{ return __builtin_isinf(__x); } 
# 609
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 612
isinf(_Tp __x) 
# 613
{ return false; } 
# 618
constexpr bool isnan(float __x) 
# 619
{ return __builtin_isnan(__x); } 
# 626
constexpr bool isnan(double __x) 
# 627
{ return __builtin_isnan(__x); } 
# 631
constexpr bool isnan(long double __x) 
# 632
{ return __builtin_isnan(__x); } 
# 636
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 639
isnan(_Tp __x) 
# 640
{ return false; } 
# 645
constexpr bool isnormal(float __x) 
# 646
{ return __builtin_isnormal(__x); } 
# 649
constexpr bool isnormal(double __x) 
# 650
{ return __builtin_isnormal(__x); } 
# 653
constexpr bool isnormal(long double __x) 
# 654
{ return __builtin_isnormal(__x); } 
# 658
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 661
isnormal(_Tp __x) 
# 662
{ return (__x != 0) ? true : false; } 
# 668
constexpr bool signbit(float __x) 
# 669
{ return __builtin_signbit(__x); } 
# 672
constexpr bool signbit(double __x) 
# 673
{ return __builtin_signbit(__x); } 
# 676
constexpr bool signbit(long double __x) 
# 677
{ return __builtin_signbit(__x); } 
# 681
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 684
signbit(_Tp __x) 
# 685
{ return (__x < 0) ? true : false; } 
# 690
constexpr bool isgreater(float __x, float __y) 
# 691
{ return __builtin_isgreater(__x, __y); } 
# 694
constexpr bool isgreater(double __x, double __y) 
# 695
{ return __builtin_isgreater(__x, __y); } 
# 698
constexpr bool isgreater(long double __x, long double __y) 
# 699
{ return __builtin_isgreater(__x, __y); } 
# 703
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 707
isgreater(_Tp __x, _Up __y) 
# 708
{ 
# 709
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 710
return __builtin_isgreater((__type)__x, (__type)__y); 
# 711
} 
# 716
constexpr bool isgreaterequal(float __x, float __y) 
# 717
{ return __builtin_isgreaterequal(__x, __y); } 
# 720
constexpr bool isgreaterequal(double __x, double __y) 
# 721
{ return __builtin_isgreaterequal(__x, __y); } 
# 724
constexpr bool isgreaterequal(long double __x, long double __y) 
# 725
{ return __builtin_isgreaterequal(__x, __y); } 
# 729
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 733
isgreaterequal(_Tp __x, _Up __y) 
# 734
{ 
# 735
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 736
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 737
} 
# 742
constexpr bool isless(float __x, float __y) 
# 743
{ return __builtin_isless(__x, __y); } 
# 746
constexpr bool isless(double __x, double __y) 
# 747
{ return __builtin_isless(__x, __y); } 
# 750
constexpr bool isless(long double __x, long double __y) 
# 751
{ return __builtin_isless(__x, __y); } 
# 755
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 759
isless(_Tp __x, _Up __y) 
# 760
{ 
# 761
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 762
return __builtin_isless((__type)__x, (__type)__y); 
# 763
} 
# 768
constexpr bool islessequal(float __x, float __y) 
# 769
{ return __builtin_islessequal(__x, __y); } 
# 772
constexpr bool islessequal(double __x, double __y) 
# 773
{ return __builtin_islessequal(__x, __y); } 
# 776
constexpr bool islessequal(long double __x, long double __y) 
# 777
{ return __builtin_islessequal(__x, __y); } 
# 781
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 785
islessequal(_Tp __x, _Up __y) 
# 786
{ 
# 787
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 788
return __builtin_islessequal((__type)__x, (__type)__y); 
# 789
} 
# 794
constexpr bool islessgreater(float __x, float __y) 
# 795
{ return __builtin_islessgreater(__x, __y); } 
# 798
constexpr bool islessgreater(double __x, double __y) 
# 799
{ return __builtin_islessgreater(__x, __y); } 
# 802
constexpr bool islessgreater(long double __x, long double __y) 
# 803
{ return __builtin_islessgreater(__x, __y); } 
# 807
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 811
islessgreater(_Tp __x, _Up __y) 
# 812
{ 
# 813
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 814
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 815
} 
# 820
constexpr bool isunordered(float __x, float __y) 
# 821
{ return __builtin_isunordered(__x, __y); } 
# 824
constexpr bool isunordered(double __x, double __y) 
# 825
{ return __builtin_isunordered(__x, __y); } 
# 828
constexpr bool isunordered(long double __x, long double __y) 
# 829
{ return __builtin_isunordered(__x, __y); } 
# 833
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 837
isunordered(_Tp __x, _Up __y) 
# 838
{ 
# 839
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 840
return __builtin_isunordered((__type)__x, (__type)__y); 
# 841
} 
# 958 "/usr/include/c++/7/cmath" 3
}
# 1075 "/usr/include/c++/7/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 1080
using ::double_t;
# 1081
using ::float_t;
# 1084
using ::acosh;
# 1085
using ::acoshf;
# 1086
using ::acoshl;
# 1088
using ::asinh;
# 1089
using ::asinhf;
# 1090
using ::asinhl;
# 1092
using ::atanh;
# 1093
using ::atanhf;
# 1094
using ::atanhl;
# 1096
using ::cbrt;
# 1097
using ::cbrtf;
# 1098
using ::cbrtl;
# 1100
using ::copysign;
# 1101
using ::copysignf;
# 1102
using ::copysignl;
# 1104
using ::erf;
# 1105
using ::erff;
# 1106
using ::erfl;
# 1108
using ::erfc;
# 1109
using ::erfcf;
# 1110
using ::erfcl;
# 1112
using ::exp2;
# 1113
using ::exp2f;
# 1114
using ::exp2l;
# 1116
using ::expm1;
# 1117
using ::expm1f;
# 1118
using ::expm1l;
# 1120
using ::fdim;
# 1121
using ::fdimf;
# 1122
using ::fdiml;
# 1124
using ::fma;
# 1125
using ::fmaf;
# 1126
using ::fmal;
# 1128
using ::fmax;
# 1129
using ::fmaxf;
# 1130
using ::fmaxl;
# 1132
using ::fmin;
# 1133
using ::fminf;
# 1134
using ::fminl;
# 1136
using ::hypot;
# 1137
using ::hypotf;
# 1138
using ::hypotl;
# 1140
using ::ilogb;
# 1141
using ::ilogbf;
# 1142
using ::ilogbl;
# 1144
using ::lgamma;
# 1145
using ::lgammaf;
# 1146
using ::lgammal;
# 1149
using ::llrint;
# 1150
using ::llrintf;
# 1151
using ::llrintl;
# 1153
using ::llround;
# 1154
using ::llroundf;
# 1155
using ::llroundl;
# 1158
using ::log1p;
# 1159
using ::log1pf;
# 1160
using ::log1pl;
# 1162
using ::log2;
# 1163
using ::log2f;
# 1164
using ::log2l;
# 1166
using ::logb;
# 1167
using ::logbf;
# 1168
using ::logbl;
# 1170
using ::lrint;
# 1171
using ::lrintf;
# 1172
using ::lrintl;
# 1174
using ::lround;
# 1175
using ::lroundf;
# 1176
using ::lroundl;
# 1178
using ::nan;
# 1179
using ::nanf;
# 1180
using ::nanl;
# 1182
using ::nearbyint;
# 1183
using ::nearbyintf;
# 1184
using ::nearbyintl;
# 1186
using ::nextafter;
# 1187
using ::nextafterf;
# 1188
using ::nextafterl;
# 1190
using ::nexttoward;
# 1191
using ::nexttowardf;
# 1192
using ::nexttowardl;
# 1194
using ::remainder;
# 1195
using ::remainderf;
# 1196
using ::remainderl;
# 1198
using ::remquo;
# 1199
using ::remquof;
# 1200
using ::remquol;
# 1202
using ::rint;
# 1203
using ::rintf;
# 1204
using ::rintl;
# 1206
using ::round;
# 1207
using ::roundf;
# 1208
using ::roundl;
# 1210
using ::scalbln;
# 1211
using ::scalblnf;
# 1212
using ::scalblnl;
# 1214
using ::scalbn;
# 1215
using ::scalbnf;
# 1216
using ::scalbnl;
# 1218
using ::tgamma;
# 1219
using ::tgammaf;
# 1220
using ::tgammal;
# 1222
using ::trunc;
# 1223
using ::truncf;
# 1224
using ::truncl;
# 1229
constexpr float acosh(float __x) 
# 1230
{ return __builtin_acoshf(__x); } 
# 1233
constexpr long double acosh(long double __x) 
# 1234
{ return __builtin_acoshl(__x); } 
# 1238
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1241
acosh(_Tp __x) 
# 1242
{ return __builtin_acosh(__x); } 
# 1247
constexpr float asinh(float __x) 
# 1248
{ return __builtin_asinhf(__x); } 
# 1251
constexpr long double asinh(long double __x) 
# 1252
{ return __builtin_asinhl(__x); } 
# 1256
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1259
asinh(_Tp __x) 
# 1260
{ return __builtin_asinh(__x); } 
# 1265
constexpr float atanh(float __x) 
# 1266
{ return __builtin_atanhf(__x); } 
# 1269
constexpr long double atanh(long double __x) 
# 1270
{ return __builtin_atanhl(__x); } 
# 1274
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1277
atanh(_Tp __x) 
# 1278
{ return __builtin_atanh(__x); } 
# 1283
constexpr float cbrt(float __x) 
# 1284
{ return __builtin_cbrtf(__x); } 
# 1287
constexpr long double cbrt(long double __x) 
# 1288
{ return __builtin_cbrtl(__x); } 
# 1292
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1295
cbrt(_Tp __x) 
# 1296
{ return __builtin_cbrt(__x); } 
# 1301
constexpr float copysign(float __x, float __y) 
# 1302
{ return __builtin_copysignf(__x, __y); } 
# 1305
constexpr long double copysign(long double __x, long double __y) 
# 1306
{ return __builtin_copysignl(__x, __y); } 
# 1310
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1312
copysign(_Tp __x, _Up __y) 
# 1313
{ 
# 1314
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1315
return copysign((__type)__x, (__type)__y); 
# 1316
} 
# 1321
constexpr float erf(float __x) 
# 1322
{ return __builtin_erff(__x); } 
# 1325
constexpr long double erf(long double __x) 
# 1326
{ return __builtin_erfl(__x); } 
# 1330
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1333
erf(_Tp __x) 
# 1334
{ return __builtin_erf(__x); } 
# 1339
constexpr float erfc(float __x) 
# 1340
{ return __builtin_erfcf(__x); } 
# 1343
constexpr long double erfc(long double __x) 
# 1344
{ return __builtin_erfcl(__x); } 
# 1348
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1351
erfc(_Tp __x) 
# 1352
{ return __builtin_erfc(__x); } 
# 1357
constexpr float exp2(float __x) 
# 1358
{ return __builtin_exp2f(__x); } 
# 1361
constexpr long double exp2(long double __x) 
# 1362
{ return __builtin_exp2l(__x); } 
# 1366
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1369
exp2(_Tp __x) 
# 1370
{ return __builtin_exp2(__x); } 
# 1375
constexpr float expm1(float __x) 
# 1376
{ return __builtin_expm1f(__x); } 
# 1379
constexpr long double expm1(long double __x) 
# 1380
{ return __builtin_expm1l(__x); } 
# 1384
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1387
expm1(_Tp __x) 
# 1388
{ return __builtin_expm1(__x); } 
# 1393
constexpr float fdim(float __x, float __y) 
# 1394
{ return __builtin_fdimf(__x, __y); } 
# 1397
constexpr long double fdim(long double __x, long double __y) 
# 1398
{ return __builtin_fdiml(__x, __y); } 
# 1402
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1404
fdim(_Tp __x, _Up __y) 
# 1405
{ 
# 1406
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1407
return fdim((__type)__x, (__type)__y); 
# 1408
} 
# 1413
constexpr float fma(float __x, float __y, float __z) 
# 1414
{ return __builtin_fmaf(__x, __y, __z); } 
# 1417
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1418
{ return __builtin_fmal(__x, __y, __z); } 
# 1422
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1424
fma(_Tp __x, _Up __y, _Vp __z) 
# 1425
{ 
# 1426
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1427
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1428
} 
# 1433
constexpr float fmax(float __x, float __y) 
# 1434
{ return __builtin_fmaxf(__x, __y); } 
# 1437
constexpr long double fmax(long double __x, long double __y) 
# 1438
{ return __builtin_fmaxl(__x, __y); } 
# 1442
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1444
fmax(_Tp __x, _Up __y) 
# 1445
{ 
# 1446
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1447
return fmax((__type)__x, (__type)__y); 
# 1448
} 
# 1453
constexpr float fmin(float __x, float __y) 
# 1454
{ return __builtin_fminf(__x, __y); } 
# 1457
constexpr long double fmin(long double __x, long double __y) 
# 1458
{ return __builtin_fminl(__x, __y); } 
# 1462
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1464
fmin(_Tp __x, _Up __y) 
# 1465
{ 
# 1466
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1467
return fmin((__type)__x, (__type)__y); 
# 1468
} 
# 1473
constexpr float hypot(float __x, float __y) 
# 1474
{ return __builtin_hypotf(__x, __y); } 
# 1477
constexpr long double hypot(long double __x, long double __y) 
# 1478
{ return __builtin_hypotl(__x, __y); } 
# 1482
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1484
hypot(_Tp __x, _Up __y) 
# 1485
{ 
# 1486
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1487
return hypot((__type)__x, (__type)__y); 
# 1488
} 
# 1493
constexpr int ilogb(float __x) 
# 1494
{ return __builtin_ilogbf(__x); } 
# 1497
constexpr int ilogb(long double __x) 
# 1498
{ return __builtin_ilogbl(__x); } 
# 1502
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1506
ilogb(_Tp __x) 
# 1507
{ return __builtin_ilogb(__x); } 
# 1512
constexpr float lgamma(float __x) 
# 1513
{ return __builtin_lgammaf(__x); } 
# 1516
constexpr long double lgamma(long double __x) 
# 1517
{ return __builtin_lgammal(__x); } 
# 1521
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1524
lgamma(_Tp __x) 
# 1525
{ return __builtin_lgamma(__x); } 
# 1530
constexpr long long llrint(float __x) 
# 1531
{ return __builtin_llrintf(__x); } 
# 1534
constexpr long long llrint(long double __x) 
# 1535
{ return __builtin_llrintl(__x); } 
# 1539
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1542
llrint(_Tp __x) 
# 1543
{ return __builtin_llrint(__x); } 
# 1548
constexpr long long llround(float __x) 
# 1549
{ return __builtin_llroundf(__x); } 
# 1552
constexpr long long llround(long double __x) 
# 1553
{ return __builtin_llroundl(__x); } 
# 1557
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1560
llround(_Tp __x) 
# 1561
{ return __builtin_llround(__x); } 
# 1566
constexpr float log1p(float __x) 
# 1567
{ return __builtin_log1pf(__x); } 
# 1570
constexpr long double log1p(long double __x) 
# 1571
{ return __builtin_log1pl(__x); } 
# 1575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1578
log1p(_Tp __x) 
# 1579
{ return __builtin_log1p(__x); } 
# 1585
constexpr float log2(float __x) 
# 1586
{ return __builtin_log2f(__x); } 
# 1589
constexpr long double log2(long double __x) 
# 1590
{ return __builtin_log2l(__x); } 
# 1594
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1597
log2(_Tp __x) 
# 1598
{ return __builtin_log2(__x); } 
# 1603
constexpr float logb(float __x) 
# 1604
{ return __builtin_logbf(__x); } 
# 1607
constexpr long double logb(long double __x) 
# 1608
{ return __builtin_logbl(__x); } 
# 1612
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1615
logb(_Tp __x) 
# 1616
{ return __builtin_logb(__x); } 
# 1621
constexpr long lrint(float __x) 
# 1622
{ return __builtin_lrintf(__x); } 
# 1625
constexpr long lrint(long double __x) 
# 1626
{ return __builtin_lrintl(__x); } 
# 1630
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1633
lrint(_Tp __x) 
# 1634
{ return __builtin_lrint(__x); } 
# 1639
constexpr long lround(float __x) 
# 1640
{ return __builtin_lroundf(__x); } 
# 1643
constexpr long lround(long double __x) 
# 1644
{ return __builtin_lroundl(__x); } 
# 1648
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1651
lround(_Tp __x) 
# 1652
{ return __builtin_lround(__x); } 
# 1657
constexpr float nearbyint(float __x) 
# 1658
{ return __builtin_nearbyintf(__x); } 
# 1661
constexpr long double nearbyint(long double __x) 
# 1662
{ return __builtin_nearbyintl(__x); } 
# 1666
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1669
nearbyint(_Tp __x) 
# 1670
{ return __builtin_nearbyint(__x); } 
# 1675
constexpr float nextafter(float __x, float __y) 
# 1676
{ return __builtin_nextafterf(__x, __y); } 
# 1679
constexpr long double nextafter(long double __x, long double __y) 
# 1680
{ return __builtin_nextafterl(__x, __y); } 
# 1684
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1686
nextafter(_Tp __x, _Up __y) 
# 1687
{ 
# 1688
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1689
return nextafter((__type)__x, (__type)__y); 
# 1690
} 
# 1695
constexpr float nexttoward(float __x, long double __y) 
# 1696
{ return __builtin_nexttowardf(__x, __y); } 
# 1699
constexpr long double nexttoward(long double __x, long double __y) 
# 1700
{ return __builtin_nexttowardl(__x, __y); } 
# 1704
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1707
nexttoward(_Tp __x, long double __y) 
# 1708
{ return __builtin_nexttoward(__x, __y); } 
# 1713
constexpr float remainder(float __x, float __y) 
# 1714
{ return __builtin_remainderf(__x, __y); } 
# 1717
constexpr long double remainder(long double __x, long double __y) 
# 1718
{ return __builtin_remainderl(__x, __y); } 
# 1722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1724
remainder(_Tp __x, _Up __y) 
# 1725
{ 
# 1726
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1727
return remainder((__type)__x, (__type)__y); 
# 1728
} 
# 1733
inline float remquo(float __x, float __y, int *__pquo) 
# 1734
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1737
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1738
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1742
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1744
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1745
{ 
# 1746
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1747
return remquo((__type)__x, (__type)__y, __pquo); 
# 1748
} 
# 1753
constexpr float rint(float __x) 
# 1754
{ return __builtin_rintf(__x); } 
# 1757
constexpr long double rint(long double __x) 
# 1758
{ return __builtin_rintl(__x); } 
# 1762
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1765
rint(_Tp __x) 
# 1766
{ return __builtin_rint(__x); } 
# 1771
constexpr float round(float __x) 
# 1772
{ return __builtin_roundf(__x); } 
# 1775
constexpr long double round(long double __x) 
# 1776
{ return __builtin_roundl(__x); } 
# 1780
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1783
round(_Tp __x) 
# 1784
{ return __builtin_round(__x); } 
# 1789
constexpr float scalbln(float __x, long __ex) 
# 1790
{ return __builtin_scalblnf(__x, __ex); } 
# 1793
constexpr long double scalbln(long double __x, long __ex) 
# 1794
{ return __builtin_scalblnl(__x, __ex); } 
# 1798
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1801
scalbln(_Tp __x, long __ex) 
# 1802
{ return __builtin_scalbln(__x, __ex); } 
# 1807
constexpr float scalbn(float __x, int __ex) 
# 1808
{ return __builtin_scalbnf(__x, __ex); } 
# 1811
constexpr long double scalbn(long double __x, int __ex) 
# 1812
{ return __builtin_scalbnl(__x, __ex); } 
# 1816
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1819
scalbn(_Tp __x, int __ex) 
# 1820
{ return __builtin_scalbn(__x, __ex); } 
# 1825
constexpr float tgamma(float __x) 
# 1826
{ return __builtin_tgammaf(__x); } 
# 1829
constexpr long double tgamma(long double __x) 
# 1830
{ return __builtin_tgammal(__x); } 
# 1834
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1837
tgamma(_Tp __x) 
# 1838
{ return __builtin_tgamma(__x); } 
# 1843
constexpr float trunc(float __x) 
# 1844
{ return __builtin_truncf(__x); } 
# 1847
constexpr long double trunc(long double __x) 
# 1848
{ return __builtin_truncl(__x); } 
# 1852
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1855
trunc(_Tp __x) 
# 1856
{ return __builtin_trunc(__x); } 
# 1860
}
# 1867
namespace std __attribute((__visibility__("default"))) { 
# 1874
template< class _Tp> inline _Tp 
# 1876
__hypot3(_Tp __x, _Tp __y, _Tp __z) 
# 1877
{ 
# 1878
__x = std::abs(__x); 
# 1879
__y = std::abs(__y); 
# 1880
__z = std::abs(__z); 
# 1881
if (_Tp __a = (__x < __y) ? (__y < __z) ? __z : __y : ((__x < __z) ? __z : __x)) { 
# 1882
return __a * std::sqrt((((__x / __a) * (__x / __a)) + ((__y / __a) * (__y / __a))) + ((__z / __a) * (__z / __a))); } else { 
# 1886
return {}; }  
# 1887
} 
# 1890
inline float hypot(float __x, float __y, float __z) 
# 1891
{ return std::__hypot3< float> (__x, __y, __z); } 
# 1894
inline double hypot(double __x, double __y, double __z) 
# 1895
{ return std::__hypot3< double> (__x, __y, __z); } 
# 1898
inline long double hypot(long double __x, long double __y, long double __z) 
# 1899
{ return std::__hypot3< long double> (__x, __y, __z); } 
# 1901
template< class _Tp, class _Up, class _Vp> typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1903
hypot(_Tp __x, _Up __y, _Vp __z) 
# 1904
{ 
# 1905
using __type = typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type; 
# 1906
return std::__hypot3< typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type> (__x, __y, __z); 
# 1907
} 
# 1909
}
# 33 "/usr/include/c++/7/bits/specfun.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/7/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_system_error(int) __attribute((__noreturn__)); 
# 101
void __throw_future_error(int) __attribute((__noreturn__)); 
# 105
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 108
}
# 37 "/usr/include/c++/7/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/7/ext/numeric_traits.h" 3
template< class _Value> 
# 55
struct __numeric_traits_integer { 
# 58
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0)); 
# 59
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0))); 
# 63
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 64
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 65
}; 
# 67
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 70
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 73
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 76
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 99 "/usr/include/c++/7/ext/numeric_traits.h" 3
template< class _Value> 
# 100
struct __numeric_traits_floating { 
# 103
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 106
static const bool __is_signed = true; 
# 107
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 108
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 109
}; 
# 111
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 114
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 117
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 120
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 123
template< class _Value> 
# 124
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 128
}; 
# 131
}
# 36 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> constexpr _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ return __builtin_addressof(__r); } 
# 51
}
# 42 "/usr/include/c++/7/type_traits" 3
namespace std { 
# 44
typedef unsigned short uint_least16_t; 
# 45
typedef unsigned uint_least32_t; 
# 46
}
# 52
namespace std __attribute((__visibility__("default"))) { 
# 68 "/usr/include/c++/7/type_traits" 3
template< class _Tp, _Tp __v> 
# 69
struct integral_constant { 
# 71
static constexpr inline _Tp value = (__v); 
# 72
typedef _Tp value_type; 
# 73
typedef integral_constant type; 
# 74
constexpr operator value_type() const noexcept { return value; } 
# 79
constexpr value_type operator()() const noexcept { return value; } 
# 81
}; 
# 83
template< class _Tp, _Tp __v> constexpr inline _Tp integral_constant< _Tp, __v> ::value; 
# 87
typedef integral_constant< bool, true>  true_type; 
# 90
typedef integral_constant< bool, false>  false_type; 
# 92
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 97
template< bool __v> using bool_constant = integral_constant< bool, __v> ; 
# 103
template< bool , class , class > struct conditional; 
# 106
template< class ...> struct __or_; 
# 110
template<> struct __or_< >  : public false_type { 
# 112
}; 
# 114
template< class _B1> 
# 115
struct __or_< _B1>  : public _B1 { 
# 117
}; 
# 119
template< class _B1, class _B2> 
# 120
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 122
}; 
# 124
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 125
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 127
}; 
# 129
template< class ...> struct __and_; 
# 133
template<> struct __and_< >  : public true_type { 
# 135
}; 
# 137
template< class _B1> 
# 138
struct __and_< _B1>  : public _B1 { 
# 140
}; 
# 142
template< class _B1, class _B2> 
# 143
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 145
}; 
# 147
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 148
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 150
}; 
# 152
template< class _Pp> 
# 153
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 155
}; 
# 161
template< class ..._Bn> 
# 162
struct conjunction : public __and_< _Bn...>  { 
# 164
}; 
# 166
template< class ..._Bn> 
# 167
struct disjunction : public __or_< _Bn...>  { 
# 169
}; 
# 171
template< class _Pp> 
# 172
struct negation : public __not_< _Pp>  { 
# 174
}; 
# 176
template< class ..._Bn> constexpr bool 
# 177
conjunction_v = (conjunction< _Bn...> ::value); 
# 179
template< class ..._Bn> constexpr bool 
# 180
disjunction_v = (disjunction< _Bn...> ::value); 
# 182
template< class _Pp> constexpr bool 
# 183
negation_v = (negation< _Pp> ::value); 
# 192 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 193
struct __success_type { 
# 194
typedef _Tp type; }; 
# 196
struct __failure_type { 
# 197
}; 
# 201
template< class > struct remove_cv; 
# 204
template< class > 
# 205
struct __is_void_helper : public false_type { 
# 206
}; 
# 209
template<> struct __is_void_helper< void>  : public true_type { 
# 210
}; 
# 213
template< class _Tp> 
# 214
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 216
}; 
# 218
template< class > 
# 219
struct __is_integral_helper : public false_type { 
# 220
}; 
# 223
template<> struct __is_integral_helper< bool>  : public true_type { 
# 224
}; 
# 227
template<> struct __is_integral_helper< char>  : public true_type { 
# 228
}; 
# 231
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 232
}; 
# 235
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 236
}; 
# 240
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 241
}; 
# 245
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 246
}; 
# 249
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 250
}; 
# 253
template<> struct __is_integral_helper< short>  : public true_type { 
# 254
}; 
# 257
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 258
}; 
# 261
template<> struct __is_integral_helper< int>  : public true_type { 
# 262
}; 
# 265
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 266
}; 
# 269
template<> struct __is_integral_helper< long>  : public true_type { 
# 270
}; 
# 273
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 274
}; 
# 277
template<> struct __is_integral_helper< long long>  : public true_type { 
# 278
}; 
# 281
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 282
}; 
# 324 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 325
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 327
}; 
# 329
template< class > 
# 330
struct __is_floating_point_helper : public false_type { 
# 331
}; 
# 334
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 335
}; 
# 338
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 339
}; 
# 342
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 343
}; 
# 352 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 353
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 355
}; 
# 358
template< class > 
# 359
struct is_array : public false_type { 
# 360
}; 
# 362
template< class _Tp, size_t _Size> 
# 363
struct is_array< _Tp [_Size]>  : public true_type { 
# 364
}; 
# 366
template< class _Tp> 
# 367
struct is_array< _Tp []>  : public true_type { 
# 368
}; 
# 370
template< class > 
# 371
struct __is_pointer_helper : public false_type { 
# 372
}; 
# 374
template< class _Tp> 
# 375
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 376
}; 
# 379
template< class _Tp> 
# 380
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 382
}; 
# 385
template< class > 
# 386
struct is_lvalue_reference : public false_type { 
# 387
}; 
# 389
template< class _Tp> 
# 390
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 391
}; 
# 394
template< class > 
# 395
struct is_rvalue_reference : public false_type { 
# 396
}; 
# 398
template< class _Tp> 
# 399
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 400
}; 
# 402
template< class > struct is_function; 
# 405
template< class > 
# 406
struct __is_member_object_pointer_helper : public false_type { 
# 407
}; 
# 409
template< class _Tp, class _Cp> 
# 410
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, !is_function< _Tp> ::value>  { 
# 411
}; 
# 414
template< class _Tp> 
# 415
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 418
}; 
# 420
template< class > 
# 421
struct __is_member_function_pointer_helper : public false_type { 
# 422
}; 
# 424
template< class _Tp, class _Cp> 
# 425
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, is_function< _Tp> ::value>  { 
# 426
}; 
# 429
template< class _Tp> 
# 430
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 433
}; 
# 436
template< class _Tp> 
# 437
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 439
}; 
# 442
template< class _Tp> 
# 443
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 451
}; 
# 454
template< class > 
# 455
struct is_function : public false_type { 
# 456
}; 
# 458
template< class _Res, class ..._ArgTypes, bool _NE> 
# 459
struct is_function< _Res (_ArgTypes ...) noexcept(_NE)>  : public true_type { 
# 460
}; 
# 462
template< class _Res, class ..._ArgTypes, bool _NE> 
# 463
struct is_function< _Res (_ArgTypes ...) & noexcept(_NE)>  : public true_type { 
# 464
}; 
# 466
template< class _Res, class ..._ArgTypes, bool _NE> 
# 467
struct is_function< _Res (_ArgTypes ...) && noexcept(_NE)>  : public true_type { 
# 468
}; 
# 470
template< class _Res, class ..._ArgTypes, bool _NE> 
# 471
struct is_function< _Res (_ArgTypes ..., ...) noexcept(_NE)>  : public true_type { 
# 472
}; 
# 474
template< class _Res, class ..._ArgTypes, bool _NE> 
# 475
struct is_function< _Res (_ArgTypes ..., ...) & noexcept(_NE)>  : public true_type { 
# 476
}; 
# 478
template< class _Res, class ..._ArgTypes, bool _NE> 
# 479
struct is_function< _Res (_ArgTypes ..., ...) && noexcept(_NE)>  : public true_type { 
# 480
}; 
# 482
template< class _Res, class ..._ArgTypes, bool _NE> 
# 483
struct is_function< _Res (_ArgTypes ...) const noexcept(_NE)>  : public true_type { 
# 484
}; 
# 486
template< class _Res, class ..._ArgTypes, bool _NE> 
# 487
struct is_function< _Res (_ArgTypes ...) const & noexcept(_NE)>  : public true_type { 
# 488
}; 
# 490
template< class _Res, class ..._ArgTypes, bool _NE> 
# 491
struct is_function< _Res (_ArgTypes ...) const && noexcept(_NE)>  : public true_type { 
# 492
}; 
# 494
template< class _Res, class ..._ArgTypes, bool _NE> 
# 495
struct is_function< _Res (_ArgTypes ..., ...) const noexcept(_NE)>  : public true_type { 
# 496
}; 
# 498
template< class _Res, class ..._ArgTypes, bool _NE> 
# 499
struct is_function< _Res (_ArgTypes ..., ...) const & noexcept(_NE)>  : public true_type { 
# 500
}; 
# 502
template< class _Res, class ..._ArgTypes, bool _NE> 
# 503
struct is_function< _Res (_ArgTypes ..., ...) const && noexcept(_NE)>  : public true_type { 
# 504
}; 
# 506
template< class _Res, class ..._ArgTypes, bool _NE> 
# 507
struct is_function< _Res (_ArgTypes ...) volatile noexcept(_NE)>  : public true_type { 
# 508
}; 
# 510
template< class _Res, class ..._ArgTypes, bool _NE> 
# 511
struct is_function< _Res (_ArgTypes ...) volatile & noexcept(_NE)>  : public true_type { 
# 512
}; 
# 514
template< class _Res, class ..._ArgTypes, bool _NE> 
# 515
struct is_function< _Res (_ArgTypes ...) volatile && noexcept(_NE)>  : public true_type { 
# 516
}; 
# 518
template< class _Res, class ..._ArgTypes, bool _NE> 
# 519
struct is_function< _Res (_ArgTypes ..., ...) volatile noexcept(_NE)>  : public true_type { 
# 520
}; 
# 522
template< class _Res, class ..._ArgTypes, bool _NE> 
# 523
struct is_function< _Res (_ArgTypes ..., ...) volatile & noexcept(_NE)>  : public true_type { 
# 524
}; 
# 526
template< class _Res, class ..._ArgTypes, bool _NE> 
# 527
struct is_function< _Res (_ArgTypes ..., ...) volatile && noexcept(_NE)>  : public true_type { 
# 528
}; 
# 530
template< class _Res, class ..._ArgTypes, bool _NE> 
# 531
struct is_function< _Res (_ArgTypes ...) const volatile noexcept(_NE)>  : public true_type { 
# 532
}; 
# 534
template< class _Res, class ..._ArgTypes, bool _NE> 
# 535
struct is_function< _Res (_ArgTypes ...) const volatile & noexcept(_NE)>  : public true_type { 
# 536
}; 
# 538
template< class _Res, class ..._ArgTypes, bool _NE> 
# 539
struct is_function< _Res (_ArgTypes ...) const volatile && noexcept(_NE)>  : public true_type { 
# 540
}; 
# 542
template< class _Res, class ..._ArgTypes, bool _NE> 
# 543
struct is_function< _Res (_ArgTypes ..., ...) const volatile noexcept(_NE)>  : public true_type { 
# 544
}; 
# 546
template< class _Res, class ..._ArgTypes, bool _NE> 
# 547
struct is_function< _Res (_ArgTypes ..., ...) const volatile & noexcept(_NE)>  : public true_type { 
# 548
}; 
# 550
template< class _Res, class ..._ArgTypes, bool _NE> 
# 551
struct is_function< _Res (_ArgTypes ..., ...) const volatile && noexcept(_NE)>  : public true_type { 
# 552
}; 
# 556
template< class > 
# 557
struct __is_null_pointer_helper : public false_type { 
# 558
}; 
# 561
template<> struct __is_null_pointer_helper< nullptr_t>  : public true_type { 
# 562
}; 
# 565
template< class _Tp> 
# 566
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 568
}; 
# 571
template< class _Tp> 
# 572
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 574
}; 
# 579
template< class _Tp> 
# 580
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 583
}; 
# 586
template< class _Tp> 
# 587
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 589
}; 
# 592
template< class _Tp> 
# 593
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 596
}; 
# 599
template< class _Tp> 
# 600
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 603
}; 
# 605
template< class > struct is_member_pointer; 
# 609
template< class _Tp> 
# 610
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 613
}; 
# 616
template< class _Tp> 
# 617
struct is_compound : public integral_constant< bool, !is_fundamental< _Tp> ::value>  { 
# 618
}; 
# 620
template< class _Tp> 
# 621
struct __is_member_pointer_helper : public false_type { 
# 622
}; 
# 624
template< class _Tp, class _Cp> 
# 625
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 626
}; 
# 629
template< class _Tp> 
# 630
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 632
}; 
# 636
template< class _Tp> 
# 637
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 639
}; 
# 641
template< class _Res, class ..._Args, bool _NE> 
# 642
struct __is_referenceable< _Res (_Args ...) noexcept(_NE)>  : public true_type { 
# 644
}; 
# 646
template< class _Res, class ..._Args, bool _NE> 
# 647
struct __is_referenceable< _Res (_Args ..., ...) noexcept(_NE)>  : public true_type { 
# 649
}; 
# 654
template< class > 
# 655
struct is_const : public false_type { 
# 656
}; 
# 658
template< class _Tp> 
# 659
struct is_const< const _Tp>  : public true_type { 
# 660
}; 
# 663
template< class > 
# 664
struct is_volatile : public false_type { 
# 665
}; 
# 667
template< class _Tp> 
# 668
struct is_volatile< volatile _Tp>  : public true_type { 
# 669
}; 
# 672
template< class _Tp> 
# 673
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 675
}; 
# 678
template< class _Tp> 
# 679
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 681
}; 
# 684
template< class _Tp> 
# 685
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 687
}; 
# 691
template< class _Tp> 
# 692
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 694
}; 
# 697
template< class _Tp> 
# 698
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 700
}; 
# 703
template< class _Tp> 
# 704
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 706
}; 
# 709
template< class _Tp> 
# 710
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 712
}; 
# 717
template< class _Tp> 
# 718
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 720
}; 
# 724
template< class _Tp> 
# 725
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 727
}; 
# 729
template< class _Tp, bool 
# 730
 = is_arithmetic< _Tp> ::value> 
# 731
struct __is_signed_helper : public false_type { 
# 732
}; 
# 734
template< class _Tp> 
# 735
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 737
}; 
# 740
template< class _Tp> 
# 741
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 743
}; 
# 746
template< class _Tp> 
# 747
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 749
}; 
# 754
template< class > struct add_rvalue_reference; 
# 761
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type declval() noexcept; 
# 764
template< class , unsigned  = 0U> struct extent; 
# 767
template< class > struct remove_all_extents; 
# 770
template< class _Tp> 
# 771
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 773
}; 
# 775
template< class _Tp> 
# 776
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 778
}; 
# 785
struct __do_is_destructible_impl { 
# 787
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 790
template< class > static false_type __test(...); 
# 792
}; 
# 794
template< class _Tp> 
# 795
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 798
typedef __decltype((__test< _Tp> (0))) type; 
# 799
}; 
# 801
template< class _Tp, bool 
# 802
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 805
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 808
template< class _Tp> 
# 809
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 812
}; 
# 814
template< class _Tp> 
# 815
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 816
}; 
# 818
template< class _Tp> 
# 819
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 820
}; 
# 823
template< class _Tp> 
# 824
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 826
}; 
# 832
struct __do_is_nt_destructible_impl { 
# 834
template< class _Tp> static integral_constant< bool, noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 838
template< class > static false_type __test(...); 
# 840
}; 
# 842
template< class _Tp> 
# 843
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 846
typedef __decltype((__test< _Tp> (0))) type; 
# 847
}; 
# 849
template< class _Tp, bool 
# 850
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 853
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 856
template< class _Tp> 
# 857
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 860
}; 
# 862
template< class _Tp> 
# 863
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 864
}; 
# 866
template< class _Tp> 
# 867
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 868
}; 
# 871
template< class _Tp> 
# 872
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 874
}; 
# 876
struct __do_is_default_constructible_impl { 
# 878
template< class _Tp, class  = __decltype((_Tp()))> static true_type __test(int); 
# 881
template< class > static false_type __test(...); 
# 883
}; 
# 885
template< class _Tp> 
# 886
struct __is_default_constructible_impl : public __do_is_default_constructible_impl { 
# 889
typedef __decltype((__test< _Tp> (0))) type; 
# 890
}; 
# 892
template< class _Tp> 
# 893
struct __is_default_constructible_atom : public __and_< __not_< is_void< _Tp> > , __is_default_constructible_impl< _Tp> >  { 
# 896
}; 
# 898
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_default_constructible_safe; 
# 906
template< class _Tp> 
# 907
struct __is_default_constructible_safe< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_default_constructible_atom< typename remove_all_extents< _Tp> ::type> >  { 
# 911
}; 
# 913
template< class _Tp> 
# 914
struct __is_default_constructible_safe< _Tp, false>  : public __is_default_constructible_atom< _Tp> ::type { 
# 916
}; 
# 919
template< class _Tp> 
# 920
struct is_default_constructible : public __is_default_constructible_safe< _Tp> ::type { 
# 922
}; 
# 936 "/usr/include/c++/7/type_traits" 3
struct __do_is_static_castable_impl { 
# 938
template< class _From, class _To, class 
# 939
 = __decltype((static_cast< _To>(declval< _From> ())))> static true_type 
# 938
__test(int); 
# 942
template< class , class > static false_type __test(...); 
# 944
}; 
# 946
template< class _From, class _To> 
# 947
struct __is_static_castable_impl : public __do_is_static_castable_impl { 
# 950
typedef __decltype((__test< _From, _To> (0))) type; 
# 951
}; 
# 953
template< class _From, class _To> 
# 954
struct __is_static_castable_safe : public __is_static_castable_impl< _From, _To> ::type { 
# 956
}; 
# 959
template< class _From, class _To> 
# 960
struct __is_static_castable : public integral_constant< bool, __is_static_castable_safe< _From, _To> ::value>  { 
# 963
}; 
# 970
struct __do_is_direct_constructible_impl { 
# 972
template< class _Tp, class _Arg, class 
# 973
 = __decltype((::new _Tp(declval< _Arg> ())))> static true_type 
# 972
__test(int); 
# 976
template< class , class > static false_type __test(...); 
# 978
}; 
# 980
template< class _Tp, class _Arg> 
# 981
struct __is_direct_constructible_impl : public __do_is_direct_constructible_impl { 
# 984
typedef __decltype((__test< _Tp, _Arg> (0))) type; 
# 985
}; 
# 987
template< class _Tp, class _Arg> 
# 988
struct __is_direct_constructible_new_safe : public __and_< is_destructible< _Tp> , __is_direct_constructible_impl< _Tp, _Arg> >  { 
# 991
}; 
# 993
template< class , class > struct is_same; 
# 996
template< class , class > struct is_base_of; 
# 999
template< class > struct remove_reference; 
# 1002
template< class _From, class _To, bool 
# 1003
 = __not_< __or_< is_void< _From> , is_function< _From> > > ::value> struct __is_base_to_derived_ref; 
# 1007
template< class _Tp, class ..._Args> struct is_constructible; 
# 1012
template< class _From, class _To> 
# 1013
struct __is_base_to_derived_ref< _From, _To, true>  { 
# 1016
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 1018
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 1021
typedef __and_< __not_< is_same< __src_t, __dst_t> > , is_base_of< __src_t, __dst_t> , __not_< is_constructible< __dst_t, _From> > >  type; 
# 1022
static constexpr inline bool value = (type::value); 
# 1023
}; 
# 1025
template< class _From, class _To> 
# 1026
struct __is_base_to_derived_ref< _From, _To, false>  : public false_type { 
# 1028
}; 
# 1030
template< class _From, class _To, bool 
# 1031
 = __and_< is_lvalue_reference< _From> , is_rvalue_reference< _To> > ::value> struct __is_lvalue_to_rvalue_ref; 
# 1037
template< class _From, class _To> 
# 1038
struct __is_lvalue_to_rvalue_ref< _From, _To, true>  { 
# 1041
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 1043
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 1046
typedef __and_< __not_< is_function< __src_t> > , __or_< is_same< __src_t, __dst_t> , is_base_of< __dst_t, __src_t> > >  type; 
# 1047
static constexpr inline bool value = (type::value); 
# 1048
}; 
# 1050
template< class _From, class _To> 
# 1051
struct __is_lvalue_to_rvalue_ref< _From, _To, false>  : public false_type { 
# 1053
}; 
# 1061
template< class _Tp, class _Arg> 
# 1062
struct __is_direct_constructible_ref_cast : public __and_< __is_static_castable< _Arg, _Tp> , __not_< __or_< __is_base_to_derived_ref< _Arg, _Tp> , __is_lvalue_to_rvalue_ref< _Arg, _Tp> > > >  { 
# 1067
}; 
# 1069
template< class _Tp, class _Arg> 
# 1070
struct __is_direct_constructible_new : public conditional< is_reference< _Tp> ::value, __is_direct_constructible_ref_cast< _Tp, _Arg> , __is_direct_constructible_new_safe< _Tp, _Arg> > ::type { 
# 1075
}; 
# 1077
template< class _Tp, class _Arg> 
# 1078
struct __is_direct_constructible : public __is_direct_constructible_new< _Tp, _Arg> ::type { 
# 1080
}; 
# 1087
struct __do_is_nary_constructible_impl { 
# 1089
template< class _Tp, class ..._Args, class 
# 1090
 = __decltype((_Tp(declval< _Args> ()...)))> static true_type 
# 1089
__test(int); 
# 1093
template< class , class ...> static false_type __test(...); 
# 1095
}; 
# 1097
template< class _Tp, class ..._Args> 
# 1098
struct __is_nary_constructible_impl : public __do_is_nary_constructible_impl { 
# 1101
typedef __decltype((__test< _Tp, _Args...> (0))) type; 
# 1102
}; 
# 1104
template< class _Tp, class ..._Args> 
# 1105
struct __is_nary_constructible : public __is_nary_constructible_impl< _Tp, _Args...> ::type { 
# 1108
static_assert((sizeof...(_Args) > (1)), "Only useful for > 1 arguments");
# 1110
}; 
# 1112
template< class _Tp, class ..._Args> 
# 1113
struct __is_constructible_impl : public __is_nary_constructible< _Tp, _Args...>  { 
# 1115
}; 
# 1117
template< class _Tp, class _Arg> 
# 1118
struct __is_constructible_impl< _Tp, _Arg>  : public __is_direct_constructible< _Tp, _Arg>  { 
# 1120
}; 
# 1122
template< class _Tp> 
# 1123
struct __is_constructible_impl< _Tp>  : public is_default_constructible< _Tp>  { 
# 1125
}; 
# 1128
template< class _Tp, class ..._Args> 
# 1129
struct is_constructible : public __is_constructible_impl< _Tp, _Args...> ::type { 
# 1131
}; 
# 1133
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 1136
template< class _Tp> 
# 1137
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1138
}; 
# 1140
template< class _Tp> 
# 1141
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 1143
}; 
# 1146
template< class _Tp> 
# 1147
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 1149
}; 
# 1151
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 1154
template< class _Tp> 
# 1155
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 1156
}; 
# 1158
template< class _Tp> 
# 1159
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 1161
}; 
# 1164
template< class _Tp> 
# 1165
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1167
}; 
# 1169
template< class _Tp> 
# 1170
struct __is_nt_default_constructible_atom : public integral_constant< bool, noexcept(_Tp())>  { 
# 1172
}; 
# 1174
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_nt_default_constructible_impl; 
# 1177
template< class _Tp> 
# 1178
struct __is_nt_default_constructible_impl< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_nt_default_constructible_atom< typename remove_all_extents< _Tp> ::type> >  { 
# 1182
}; 
# 1184
template< class _Tp> 
# 1185
struct __is_nt_default_constructible_impl< _Tp, false>  : public __is_nt_default_constructible_atom< _Tp>  { 
# 1187
}; 
# 1190
template< class _Tp> 
# 1191
struct is_nothrow_default_constructible : public __and_< is_default_constructible< _Tp> , __is_nt_default_constructible_impl< _Tp> >  { 
# 1194
}; 
# 1196
template< class _Tp, class ..._Args> 
# 1197
struct __is_nt_constructible_impl : public integral_constant< bool, noexcept((_Tp(declval< _Args> ()...)))>  { 
# 1199
}; 
# 1201
template< class _Tp, class _Arg> 
# 1202
struct __is_nt_constructible_impl< _Tp, _Arg>  : public integral_constant< bool, noexcept((static_cast< _Tp>(declval< _Arg> ())))>  { 
# 1205
}; 
# 1207
template< class _Tp> 
# 1208
struct __is_nt_constructible_impl< _Tp>  : public is_nothrow_default_constructible< _Tp>  { 
# 1210
}; 
# 1213
template< class _Tp, class ..._Args> 
# 1214
struct is_nothrow_constructible : public __and_< is_constructible< _Tp, _Args...> , __is_nt_constructible_impl< _Tp, _Args...> >  { 
# 1217
}; 
# 1219
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1222
template< class _Tp> 
# 1223
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1224
}; 
# 1226
template< class _Tp> 
# 1227
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 1229
}; 
# 1232
template< class _Tp> 
# 1233
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 1235
}; 
# 1237
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1240
template< class _Tp> 
# 1241
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1242
}; 
# 1244
template< class _Tp> 
# 1245
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 1247
}; 
# 1250
template< class _Tp> 
# 1251
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1253
}; 
# 1255
template< class _Tp, class _Up> 
# 1256
class __is_assignable_helper { 
# 1258
template< class _Tp1, class _Up1, class 
# 1259
 = __decltype((declval< _Tp1> () = declval< _Up1> ()))> static true_type 
# 1258
__test(int); 
# 1263
template< class , class > static false_type __test(...); 
# 1268
public: typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 1269
}; 
# 1272
template< class _Tp, class _Up> 
# 1273
struct is_assignable : public __is_assignable_helper< _Tp, _Up> ::type { 
# 1275
}; 
# 1277
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1280
template< class _Tp> 
# 1281
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1282
}; 
# 1284
template< class _Tp> 
# 1285
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1287
}; 
# 1290
template< class _Tp> 
# 1291
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1293
}; 
# 1295
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1298
template< class _Tp> 
# 1299
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1300
}; 
# 1302
template< class _Tp> 
# 1303
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1305
}; 
# 1308
template< class _Tp> 
# 1309
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1311
}; 
# 1313
template< class _Tp, class _Up> 
# 1314
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1316
}; 
# 1319
template< class _Tp, class _Up> 
# 1320
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> >  { 
# 1323
}; 
# 1325
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1328
template< class _Tp> 
# 1329
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1330
}; 
# 1332
template< class _Tp> 
# 1333
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1335
}; 
# 1338
template< class _Tp> 
# 1339
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1341
}; 
# 1343
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1346
template< class _Tp> 
# 1347
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1348
}; 
# 1350
template< class _Tp> 
# 1351
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1353
}; 
# 1356
template< class _Tp> 
# 1357
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1359
}; 
# 1362
template< class _Tp, class ..._Args> 
# 1363
struct is_trivially_constructible : public __and_< is_constructible< _Tp, _Args...> , integral_constant< bool, __is_trivially_constructible(_Tp, _Args...)> >  { 
# 1366
}; 
# 1369
template< class _Tp> 
# 1370
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1372
}; 
# 1374
struct __do_is_implicitly_default_constructible_impl { 
# 1376
template< class _Tp> static void __helper(const _Tp &); 
# 1379
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1383
static false_type __test(...); 
# 1384
}; 
# 1386
template< class _Tp> 
# 1387
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1390
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1391
}; 
# 1393
template< class _Tp> 
# 1394
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1396
}; 
# 1398
template< class _Tp> 
# 1399
struct __is_implicitly_default_constructible : public __and_< is_default_constructible< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1402
}; 
# 1405
template< class _Tp> 
# 1406
struct is_trivially_copy_constructible : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1410
}; 
# 1413
template< class _Tp> 
# 1414
struct is_trivially_move_constructible : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1418
}; 
# 1421
template< class _Tp, class _Up> 
# 1422
struct is_trivially_assignable : public __and_< is_assignable< _Tp, _Up> , integral_constant< bool, __is_trivially_assignable(_Tp, _Up)> >  { 
# 1426
}; 
# 1429
template< class _Tp> 
# 1430
struct is_trivially_copy_assignable : public __and_< is_copy_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, const _Tp &)> >  { 
# 1434
}; 
# 1437
template< class _Tp> 
# 1438
struct is_trivially_move_assignable : public __and_< is_move_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, _Tp &&)> >  { 
# 1442
}; 
# 1445
template< class _Tp> 
# 1446
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , integral_constant< bool, __has_trivial_destructor(_Tp)> >  { 
# 1449
}; 
# 1453
template< class _Tp> 
# 1454
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1456
}; 
# 1462
template< class _Tp> 
# 1463
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1464
}; 
# 1467
template< class > 
# 1468
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1469
}; 
# 1471
template< class _Tp, size_t _Size> 
# 1472
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1473
}; 
# 1475
template< class _Tp> 
# 1476
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1477
}; 
# 1480
template< class , unsigned _Uint> 
# 1481
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1482
}; 
# 1484
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1485
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1489
}; 
# 1491
template< class _Tp, unsigned _Uint> 
# 1492
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1496
}; 
# 1502
template< class , class > 
# 1503
struct is_same : public false_type { 
# 1504
}; 
# 1506
template< class _Tp> 
# 1507
struct is_same< _Tp, _Tp>  : public true_type { 
# 1508
}; 
# 1511
template< class _Base, class _Derived> 
# 1512
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1514
}; 
# 1516
template< class _From, class _To, bool 
# 1517
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1519
struct __is_convertible_helper { 
# 1520
typedef typename is_void< _To> ::type type; }; 
# 1522
template< class _From, class _To> 
# 1523
class __is_convertible_helper< _From, _To, false>  { 
# 1525
template< class _To1> static void __test_aux(_To1); 
# 1528
template< class _From1, class _To1, class 
# 1529
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1528
__test(int); 
# 1533
template< class , class > static false_type __test(...); 
# 1538
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1539
}; 
# 1543
template< class _From, class _To> 
# 1544
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1546
}; 
# 1552
template< class _Tp> 
# 1553
struct remove_const { 
# 1554
typedef _Tp type; }; 
# 1556
template< class _Tp> 
# 1557
struct remove_const< const _Tp>  { 
# 1558
typedef _Tp type; }; 
# 1561
template< class _Tp> 
# 1562
struct remove_volatile { 
# 1563
typedef _Tp type; }; 
# 1565
template< class _Tp> 
# 1566
struct remove_volatile< volatile _Tp>  { 
# 1567
typedef _Tp type; }; 
# 1570
template< class _Tp> 
# 1571
struct remove_cv { 
# 1574
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1575
}; 
# 1578
template< class _Tp> 
# 1579
struct add_const { 
# 1580
typedef const _Tp type; }; 
# 1583
template< class _Tp> 
# 1584
struct add_volatile { 
# 1585
typedef volatile _Tp type; }; 
# 1588
template< class _Tp> 
# 1589
struct add_cv { 
# 1592
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1593
}; 
# 1600
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1604
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1608
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1612
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1616
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1620
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1627
template< class _Tp> 
# 1628
struct remove_reference { 
# 1629
typedef _Tp type; }; 
# 1631
template< class _Tp> 
# 1632
struct remove_reference< _Tp &>  { 
# 1633
typedef _Tp type; }; 
# 1635
template< class _Tp> 
# 1636
struct remove_reference< _Tp &&>  { 
# 1637
typedef _Tp type; }; 
# 1639
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1640
struct __add_lvalue_reference_helper { 
# 1641
typedef _Tp type; }; 
# 1643
template< class _Tp> 
# 1644
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1645
typedef _Tp &type; }; 
# 1648
template< class _Tp> 
# 1649
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1651
}; 
# 1653
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1654
struct __add_rvalue_reference_helper { 
# 1655
typedef _Tp type; }; 
# 1657
template< class _Tp> 
# 1658
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1659
typedef _Tp &&type; }; 
# 1662
template< class _Tp> 
# 1663
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1665
}; 
# 1669
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1673
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1677
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1684
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1687
template< class _Unqualified> 
# 1688
struct __cv_selector< _Unqualified, false, false>  { 
# 1689
typedef _Unqualified __type; }; 
# 1691
template< class _Unqualified> 
# 1692
struct __cv_selector< _Unqualified, false, true>  { 
# 1693
typedef volatile _Unqualified __type; }; 
# 1695
template< class _Unqualified> 
# 1696
struct __cv_selector< _Unqualified, true, false>  { 
# 1697
typedef const _Unqualified __type; }; 
# 1699
template< class _Unqualified> 
# 1700
struct __cv_selector< _Unqualified, true, true>  { 
# 1701
typedef const volatile _Unqualified __type; }; 
# 1703
template< class _Qualified, class _Unqualified, bool 
# 1704
_IsConst = is_const< _Qualified> ::value, bool 
# 1705
_IsVol = is_volatile< _Qualified> ::value> 
# 1706
class __match_cv_qualifiers { 
# 1708
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1711
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1712
}; 
# 1715
template< class _Tp> 
# 1716
struct __make_unsigned { 
# 1717
typedef _Tp __type; }; 
# 1720
template<> struct __make_unsigned< char>  { 
# 1721
typedef unsigned char __type; }; 
# 1724
template<> struct __make_unsigned< signed char>  { 
# 1725
typedef unsigned char __type; }; 
# 1728
template<> struct __make_unsigned< short>  { 
# 1729
typedef unsigned short __type; }; 
# 1732
template<> struct __make_unsigned< int>  { 
# 1733
typedef unsigned __type; }; 
# 1736
template<> struct __make_unsigned< long>  { 
# 1737
typedef unsigned long __type; }; 
# 1740
template<> struct __make_unsigned< long long>  { 
# 1741
typedef unsigned long long __type; }; 
# 1745
template<> struct __make_unsigned< wchar_t>  : public std::__make_unsigned< int>  { 
# 1746
}; 
# 1771 "/usr/include/c++/7/type_traits" 3
template< class _Tp, bool 
# 1772
_IsInt = is_integral< _Tp> ::value, bool 
# 1773
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1776
template< class _Tp> 
# 1777
class __make_unsigned_selector< _Tp, true, false>  { 
# 1779
typedef __make_unsigned< typename remove_cv< _Tp> ::type>  __unsignedt; 
# 1780
typedef typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type __unsigned_type; 
# 1781
typedef __match_cv_qualifiers< _Tp, __unsigned_type>  __cv_unsigned; 
# 1784
public: typedef typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type __type; 
# 1785
}; 
# 1787
template< class _Tp> 
# 1788
class __make_unsigned_selector< _Tp, false, true>  { 
# 1791
typedef unsigned char __smallest; 
# 1792
static const bool __b0 = (sizeof(_Tp) <= sizeof(__smallest)); 
# 1793
static const bool __b1 = (sizeof(_Tp) <= sizeof(unsigned short)); 
# 1794
static const bool __b2 = (sizeof(_Tp) <= sizeof(unsigned)); 
# 1795
static const bool __b3 = (sizeof(_Tp) <= sizeof(unsigned long)); 
# 1796
typedef conditional< __b3, unsigned long, unsigned long long>  __cond3; 
# 1797
typedef typename conditional< __b3, unsigned long, unsigned long long> ::type __cond3_type; 
# 1798
typedef conditional< __b2, unsigned, __cond3_type>  __cond2; 
# 1799
typedef typename conditional< __b2, unsigned, __cond3_type> ::type __cond2_type; 
# 1800
typedef conditional< __b1, unsigned short, __cond2_type>  __cond1; 
# 1801
typedef typename conditional< __b1, unsigned short, __cond2_type> ::type __cond1_type; 
# 1804
typedef typename conditional< __b0, unsigned char, __cond1_type> ::type __unsigned_type; 
# 1805
typedef __match_cv_qualifiers< _Tp, __unsigned_type>  __cv_unsigned; 
# 1808
public: typedef typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type __type; 
# 1809
}; 
# 1815
template< class _Tp> 
# 1816
struct make_unsigned { 
# 1817
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1821
template<> struct make_unsigned< bool> ; 
# 1825
template< class _Tp> 
# 1826
struct __make_signed { 
# 1827
typedef _Tp __type; }; 
# 1830
template<> struct __make_signed< char>  { 
# 1831
typedef signed char __type; }; 
# 1834
template<> struct __make_signed< unsigned char>  { 
# 1835
typedef signed char __type; }; 
# 1838
template<> struct __make_signed< unsigned short>  { 
# 1839
typedef signed short __type; }; 
# 1842
template<> struct __make_signed< unsigned>  { 
# 1843
typedef signed int __type; }; 
# 1846
template<> struct __make_signed< unsigned long>  { 
# 1847
typedef signed long __type; }; 
# 1850
template<> struct __make_signed< unsigned long long>  { 
# 1851
typedef signed long long __type; }; 
# 1861 "/usr/include/c++/7/type_traits" 3
template<> struct __make_signed< char16_t>  : public std::__make_signed< unsigned short>  { 
# 1862
}; 
# 1864
template<> struct __make_signed< char32_t>  : public std::__make_signed< unsigned>  { 
# 1865
}; 
# 1890 "/usr/include/c++/7/type_traits" 3
template< class _Tp, bool 
# 1891
_IsInt = is_integral< _Tp> ::value, bool 
# 1892
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1895
template< class _Tp> 
# 1896
class __make_signed_selector< _Tp, true, false>  { 
# 1898
typedef __make_signed< typename remove_cv< _Tp> ::type>  __signedt; 
# 1899
typedef typename __make_signed< typename remove_cv< _Tp> ::type> ::__type __signed_type; 
# 1900
typedef __match_cv_qualifiers< _Tp, __signed_type>  __cv_signed; 
# 1903
public: typedef typename __match_cv_qualifiers< _Tp, __signed_type> ::__type __type; 
# 1904
}; 
# 1906
template< class _Tp> 
# 1907
class __make_signed_selector< _Tp, false, true>  { 
# 1909
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1912
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1913
}; 
# 1919
template< class _Tp> 
# 1920
struct make_signed { 
# 1921
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1925
template<> struct make_signed< bool> ; 
# 1929
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1933
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1940
template< class _Tp> 
# 1941
struct remove_extent { 
# 1942
typedef _Tp type; }; 
# 1944
template< class _Tp, size_t _Size> 
# 1945
struct remove_extent< _Tp [_Size]>  { 
# 1946
typedef _Tp type; }; 
# 1948
template< class _Tp> 
# 1949
struct remove_extent< _Tp []>  { 
# 1950
typedef _Tp type; }; 
# 1953
template< class _Tp> 
# 1954
struct remove_all_extents { 
# 1955
typedef _Tp type; }; 
# 1957
template< class _Tp, size_t _Size> 
# 1958
struct remove_all_extents< _Tp [_Size]>  { 
# 1959
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1961
template< class _Tp> 
# 1962
struct remove_all_extents< _Tp []>  { 
# 1963
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1967
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 1971
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 1977
template< class _Tp, class > 
# 1978
struct __remove_pointer_helper { 
# 1979
typedef _Tp type; }; 
# 1981
template< class _Tp, class _Up> 
# 1982
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1983
typedef _Up type; }; 
# 1986
template< class _Tp> 
# 1987
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1989
}; 
# 1992
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1994
struct __add_pointer_helper { 
# 1995
typedef _Tp type; }; 
# 1997
template< class _Tp> 
# 1998
struct __add_pointer_helper< _Tp, true>  { 
# 1999
typedef typename remove_reference< _Tp> ::type *type; }; 
# 2001
template< class _Tp> 
# 2002
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 2004
}; 
# 2008
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 2012
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 2016
template< size_t _Len> 
# 2017
struct __aligned_storage_msa { 
# 2019
union __type { 
# 2021
unsigned char __data[_Len]; 
# 2022
struct __attribute((__aligned__)) { } __align; 
# 2023
}; 
# 2024
}; 
# 2036 "/usr/include/c++/7/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 2038
struct aligned_storage { 
# 2040
union type { 
# 2042
unsigned char __data[_Len]; 
# 2043
struct __attribute((__aligned__(_Align))) { } __align; 
# 2044
}; 
# 2045
}; 
# 2047
template< class ..._Types> 
# 2048
struct __strictest_alignment { 
# 2050
static const size_t _S_alignment = (0); 
# 2051
static const size_t _S_size = (0); 
# 2052
}; 
# 2054
template< class _Tp, class ..._Types> 
# 2055
struct __strictest_alignment< _Tp, _Types...>  { 
# 2057
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2060
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2063
}; 
# 2075 "/usr/include/c++/7/type_traits" 3
template< size_t _Len, class ..._Types> 
# 2076
struct aligned_union { 
# 2079
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2081
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2082
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2086
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2088
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2089
}; 
# 2091
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 2096
template< class _Up, bool 
# 2097
_IsArray = is_array< _Up> ::value, bool 
# 2098
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2102
template< class _Up> 
# 2103
struct __decay_selector< _Up, false, false>  { 
# 2104
typedef typename remove_cv< _Up> ::type __type; }; 
# 2106
template< class _Up> 
# 2107
struct __decay_selector< _Up, true, false>  { 
# 2108
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2110
template< class _Up> 
# 2111
struct __decay_selector< _Up, false, true>  { 
# 2112
typedef typename add_pointer< _Up> ::type __type; }; 
# 2115
template< class _Tp> 
# 2116
class decay { 
# 2118
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2121
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2122
}; 
# 2124
template< class _Tp> class reference_wrapper; 
# 2128
template< class _Tp> 
# 2129
struct __strip_reference_wrapper { 
# 2131
typedef _Tp __type; 
# 2132
}; 
# 2134
template< class _Tp> 
# 2135
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2137
typedef _Tp &__type; 
# 2138
}; 
# 2140
template< class _Tp> 
# 2141
struct __decay_and_strip { 
# 2144
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 2145
}; 
# 2150
template< bool , class _Tp = void> 
# 2151
struct enable_if { 
# 2152
}; 
# 2155
template< class _Tp> 
# 2156
struct enable_if< true, _Tp>  { 
# 2157
typedef _Tp type; }; 
# 2159
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 2164
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2165
struct conditional { 
# 2166
typedef _Iftrue type; }; 
# 2169
template< class _Iftrue, class _Iffalse> 
# 2170
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2171
typedef _Iffalse type; }; 
# 2174
template< class ..._Tp> struct common_type; 
# 2179
struct __do_common_type_impl { 
# 2181
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 2186
template< class , class > static __failure_type _S_test(...); 
# 2188
}; 
# 2190
template< class _Tp, class _Up> 
# 2191
struct __common_type_impl : private __do_common_type_impl { 
# 2194
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 2195
}; 
# 2197
struct __do_member_type_wrapper { 
# 2199
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 2202
template< class > static __failure_type _S_test(...); 
# 2204
}; 
# 2206
template< class _Tp> 
# 2207
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 2210
typedef __decltype((_S_test< _Tp> (0))) type; 
# 2211
}; 
# 2213
template< class _CTp, class ..._Args> 
# 2214
struct __expanded_common_type_wrapper { 
# 2216
typedef common_type< typename _CTp::type, _Args...>  type; 
# 2217
}; 
# 2219
template< class ..._Args> 
# 2220
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 2221
typedef __failure_type type; }; 
# 2223
template< class _Tp> 
# 2224
struct common_type< _Tp>  { 
# 2225
typedef typename decay< _Tp> ::type type; }; 
# 2227
template< class _Tp, class _Up> 
# 2228
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 2230
}; 
# 2232
template< class _Tp, class _Up, class ..._Vp> 
# 2233
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< std::common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2236
}; 
# 2239
template< class _Tp> 
# 2240
struct underlying_type { 
# 2242
typedef __underlying_type(_Tp) type; 
# 2243
}; 
# 2245
template< class _Tp> 
# 2246
struct __declval_protector { 
# 2248
static const bool __stop = false; 
# 2249
static typename add_rvalue_reference< _Tp> ::type __delegate(); 
# 2250
}; 
# 2252
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type 
# 2254
declval() noexcept 
# 2255
{ 
# 2256
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2258
return __declval_protector< _Tp> ::__delegate(); 
# 2259
} 
# 2262
template< class _Signature> class result_of; 
# 2269
struct __invoke_memfun_ref { }; 
# 2270
struct __invoke_memfun_deref { }; 
# 2271
struct __invoke_memobj_ref { }; 
# 2272
struct __invoke_memobj_deref { }; 
# 2273
struct __invoke_other { }; 
# 2276
template< class _Tp, class _Tag> 
# 2277
struct __result_of_success : public __success_type< _Tp>  { 
# 2278
using __invoke_type = _Tag; }; 
# 2281
struct __result_of_memfun_ref_impl { 
# 2283
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2288
template< class ...> static __failure_type _S_test(...); 
# 2290
}; 
# 2292
template< class _MemPtr, class _Arg, class ..._Args> 
# 2293
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2296
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2297
}; 
# 2300
struct __result_of_memfun_deref_impl { 
# 2302
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2307
template< class ...> static __failure_type _S_test(...); 
# 2309
}; 
# 2311
template< class _MemPtr, class _Arg, class ..._Args> 
# 2312
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2315
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2316
}; 
# 2319
struct __result_of_memobj_ref_impl { 
# 2321
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2326
template< class , class > static __failure_type _S_test(...); 
# 2328
}; 
# 2330
template< class _MemPtr, class _Arg> 
# 2331
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2334
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2335
}; 
# 2338
struct __result_of_memobj_deref_impl { 
# 2340
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2345
template< class , class > static __failure_type _S_test(...); 
# 2347
}; 
# 2349
template< class _MemPtr, class _Arg> 
# 2350
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2353
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2354
}; 
# 2356
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2359
template< class _Res, class _Class, class _Arg> 
# 2360
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2363
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2364
typedef _Res (_Class::*_MemPtr); 
# 2369
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2370
}; 
# 2372
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2375
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2376
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2379
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2380
typedef _Res (_Class::*_MemPtr); 
# 2385
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2386
}; 
# 2393
template< class _Tp, class _Up = typename decay< _Tp> ::type> 
# 2394
struct __inv_unwrap { 
# 2396
using type = _Tp; 
# 2397
}; 
# 2399
template< class _Tp, class _Up> 
# 2400
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2402
using type = _Up &; 
# 2403
}; 
# 2405
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2406
struct __result_of_impl { 
# 2408
typedef __failure_type type; 
# 2409
}; 
# 2411
template< class _MemPtr, class _Arg> 
# 2412
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type>  { 
# 2415
}; 
# 2417
template< class _MemPtr, class _Arg, class ..._Args> 
# 2418
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2421
}; 
# 2424
struct __result_of_other_impl { 
# 2426
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2431
template< class ...> static __failure_type _S_test(...); 
# 2433
}; 
# 2435
template< class _Functor, class ..._ArgTypes> 
# 2436
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2439
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2440
}; 
# 2443
template< class _Functor, class ..._ArgTypes> 
# 2444
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2454
}; 
# 2456
template< class _Functor, class ..._ArgTypes> 
# 2457
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2459
}; 
# 2463
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2467
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2471
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2475
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2479
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2483
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2487
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2491
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2496
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2500
template< class ...> using __void_t = void; 
# 2505
template< class ...> using void_t = void; 
# 2509
template< class _Default, class _AlwaysVoid, 
# 2510
template< class ...>  class _Op, class ..._Args> 
# 2511
struct __detector { 
# 2513
using value_t = false_type; 
# 2514
using type = _Default; 
# 2515
}; 
# 2518
template< class _Default, template< class ...>  class _Op, class ...
# 2519
_Args> 
# 2520
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2522
using value_t = true_type; 
# 2523
using type = _Op< _Args...> ; 
# 2524
}; 
# 2527
template< class _Default, template< class ...>  class _Op, class ...
# 2528
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2532
template< class _Default, template< class ...>  class _Op, class ...
# 2533
_Args> using __detected_or_t = typename __detector< _Default, void, _Op, _Args...> ::type; 
# 2553 "/usr/include/c++/7/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2556
template< class _Tp> struct __is_nothrow_swappable; 
# 2559
template< class ..._Elements> class tuple; 
# 2562
template< class > 
# 2563
struct __is_tuple_like_impl : public false_type { 
# 2564
}; 
# 2566
template< class ..._Tps> 
# 2567
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2568
}; 
# 2571
template< class _Tp> 
# 2572
struct __is_tuple_like : public __is_tuple_like_impl< typename remove_cv< typename remove_reference< _Tp> ::type> ::type> ::type { 
# 2575
}; 
# 2577
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2586
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2592
namespace __swappable_details { 
# 2593
using std::swap;
# 2595
struct __do_is_swappable_impl { 
# 2597
template< class _Tp, class 
# 2598
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2597
__test(int); 
# 2601
template< class > static false_type __test(...); 
# 2603
}; 
# 2605
struct __do_is_nothrow_swappable_impl { 
# 2607
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2612
template< class > static false_type __test(...); 
# 2614
}; 
# 2616
}
# 2618
template< class _Tp> 
# 2619
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2622
typedef __decltype((__test< _Tp> (0))) type; 
# 2623
}; 
# 2625
template< class _Tp> 
# 2626
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2629
typedef __decltype((__test< _Tp> (0))) type; 
# 2630
}; 
# 2632
template< class _Tp> 
# 2633
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2635
}; 
# 2637
template< class _Tp> 
# 2638
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2640
}; 
# 2647
template< class _Tp> 
# 2648
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2650
}; 
# 2653
template< class _Tp> 
# 2654
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2656
}; 
# 2660
template< class _Tp> constexpr bool 
# 2661
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2665
template< class _Tp> constexpr bool 
# 2666
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2670
namespace __swappable_with_details { 
# 2671
using std::swap;
# 2673
struct __do_is_swappable_with_impl { 
# 2675
template< class _Tp, class _Up, class 
# 2676
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2678
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2675
__test(int); 
# 2681
template< class , class > static false_type __test(...); 
# 2683
}; 
# 2685
struct __do_is_nothrow_swappable_with_impl { 
# 2687
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2694
template< class , class > static false_type __test(...); 
# 2696
}; 
# 2698
}
# 2700
template< class _Tp, class _Up> 
# 2701
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2704
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2705
}; 
# 2708
template< class _Tp> 
# 2709
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2712
typedef __decltype((__test< _Tp &> (0))) type; 
# 2713
}; 
# 2715
template< class _Tp, class _Up> 
# 2716
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2719
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2720
}; 
# 2723
template< class _Tp> 
# 2724
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2727
typedef __decltype((__test< _Tp &> (0))) type; 
# 2728
}; 
# 2731
template< class _Tp, class _Up> 
# 2732
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2734
}; 
# 2737
template< class _Tp, class _Up> 
# 2738
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2740
}; 
# 2744
template< class _Tp, class _Up> constexpr bool 
# 2745
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2749
template< class _Tp, class _Up> constexpr bool 
# 2750
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2758
template< class _Result, class _Ret, class  = void> 
# 2759
struct __is_invocable_impl : public false_type { }; 
# 2761
template< class _Result, class _Ret> 
# 2762
struct __is_invocable_impl< _Result, _Ret, __void_t< typename _Result::type> >  : public __or_< is_void< _Ret> , is_convertible< typename _Result::type, _Ret> > ::type { 
# 2764
}; 
# 2766
template< class _Fn, class ..._ArgTypes> 
# 2767
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2769
}; 
# 2771
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2772
__call_is_nt(__invoke_memfun_ref) 
# 2773
{ 
# 2774
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2775
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2777
} 
# 2779
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2780
__call_is_nt(__invoke_memfun_deref) 
# 2781
{ 
# 2782
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2784
} 
# 2786
template< class _Fn, class _Tp> constexpr bool 
# 2787
__call_is_nt(__invoke_memobj_ref) 
# 2788
{ 
# 2789
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2790
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2791
} 
# 2793
template< class _Fn, class _Tp> constexpr bool 
# 2794
__call_is_nt(__invoke_memobj_deref) 
# 2795
{ 
# 2796
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2797
} 
# 2799
template< class _Fn, class ..._Args> constexpr bool 
# 2800
__call_is_nt(__invoke_other) 
# 2801
{ 
# 2802
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2803
} 
# 2805
template< class _Result, class _Fn, class ..._Args> 
# 2806
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2810
}; 
# 2812
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2817
template< class _Fn, class ..._Args> 
# 2818
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2821
}; 
# 2823
struct __nonesuch { 
# 2824
__nonesuch() = delete;
# 2825
~__nonesuch() = delete;
# 2826
__nonesuch(const __nonesuch &) = delete;
# 2827
void operator=(const __nonesuch &) = delete;
# 2828
}; 
# 2834
template< class _Functor, class ..._ArgTypes> 
# 2835
struct invoke_result : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2837
}; 
# 2840
template< class _Fn, class ..._Args> using invoke_result_t = typename invoke_result< _Fn, _Args...> ::type; 
# 2844
template< class _Fn, class ..._ArgTypes> 
# 2845
struct is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2847
}; 
# 2850
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 2851
struct is_invocable_r : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> ::type { 
# 2853
}; 
# 2856
template< class _Fn, class ..._ArgTypes> 
# 2857
struct is_nothrow_invocable : public __and_< __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 2860
}; 
# 2862
template< class _Result, class _Ret, class  = void> 
# 2863
struct __is_nt_invocable_impl : public false_type { }; 
# 2865
template< class _Result, class _Ret> 
# 2866
struct __is_nt_invocable_impl< _Result, _Ret, __void_t< typename _Result::type> >  : public __or_< is_void< _Ret> , __and_< is_convertible< typename _Result::type, _Ret> , is_nothrow_constructible< _Ret, typename _Result::type> > >  { 
# 2871
}; 
# 2874
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 2875
struct is_nothrow_invocable_r : public __and_< __is_nt_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 2878
}; 
# 2881
template< class _Fn, class ..._Args> constexpr bool 
# 2882
is_invocable_v = (is_invocable< _Fn, _Args...> ::value); 
# 2885
template< class _Fn, class ..._Args> constexpr bool 
# 2886
is_nothrow_invocable_v = (is_nothrow_invocable< _Fn, _Args...> ::value); 
# 2890
template< class _Fn, class ..._Args> constexpr bool 
# 2891
is_invocable_r_v = (is_invocable_r< _Fn, _Args...> ::value); 
# 2895
template< class _Fn, class ..._Args> constexpr bool 
# 2896
is_nothrow_invocable_r_v = (is_nothrow_invocable_r< _Fn, _Args...> ::value); 
# 2902
template< class _Tp> constexpr bool 
# 2903
is_void_v = (is_void< _Tp> ::value); 
# 2904
template< class _Tp> constexpr bool 
# 2905
is_null_pointer_v = (is_null_pointer< _Tp> ::value); 
# 2906
template< class _Tp> constexpr bool 
# 2907
is_integral_v = (is_integral< _Tp> ::value); 
# 2908
template< class _Tp> constexpr bool 
# 2909
is_floating_point_v = (is_floating_point< _Tp> ::value); 
# 2910
template< class _Tp> constexpr bool 
# 2911
is_array_v = (is_array< _Tp> ::value); 
# 2912
template< class _Tp> constexpr bool 
# 2913
is_pointer_v = (is_pointer< _Tp> ::value); 
# 2914
template< class _Tp> constexpr bool 
# 2915
is_lvalue_reference_v = (is_lvalue_reference< _Tp> ::value); 
# 2917
template< class _Tp> constexpr bool 
# 2918
is_rvalue_reference_v = (is_rvalue_reference< _Tp> ::value); 
# 2920
template< class _Tp> constexpr bool 
# 2921
is_member_object_pointer_v = (is_member_object_pointer< _Tp> ::value); 
# 2923
template< class _Tp> constexpr bool 
# 2924
is_member_function_pointer_v = (is_member_function_pointer< _Tp> ::value); 
# 2926
template< class _Tp> constexpr bool 
# 2927
is_enum_v = (is_enum< _Tp> ::value); 
# 2928
template< class _Tp> constexpr bool 
# 2929
is_union_v = (is_union< _Tp> ::value); 
# 2930
template< class _Tp> constexpr bool 
# 2931
is_class_v = (is_class< _Tp> ::value); 
# 2932
template< class _Tp> constexpr bool 
# 2933
is_function_v = (is_function< _Tp> ::value); 
# 2934
template< class _Tp> constexpr bool 
# 2935
is_reference_v = (is_reference< _Tp> ::value); 
# 2936
template< class _Tp> constexpr bool 
# 2937
is_arithmetic_v = (is_arithmetic< _Tp> ::value); 
# 2938
template< class _Tp> constexpr bool 
# 2939
is_fundamental_v = (is_fundamental< _Tp> ::value); 
# 2940
template< class _Tp> constexpr bool 
# 2941
is_object_v = (is_object< _Tp> ::value); 
# 2942
template< class _Tp> constexpr bool 
# 2943
is_scalar_v = (is_scalar< _Tp> ::value); 
# 2944
template< class _Tp> constexpr bool 
# 2945
is_compound_v = (is_compound< _Tp> ::value); 
# 2946
template< class _Tp> constexpr bool 
# 2947
is_member_pointer_v = (is_member_pointer< _Tp> ::value); 
# 2948
template< class _Tp> constexpr bool 
# 2949
is_const_v = (is_const< _Tp> ::value); 
# 2950
template< class _Tp> constexpr bool 
# 2951
is_volatile_v = (is_volatile< _Tp> ::value); 
# 2952
template< class _Tp> constexpr bool 
# 2953
is_trivial_v = (is_trivial< _Tp> ::value); 
# 2954
template< class _Tp> constexpr bool 
# 2955
is_trivially_copyable_v = (is_trivially_copyable< _Tp> ::value); 
# 2957
template< class _Tp> constexpr bool 
# 2958
is_standard_layout_v = (is_standard_layout< _Tp> ::value); 
# 2959
template< class _Tp> constexpr bool 
# 2960
is_pod_v = (is_pod< _Tp> ::value); 
# 2961
template< class _Tp> constexpr bool 
# 2962
is_literal_type_v = (is_literal_type< _Tp> ::value); 
# 2963
template< class _Tp> constexpr bool 
# 2964
is_empty_v = (is_empty< _Tp> ::value); 
# 2965
template< class _Tp> constexpr bool 
# 2966
is_polymorphic_v = (is_polymorphic< _Tp> ::value); 
# 2967
template< class _Tp> constexpr bool 
# 2968
is_abstract_v = (is_abstract< _Tp> ::value); 
# 2969
template< class _Tp> constexpr bool 
# 2970
is_final_v = (is_final< _Tp> ::value); 
# 2971
template< class _Tp> constexpr bool 
# 2972
is_signed_v = (is_signed< _Tp> ::value); 
# 2973
template< class _Tp> constexpr bool 
# 2974
is_unsigned_v = (is_unsigned< _Tp> ::value); 
# 2975
template< class _Tp, class ..._Args> constexpr bool 
# 2976
is_constructible_v = (is_constructible< _Tp, _Args...> ::value); 
# 2978
template< class _Tp> constexpr bool 
# 2979
is_default_constructible_v = (is_default_constructible< _Tp> ::value); 
# 2981
template< class _Tp> constexpr bool 
# 2982
is_copy_constructible_v = (is_copy_constructible< _Tp> ::value); 
# 2984
template< class _Tp> constexpr bool 
# 2985
is_move_constructible_v = (is_move_constructible< _Tp> ::value); 
# 2987
template< class _Tp, class _Up> constexpr bool 
# 2988
is_assignable_v = (is_assignable< _Tp, _Up> ::value); 
# 2989
template< class _Tp> constexpr bool 
# 2990
is_copy_assignable_v = (is_copy_assignable< _Tp> ::value); 
# 2991
template< class _Tp> constexpr bool 
# 2992
is_move_assignable_v = (is_move_assignable< _Tp> ::value); 
# 2993
template< class _Tp> constexpr bool 
# 2994
is_destructible_v = (is_destructible< _Tp> ::value); 
# 2995
template< class _Tp, class ..._Args> constexpr bool 
# 2996
is_trivially_constructible_v = (is_trivially_constructible< _Tp, _Args...> ::value); 
# 2998
template< class _Tp> constexpr bool 
# 2999
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Tp> ::value); 
# 3001
template< class _Tp> constexpr bool 
# 3002
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Tp> ::value); 
# 3004
template< class _Tp> constexpr bool 
# 3005
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Tp> ::value); 
# 3007
template< class _Tp, class _Up> constexpr bool 
# 3008
is_trivially_assignable_v = (is_trivially_assignable< _Tp, _Up> ::value); 
# 3010
template< class _Tp> constexpr bool 
# 3011
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Tp> ::value); 
# 3013
template< class _Tp> constexpr bool 
# 3014
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Tp> ::value); 
# 3016
template< class _Tp> constexpr bool 
# 3017
is_trivially_destructible_v = (is_trivially_destructible< _Tp> ::value); 
# 3019
template< class _Tp, class ..._Args> constexpr bool 
# 3020
is_nothrow_constructible_v = (is_nothrow_constructible< _Tp, _Args...> ::value); 
# 3022
template< class _Tp> constexpr bool 
# 3023
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Tp> ::value); 
# 3025
template< class _Tp> constexpr bool 
# 3026
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Tp> ::value); 
# 3028
template< class _Tp> constexpr bool 
# 3029
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Tp> ::value); 
# 3031
template< class _Tp, class _Up> constexpr bool 
# 3032
is_nothrow_assignable_v = (is_nothrow_assignable< _Tp, _Up> ::value); 
# 3034
template< class _Tp> constexpr bool 
# 3035
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Tp> ::value); 
# 3037
template< class _Tp> constexpr bool 
# 3038
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Tp> ::value); 
# 3040
template< class _Tp> constexpr bool 
# 3041
is_nothrow_destructible_v = (is_nothrow_destructible< _Tp> ::value); 
# 3043
template< class _Tp> constexpr bool 
# 3044
has_virtual_destructor_v = (has_virtual_destructor< _Tp> ::value); 
# 3046
template< class _Tp> constexpr size_t 
# 3047
alignment_of_v = (alignment_of< _Tp> ::value); 
# 3048
template< class _Tp> constexpr size_t 
# 3049
rank_v = (rank< _Tp> ::value); 
# 3050
template< class _Tp, unsigned _Idx = 0U> constexpr size_t 
# 3051
extent_v = (extent< _Tp, _Idx> ::value); 
# 3052
template< class _Tp, class _Up> constexpr bool 
# 3053
is_same_v = (is_same< _Tp, _Up> ::value); 
# 3054
template< class _Base, class _Derived> constexpr bool 
# 3055
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
# 3056
template< class _From, class _To> constexpr bool 
# 3057
is_convertible_v = (is_convertible< _From, _To> ::value); 
# 3071 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 3072
struct has_unique_object_representations : public bool_constant< __has_unique_object_representations(remove_cv_t< remove_all_extents_t< _Tp> > )>  { 
# 3076
}; 
# 3078
template< class _Tp> constexpr bool 
# 3079
has_unique_object_representations_v = (has_unique_object_representations< _Tp> ::value); 
# 3096 "/usr/include/c++/7/type_traits" 3
template< class _Tp> 
# 3097
struct is_aggregate : public bool_constant< __is_aggregate(remove_cv_t< _Tp> )>  { 
# 3098
}; 
# 3101
template< class _Tp> constexpr bool 
# 3102
is_aggregate_v = (is_aggregate< _Tp> ::value); 
# 3109
}
# 56 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> constexpr _Tp &&
# 73
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 74
{ return static_cast< _Tp &&>(__t); } 
# 82
template< class _Tp> constexpr _Tp &&
# 84
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 85
{ 
# 86
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 88
return static_cast< _Tp &&>(__t); 
# 89
} 
# 96
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 98
move(_Tp &&__t) noexcept 
# 99
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 102
template< class _Tp> 
# 103
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 105
}; 
# 115 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 118
move_if_noexcept(_Tp &__x) noexcept 
# 119
{ return std::move(__x); } 
# 135 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> constexpr _Tp *
# 137
addressof(_Tp &__r) noexcept 
# 138
{ return std::__addressof(__r); } 
# 142
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 146
template< class _Tp, class _Up = _Tp> inline _Tp 
# 148
__exchange(_Tp &__obj, _Up &&__new_val) 
# 149
{ 
# 150
_Tp __old_val = std::move(__obj); 
# 151
__obj = std::forward< _Up> (__new_val); 
# 152
return __old_val; 
# 153
} 
# 157
}
# 166 "/usr/include/c++/7/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 181 "/usr/include/c++/7/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 187
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 194
{ 
# 198
_Tp __tmp = std::move(__a); 
# 199
__a = std::move(__b); 
# 200
__b = std::move(__tmp); 
# 201
} 
# 206
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 210
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 216
{ 
# 217
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 218
swap(__a[__n], __b[__n]); }  
# 219
} 
# 223
}
# 65 "/usr/include/c++/7/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76 "/usr/include/c++/7/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 79
constexpr inline piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 83
template< class ...> class tuple; 
# 86
template< size_t ...> struct _Index_tuple; 
# 94
template< bool , class _T1, class _T2> 
# 95
struct _PCC { 
# 97
template< class _U1, class _U2> static constexpr bool 
# 98
_ConstructiblePair() 
# 99
{ 
# 100
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 102
} 
# 104
template< class _U1, class _U2> static constexpr bool 
# 105
_ImplicitlyConvertiblePair() 
# 106
{ 
# 107
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 109
} 
# 111
template< class _U1, class _U2> static constexpr bool 
# 112
_MoveConstructiblePair() 
# 113
{ 
# 114
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 116
} 
# 118
template< class _U1, class _U2> static constexpr bool 
# 119
_ImplicitlyMoveConvertiblePair() 
# 120
{ 
# 121
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 123
} 
# 125
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 126
_CopyMovePair() 
# 127
{ 
# 128
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 130
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 133
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 137
} 
# 139
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 140
_MoveCopyPair() 
# 141
{ 
# 142
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 144
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 147
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 151
} 
# 152
}; 
# 154
template< class _T1, class _T2> 
# 155
struct _PCC< false, _T1, _T2>  { 
# 157
template< class _U1, class _U2> static constexpr bool 
# 158
_ConstructiblePair() 
# 159
{ 
# 160
return false; 
# 161
} 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ImplicitlyConvertiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_MoveConstructiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_ImplicitlyMoveConvertiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 180
}; 
# 185
struct __nonesuch_no_braces : public __nonesuch { 
# 186
explicit __nonesuch_no_braces(const __nonesuch &) = delete;
# 187
}; 
# 190
template< class _U1, class _U2> class __pair_base { 
# 193
template< class _T1, class _T2> friend struct pair; 
# 194
__pair_base() = default;
# 195
~__pair_base() = default;
# 196
__pair_base(const __pair_base &) = default;
# 197
__pair_base &operator=(const __pair_base &) = delete;
# 199
}; 
# 207
template< class _T1, class _T2> 
# 208
struct pair : private __pair_base< _T1, _T2>  { 
# 211
typedef _T1 first_type; 
# 212
typedef _T2 second_type; 
# 214
_T1 first; 
# 215
_T2 second; 
# 222
template< class _U1 = _T1, class 
# 223
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 227
 = true> constexpr 
# 229
pair() : first(), second() 
# 230
{ } 
# 233
template< class _U1 = _T1, class 
# 234
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 241
 = false> constexpr explicit 
# 242
pair() : first(), second() 
# 243
{ } 
# 252 "/usr/include/c++/7/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 254
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 259
 = true> constexpr 
# 260
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 261
{ } 
# 263
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 268
 = false> constexpr explicit 
# 269
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 270
{ } 
# 280 "/usr/include/c++/7/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 285
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 290
 = true> constexpr 
# 291
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 292
{ } 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 299
 = false> constexpr explicit 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
constexpr pair(const pair &) = default;
# 304
constexpr pair(pair &&) = default;
# 307
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 310
 = true> constexpr 
# 311
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 312
{ } 
# 314
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 317
 = false> constexpr explicit 
# 318
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 319
{ } 
# 321
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 324
 = true> constexpr 
# 325
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 326
{ } 
# 328
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 331
 = false> explicit 
# 332
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 333
{ } 
# 335
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 340
 = true> constexpr 
# 341
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 342
{ } 
# 344
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 349
 = false> constexpr explicit 
# 350
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 351
{ } 
# 354
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 359
 = true> constexpr 
# 360
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 362
{ } 
# 364
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 369
 = false> constexpr explicit 
# 370
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 372
{ } 
# 374
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 378
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch_no_braces &> ::type 
# 381
__p) 
# 382
{ 
# 383
(first) = (__p.first); 
# 384
(second) = (__p.second); 
# 385
return *this; 
# 386
} 
# 389
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch_no_braces &&> ::type 
# 392
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 395
{ 
# 396
(first) = std::forward< first_type> ((__p.first)); 
# 397
(second) = std::forward< second_type> ((__p.second)); 
# 398
return *this; 
# 399
} 
# 401
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 405
operator=(const std::pair< _U1, _U2>  &__p) 
# 406
{ 
# 407
(first) = (__p.first); 
# 408
(second) = (__p.second); 
# 409
return *this; 
# 410
} 
# 412
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 416
operator=(std::pair< _U1, _U2>  &&__p) 
# 417
{ 
# 418
(first) = std::forward< _U1> ((__p.first)); 
# 419
(second) = std::forward< _U2> ((__p.second)); 
# 420
return *this; 
# 421
} 
# 424
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 427
{ 
# 428
using std::swap;
# 429
swap(first, __p.first); 
# 430
swap(second, __p.second); 
# 431
} 
# 434
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 435
_Args2, std::size_t ..._Indexes2> 
# 434
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 439
}; 
# 442
template< class _T1, class _T2> pair(_T1, _T2)->pair< _T1, _T2> ; 
# 446
template< class _T1, class _T2> constexpr bool 
# 448
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 449
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 452
template< class _T1, class _T2> constexpr bool 
# 454
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 455
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 456
} 
# 459
template< class _T1, class _T2> constexpr bool 
# 461
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 462
{ return !(__x == __y); } 
# 465
template< class _T1, class _T2> constexpr bool 
# 467
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 468
{ return __y < __x; } 
# 471
template< class _T1, class _T2> constexpr bool 
# 473
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 474
{ return !(__y < __x); } 
# 477
template< class _T1, class _T2> constexpr bool 
# 479
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 480
{ return !(__x < __y); } 
# 486
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 495
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 497
{ __x.swap(__y); } 
# 500
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 521 "/usr/include/c++/7/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 524
make_pair(_T1 &&__x, _T2 &&__y) 
# 525
{ 
# 526
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 527
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 528
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 529
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 530
} 
# 541 "/usr/include/c++/7/bits/stl_pair.h" 3
}
# 70 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 205
__iterator_category(const _Iter &) 
# 206
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 231 "/usr/include/c++/7/bits/stl_iterator_base_types.h" 3
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 239
}
# 67 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class > struct _List_iterator; 
# 72
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
; 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
__i += __n; 
# 181
} 
# 195 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> constexpr void 
# 197
advance(_InputIterator &__i, _Distance __n) 
# 198
{ 
# 200
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 201
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 202
} 
# 206
template< class _ForwardIterator> constexpr _ForwardIterator 
# 208
next(_ForwardIterator __x, typename iterator_traits< _ForwardIterator> ::difference_type 
# 209
__n = 1) 
# 210
{ 
# 214
std::advance(__x, __n); 
# 215
return __x; 
# 216
} 
# 218
template< class _BidirectionalIterator> constexpr _BidirectionalIterator 
# 220
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 221
__n = 1) 
# 222
{ 
# 226
std::advance(__x, -__n); 
# 227
return __x; 
# 228
} 
# 233
}
# 37 "/usr/include/c++/7/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
class __undefined; 
# 44
template< class _Tp> 
# 45
struct __get_first_arg { 
# 46
using type = __undefined; }; 
# 48
template< template< class , class ...>  class _Template, class _Tp, class ...
# 49
_Types> 
# 50
struct __get_first_arg< _Template< _Tp, _Types...> >  { 
# 51
using type = _Tp; }; 
# 53
template< class _Tp> using __get_first_arg_t = typename __get_first_arg< _Tp> ::type; 
# 57
template< class _Tp, class _Up> 
# 58
struct __replace_first_arg { 
# 59
}; 
# 61
template< template< class , class ...>  class _Template, class _Up, class 
# 62
_Tp, class ..._Types> 
# 63
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 64
using type = _Template< _Up, _Types...> ; }; 
# 66
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 69
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 77
template< class _Ptr> 
# 78
struct pointer_traits { 
# 82
private: 
# 81
template< class _Tp> using __element_type = typename _Tp::element_type; 
# 84
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 87
template< class _Tp, class _Up, class  = void> 
# 88
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 90
template< class _Tp, class _Up> 
# 91
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> > >  { 
# 92
using type = typename _Tp::template rebind< _Up> ; }; 
# 96
public: using pointer = _Ptr; 
# 99
using element_type = __detected_or_t< __get_first_arg_t< _Ptr> , __element_type, _Ptr> ; 
# 103
using difference_type = __detected_or_t< ptrdiff_t, __difference_type, _Ptr> ; 
# 107
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 111
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 112
{ return _Ptr::pointer_to(__e); } 
# 114
static_assert((!is_same< element_type, __undefined> ::value), "pointer type defines element_type or is like SomePointer<T, Args>");
# 116
}; 
# 122
template< class _Tp> 
# 123
struct pointer_traits< _Tp *>  { 
# 126
typedef _Tp *pointer; 
# 128
typedef _Tp element_type; 
# 130
typedef ptrdiff_t difference_type; 
# 132
template< class _Up> using rebind = _Up *; 
# 141
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 142
{ return std::addressof(__r); } 
# 143
}; 
# 146
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 150
}
# 72 "/usr/include/c++/7/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 100 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> 
# 101
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 109
protected: _Iterator current; 
# 111
typedef iterator_traits< _Iterator>  __traits_type; 
# 114
public: typedef _Iterator iterator_type; 
# 115
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 116
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 117
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 127 "/usr/include/c++/7/bits/stl_iterator.h" 3
constexpr reverse_iterator() : current() { } 
# 133
constexpr explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 139
constexpr reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 140
{ } 
# 146
template< class _Iter> constexpr 
# 148
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current(__x.base()) 
# 149
{ } 
# 155
constexpr iterator_type base() const 
# 156
{ return current; } 
# 169 "/usr/include/c++/7/bits/stl_iterator.h" 3
constexpr reference operator*() const 
# 170
{ 
# 171
_Iterator __tmp = current; 
# 172
return *(--__tmp); 
# 173
} 
# 183 "/usr/include/c++/7/bits/stl_iterator.h" 3
constexpr pointer operator->() const 
# 184
{ return std::__addressof(operator*()); } 
# 192
constexpr reverse_iterator &operator++() 
# 193
{ 
# 194
--(current); 
# 195
return *this; 
# 196
} 
# 204
constexpr reverse_iterator operator++(int) 
# 205
{ 
# 206
reverse_iterator __tmp = *this; 
# 207
--(current); 
# 208
return __tmp; 
# 209
} 
# 217
constexpr reverse_iterator &operator--() 
# 218
{ 
# 219
++(current); 
# 220
return *this; 
# 221
} 
# 229
constexpr reverse_iterator operator--(int) 
# 230
{ 
# 231
reverse_iterator __tmp = *this; 
# 232
++(current); 
# 233
return __tmp; 
# 234
} 
# 242
constexpr reverse_iterator operator+(difference_type __n) const 
# 243
{ return ((reverse_iterator)((current) - __n)); } 
# 252
constexpr reverse_iterator &operator+=(difference_type __n) 
# 253
{ 
# 254
(current) -= __n; 
# 255
return *this; 
# 256
} 
# 264
constexpr reverse_iterator operator-(difference_type __n) const 
# 265
{ return ((reverse_iterator)((current) + __n)); } 
# 274
constexpr reverse_iterator &operator-=(difference_type __n) 
# 275
{ 
# 276
(current) += __n; 
# 277
return *this; 
# 278
} 
# 286
constexpr reference operator[](difference_type __n) const 
# 287
{ return *((*this) + __n); } 
# 288
}; 
# 300 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> constexpr bool 
# 302
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 303
__y) 
# 304
{ return __x.base() == __y.base(); } 
# 306
template< class _Iterator> constexpr bool 
# 308
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 309
__y) 
# 310
{ return __y.base() < __x.base(); } 
# 312
template< class _Iterator> constexpr bool 
# 314
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 315
__y) 
# 316
{ return !(__x == __y); } 
# 318
template< class _Iterator> constexpr bool 
# 320
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 321
__y) 
# 322
{ return __y < __x; } 
# 324
template< class _Iterator> constexpr bool 
# 326
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 327
__y) 
# 328
{ return !(__y < __x); } 
# 330
template< class _Iterator> constexpr bool 
# 332
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 333
__y) 
# 334
{ return !(__x < __y); } 
# 338
template< class _IteratorL, class _IteratorR> constexpr bool 
# 340
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 341
__y) 
# 342
{ return __x.base() == __y.base(); } 
# 344
template< class _IteratorL, class _IteratorR> constexpr bool 
# 346
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 347
__y) 
# 348
{ return __y.base() < __x.base(); } 
# 350
template< class _IteratorL, class _IteratorR> constexpr bool 
# 352
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 353
__y) 
# 354
{ return !(__x == __y); } 
# 356
template< class _IteratorL, class _IteratorR> constexpr bool 
# 358
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 359
__y) 
# 360
{ return __y < __x; } 
# 362
template< class _IteratorL, class _IteratorR> constexpr bool 
# 364
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 365
__y) 
# 366
{ return !(__y < __x); } 
# 368
template< class _IteratorL, class _IteratorR> constexpr bool 
# 370
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 371
__y) 
# 372
{ return !(__x < __y); } 
# 390 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> constexpr auto 
# 392
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 393
__y)->__decltype((__y.base() - __x.base())) 
# 395
{ return __y.base() - __x.base(); } 
# 398
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 400
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 401
__x) 
# 402
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 406
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 408
__make_reverse_iterator(_Iterator __i) 
# 409
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 417
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 419
make_reverse_iterator(_Iterator __i) 
# 420
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 425
template< class _Iterator> auto 
# 427
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 429
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 431
template< class _Iterator> 
# 432
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 434
}; 
# 436
template< class _Iterator> auto 
# 438
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 440
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 454 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 455
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 459
protected: _Container *container; 
# 463
public: typedef _Container container_type; 
# 467
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 468
{ } 
# 490 "/usr/include/c++/7/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 491
{ 
# 492
(container)->push_back(__value); 
# 493
return *this; 
# 494
} 
# 497
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 498
{ 
# 499
(container)->push_back(std::move(__value)); 
# 500
return *this; 
# 501
} 
# 506
back_insert_iterator &operator*() 
# 507
{ return *this; } 
# 511
back_insert_iterator &operator++() 
# 512
{ return *this; } 
# 516
back_insert_iterator operator++(int) 
# 517
{ return *this; } 
# 518
}; 
# 531 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 533
back_inserter(_Container &__x) 
# 534
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 546 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 547
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 551
protected: _Container *container; 
# 555
public: typedef _Container container_type; 
# 558
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 559
{ } 
# 581 "/usr/include/c++/7/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 582
{ 
# 583
(container)->push_front(__value); 
# 584
return *this; 
# 585
} 
# 588
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 589
{ 
# 590
(container)->push_front(std::move(__value)); 
# 591
return *this; 
# 592
} 
# 597
front_insert_iterator &operator*() 
# 598
{ return *this; } 
# 602
front_insert_iterator &operator++() 
# 603
{ return *this; } 
# 607
front_insert_iterator operator++(int) 
# 608
{ return *this; } 
# 609
}; 
# 622 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 624
front_inserter(_Container &__x) 
# 625
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 641 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container> 
# 642
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 646
protected: _Container *container; 
# 647
typename _Container::iterator iter; 
# 651
public: typedef _Container container_type; 
# 657
insert_iterator(_Container &__x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) 
# 658
{ } 
# 693 "/usr/include/c++/7/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 694
{ 
# 695
(iter) = (container)->insert(iter, __value); 
# 696
++(iter); 
# 697
return *this; 
# 698
} 
# 701
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 702
{ 
# 703
(iter) = (container)->insert(iter, std::move(__value)); 
# 704
++(iter); 
# 705
return *this; 
# 706
} 
# 711
insert_iterator &operator*() 
# 712
{ return *this; } 
# 716
insert_iterator &operator++() 
# 717
{ return *this; } 
# 721
insert_iterator &operator++(int) 
# 722
{ return *this; } 
# 723
}; 
# 736 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Container, class _Iterator> inline insert_iterator< _Container>  
# 738
inserter(_Container &__x, _Iterator __i) 
# 739
{ 
# 740
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i); 
# 742
} 
# 747
}
# 749
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 760 "/usr/include/c++/7/bits/stl_iterator.h" 3
using std::iterator_traits;
# 761
using std::iterator;
# 762
template< class _Iterator, class _Container> 
# 763
class __normal_iterator { 
# 766
protected: _Iterator _M_current; 
# 768
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 771
public: typedef _Iterator iterator_type; 
# 772
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 773
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 774
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 775
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 776
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 778
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 779
{ } 
# 782
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 783
{ } 
# 786
template< class _Iter> 
# 787
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 790
__i) noexcept : _M_current(__i.base()) 
# 791
{ } 
# 795
reference operator*() const noexcept 
# 796
{ return *(_M_current); } 
# 799
pointer operator->() const noexcept 
# 800
{ return _M_current; } 
# 803
__normal_iterator &operator++() noexcept 
# 804
{ 
# 805
++(_M_current); 
# 806
return *this; 
# 807
} 
# 810
__normal_iterator operator++(int) noexcept 
# 811
{ return ((__normal_iterator)((_M_current)++)); } 
# 815
__normal_iterator &operator--() noexcept 
# 816
{ 
# 817
--(_M_current); 
# 818
return *this; 
# 819
} 
# 822
__normal_iterator operator--(int) noexcept 
# 823
{ return ((__normal_iterator)((_M_current)--)); } 
# 827
reference operator[](difference_type __n) const noexcept 
# 828
{ return (_M_current)[__n]; } 
# 831
__normal_iterator &operator+=(difference_type __n) noexcept 
# 832
{ (_M_current) += __n; return *this; } 
# 835
__normal_iterator operator+(difference_type __n) const noexcept 
# 836
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 839
__normal_iterator &operator-=(difference_type __n) noexcept 
# 840
{ (_M_current) -= __n; return *this; } 
# 843
__normal_iterator operator-(difference_type __n) const noexcept 
# 844
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 847
const _Iterator &base() const noexcept 
# 848
{ return _M_current; } 
# 849
}; 
# 860 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 862
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 863
__rhs) noexcept 
# 865
{ return __lhs.base() == __rhs.base(); } 
# 867
template< class _Iterator, class _Container> inline bool 
# 869
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 870
__rhs) noexcept 
# 872
{ return __lhs.base() == __rhs.base(); } 
# 874
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 876
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 877
__rhs) noexcept 
# 879
{ return __lhs.base() != __rhs.base(); } 
# 881
template< class _Iterator, class _Container> inline bool 
# 883
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 884
__rhs) noexcept 
# 886
{ return __lhs.base() != __rhs.base(); } 
# 889
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 891
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 892
__rhs) noexcept 
# 894
{ return __lhs.base() < __rhs.base(); } 
# 896
template< class _Iterator, class _Container> inline bool 
# 898
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 899
__rhs) noexcept 
# 901
{ return __lhs.base() < __rhs.base(); } 
# 903
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 905
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 906
__rhs) noexcept 
# 908
{ return __lhs.base() > __rhs.base(); } 
# 910
template< class _Iterator, class _Container> inline bool 
# 912
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 913
__rhs) noexcept 
# 915
{ return __lhs.base() > __rhs.base(); } 
# 917
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 919
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 920
__rhs) noexcept 
# 922
{ return __lhs.base() <= __rhs.base(); } 
# 924
template< class _Iterator, class _Container> inline bool 
# 926
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 927
__rhs) noexcept 
# 929
{ return __lhs.base() <= __rhs.base(); } 
# 931
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 933
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 934
__rhs) noexcept 
# 936
{ return __lhs.base() >= __rhs.base(); } 
# 938
template< class _Iterator, class _Container> inline bool 
# 940
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 941
__rhs) noexcept 
# 943
{ return __lhs.base() >= __rhs.base(); } 
# 949
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 953
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 954
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 961
{ return __lhs.base() - __rhs.base(); } 
# 963
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 965
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 966
__rhs) noexcept 
# 968
{ return __lhs.base() - __rhs.base(); } 
# 970
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 972
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 973
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 975
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 978
}
# 980
namespace std __attribute((__visibility__("default"))) { 
# 984
template< class _Iterator, class _Container> _Iterator 
# 986
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) 
# 987
{ return __it.base(); } 
# 990
}
# 994
namespace std __attribute((__visibility__("default"))) { 
# 1012 "/usr/include/c++/7/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1013
class move_iterator { 
# 1016
protected: _Iterator _M_current; 
# 1018
typedef iterator_traits< _Iterator>  __traits_type; 
# 1019
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 1022
public: typedef _Iterator iterator_type; 
# 1023
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1024
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1025
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1027
typedef _Iterator pointer; 
# 1032
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1035
constexpr move_iterator() : _M_current() 
# 1036
{ } 
# 1039
constexpr explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 1040
{ } 
# 1042
template< class _Iter> constexpr 
# 1044
move_iterator(const move_iterator< _Iter>  &__i) : _M_current(__i.base()) 
# 1045
{ } 
# 1048
constexpr iterator_type base() const 
# 1049
{ return _M_current; } 
# 1052
constexpr reference operator*() const 
# 1053
{ return static_cast< reference>(*(_M_current)); } 
# 1056
constexpr pointer operator->() const 
# 1057
{ return _M_current; } 
# 1060
constexpr move_iterator &operator++() 
# 1061
{ 
# 1062
++(_M_current); 
# 1063
return *this; 
# 1064
} 
# 1067
constexpr move_iterator operator++(int) 
# 1068
{ 
# 1069
move_iterator __tmp = *this; 
# 1070
++(_M_current); 
# 1071
return __tmp; 
# 1072
} 
# 1075
constexpr move_iterator &operator--() 
# 1076
{ 
# 1077
--(_M_current); 
# 1078
return *this; 
# 1079
} 
# 1082
constexpr move_iterator operator--(int) 
# 1083
{ 
# 1084
move_iterator __tmp = *this; 
# 1085
--(_M_current); 
# 1086
return __tmp; 
# 1087
} 
# 1090
constexpr move_iterator operator+(difference_type __n) const 
# 1091
{ return ((move_iterator)((_M_current) + __n)); } 
# 1094
constexpr move_iterator &operator+=(difference_type __n) 
# 1095
{ 
# 1096
(_M_current) += __n; 
# 1097
return *this; 
# 1098
} 
# 1101
constexpr move_iterator operator-(difference_type __n) const 
# 1102
{ return ((move_iterator)((_M_current) - __n)); } 
# 1105
constexpr move_iterator &operator-=(difference_type __n) 
# 1106
{ 
# 1107
(_M_current) -= __n; 
# 1108
return *this; 
# 1109
} 
# 1112
constexpr reference operator[](difference_type __n) const 
# 1113
{ return std::move((_M_current)[__n]); } 
# 1114
}; 
# 1119
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1121
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1122
__y) 
# 1123
{ return __x.base() == __y.base(); } 
# 1125
template< class _Iterator> constexpr bool 
# 1127
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1128
__y) 
# 1129
{ return __x.base() == __y.base(); } 
# 1131
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1133
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1134
__y) 
# 1135
{ return !(__x == __y); } 
# 1137
template< class _Iterator> constexpr bool 
# 1139
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1140
__y) 
# 1141
{ return !(__x == __y); } 
# 1143
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1145
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1146
__y) 
# 1147
{ return __x.base() < __y.base(); } 
# 1149
template< class _Iterator> constexpr bool 
# 1151
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1152
__y) 
# 1153
{ return __x.base() < __y.base(); } 
# 1155
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1157
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1158
__y) 
# 1159
{ return !(__y < __x); } 
# 1161
template< class _Iterator> constexpr bool 
# 1163
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1164
__y) 
# 1165
{ return !(__y < __x); } 
# 1167
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1169
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1170
__y) 
# 1171
{ return __y < __x; } 
# 1173
template< class _Iterator> constexpr bool 
# 1175
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1176
__y) 
# 1177
{ return __y < __x; } 
# 1179
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1181
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1182
__y) 
# 1183
{ return !(__x < __y); } 
# 1185
template< class _Iterator> constexpr bool 
# 1187
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1188
__y) 
# 1189
{ return !(__x < __y); } 
# 1192
template< class _IteratorL, class _IteratorR> constexpr auto 
# 1194
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1195
__y)->__decltype((__x.base() - __y.base())) 
# 1197
{ return __x.base() - __y.base(); } 
# 1199
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1201
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1202
__x) 
# 1203
{ return __x + __n; } 
# 1205
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1207
make_move_iterator(_Iterator __i) 
# 1208
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1210
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> constexpr _ReturnType 
# 1215
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1216
{ return (_ReturnType)__i; } 
# 1220
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> constexpr _ReturnType 
# 1224
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1225
{ return (_ReturnType)__i; } 
# 1229
template< class _Iterator> auto 
# 1231
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 1233
{ return make_move_iterator(__niter_base(__it.base())); } 
# 1235
template< class _Iterator> 
# 1236
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 1238
enum { __value = 1}; 
# 1239
typedef __true_type __type; 
# 1240
}; 
# 1242
template< class _Iterator> auto 
# 1244
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 1246
{ return __miter_base(__it.base()); } 
# 1249
}
# 48 "/usr/include/c++/7/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 59
}
# 33 "/usr/include/c++/7/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> constexpr bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 48
constexpr _Iter_less_iter __iter_less_iter() 
# 49
{ return _Iter_less_iter(); } 
# 51
struct _Iter_less_val { 
# 54
constexpr _Iter_less_val() = default;
# 60
explicit _Iter_less_val(_Iter_less_iter) { } 
# 62
template< class _Iterator, class _Value> bool 
# 64
operator()(_Iterator __it, _Value &__val) const 
# 65
{ return (*__it) < __val; } 
# 66
}; 
# 69
inline _Iter_less_val __iter_less_val() 
# 70
{ return _Iter_less_val(); } 
# 73
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 74
{ return _Iter_less_val(); } 
# 76
struct _Val_less_iter { 
# 79
constexpr _Val_less_iter() = default;
# 85
explicit _Val_less_iter(_Iter_less_iter) { } 
# 87
template< class _Value, class _Iterator> bool 
# 89
operator()(_Value &__val, _Iterator __it) const 
# 90
{ return __val < (*__it); } 
# 91
}; 
# 94
inline _Val_less_iter __val_less_iter() 
# 95
{ return _Val_less_iter(); } 
# 98
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 99
{ return _Val_less_iter(); } 
# 101
struct _Iter_equal_to_iter { 
# 103
template< class _Iterator1, class _Iterator2> bool 
# 105
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 106
{ return (*__it1) == (*__it2); } 
# 107
}; 
# 110
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 111
{ return _Iter_equal_to_iter(); } 
# 113
struct _Iter_equal_to_val { 
# 115
template< class _Iterator, class _Value> bool 
# 117
operator()(_Iterator __it, _Value &__val) const 
# 118
{ return (*__it) == __val; } 
# 119
}; 
# 122
inline _Iter_equal_to_val __iter_equal_to_val() 
# 123
{ return _Iter_equal_to_val(); } 
# 126
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 127
{ return _Iter_equal_to_val(); } 
# 129
template< class _Compare> 
# 130
struct _Iter_comp_iter { 
# 132
_Compare _M_comp; 
# 135
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 137
{ } 
# 139
template< class _Iterator1, class _Iterator2> constexpr bool 
# 142
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 143
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 144
}; 
# 146
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 149
__iter_comp_iter(_Compare __comp) 
# 150
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 152
template< class _Compare> 
# 153
struct _Iter_comp_val { 
# 155
_Compare _M_comp; 
# 158
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 160
{ } 
# 163
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 165
{ } 
# 169
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 171
{ } 
# 174
template< class _Iterator, class _Value> bool 
# 176
operator()(_Iterator __it, _Value &__val) 
# 177
{ return (bool)(_M_comp)(*__it, __val); } 
# 178
}; 
# 180
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 182
__iter_comp_val(_Compare __comp) 
# 183
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 185
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 187
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 188
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 190
template< class _Compare> 
# 191
struct _Val_comp_iter { 
# 193
_Compare _M_comp; 
# 196
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 198
{ } 
# 201
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 203
{ } 
# 207
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 209
{ } 
# 212
template< class _Value, class _Iterator> bool 
# 214
operator()(_Value &__val, _Iterator __it) 
# 215
{ return (bool)(_M_comp)(__val, *__it); } 
# 216
}; 
# 218
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 220
__val_comp_iter(_Compare __comp) 
# 221
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 223
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 225
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 226
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 228
template< class _Value> 
# 229
struct _Iter_equals_val { 
# 231
_Value &_M_value; 
# 234
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 236
{ } 
# 238
template< class _Iterator> bool 
# 240
operator()(_Iterator __it) 
# 241
{ return (*__it) == (_M_value); } 
# 242
}; 
# 244
template< class _Value> inline _Iter_equals_val< _Value>  
# 246
__iter_equals_val(_Value &__val) 
# 247
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 249
template< class _Iterator1> 
# 250
struct _Iter_equals_iter { 
# 252
_Iterator1 _M_it1; 
# 255
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 257
{ } 
# 259
template< class _Iterator2> bool 
# 261
operator()(_Iterator2 __it2) 
# 262
{ return (*__it2) == (*(_M_it1)); } 
# 263
}; 
# 265
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 267
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 268
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 270
template< class _Predicate> 
# 271
struct _Iter_pred { 
# 273
_Predicate _M_pred; 
# 276
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 278
{ } 
# 280
template< class _Iterator> bool 
# 282
operator()(_Iterator __it) 
# 283
{ return (bool)(_M_pred)(*__it); } 
# 284
}; 
# 286
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 288
__pred_iter(_Predicate __pred) 
# 289
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 291
template< class _Compare, class _Value> 
# 292
struct _Iter_comp_to_val { 
# 294
_Compare _M_comp; 
# 295
_Value &_M_value; 
# 297
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 299
{ } 
# 301
template< class _Iterator> bool 
# 303
operator()(_Iterator __it) 
# 304
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 305
}; 
# 307
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 309
__iter_comp_val(_Compare __comp, _Value &__val) 
# 310
{ 
# 311
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 312
} 
# 314
template< class _Compare, class _Iterator1> 
# 315
struct _Iter_comp_to_iter { 
# 317
_Compare _M_comp; 
# 318
_Iterator1 _M_it1; 
# 320
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 322
{ } 
# 324
template< class _Iterator2> bool 
# 326
operator()(_Iterator2 __it2) 
# 327
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 328
}; 
# 330
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 332
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 333
{ 
# 334
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 336
} 
# 338
template< class _Predicate> 
# 339
struct _Iter_negate { 
# 341
_Predicate _M_pred; 
# 344
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 346
{ } 
# 348
template< class _Iterator> bool 
# 350
operator()(_Iterator __it) 
# 351
{ return !((bool)(_M_pred)(*__it)); } 
# 352
}; 
# 354
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 356
__negate(_Iter_pred< _Predicate>  __pred) 
# 357
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 359
}
# 360
}
# 73 "/usr/include/c++/7/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 118 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 120
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 121
{ 
# 148 "/usr/include/c++/7/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 150
} 
# 164 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 166
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 167
__first2) 
# 168
{ 
# 174
; 
# 176
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 177
std::iter_swap(__first1, __first2); }  
# 178
return __first2; 
# 179
} 
# 192 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 195
min(const _Tp &__a, const _Tp &__b) 
# 196
{ 
# 200
if (__b < __a) { 
# 201
return __b; }  
# 202
return __a; 
# 203
} 
# 216 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 219
max(const _Tp &__a, const _Tp &__b) 
# 220
{ 
# 224
if (__a < __b) { 
# 225
return __b; }  
# 226
return __a; 
# 227
} 
# 240 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 243
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 244
{ 
# 246
if (__comp(__b, __a)) { 
# 247
return __b; }  
# 248
return __a; 
# 249
} 
# 262 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 265
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 266
{ 
# 268
if (__comp(__a, __b)) { 
# 269
return __b; }  
# 270
return __a; 
# 271
} 
# 275
template< class _Iterator> inline _Iterator 
# 277
__niter_base(_Iterator __it) 
# 278
{ return __it; } 
# 286
template< bool , bool , class > 
# 287
struct __copy_move { 
# 289
template< class _II, class _OI> static _OI 
# 291
__copy_m(_II __first, _II __last, _OI __result) 
# 292
{ 
# 293
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 294
(*__result) = (*__first); }  
# 295
return __result; 
# 296
} 
# 297
}; 
# 300
template< class _Category> 
# 301
struct __copy_move< true, false, _Category>  { 
# 303
template< class _II, class _OI> static _OI 
# 305
__copy_m(_II __first, _II __last, _OI __result) 
# 306
{ 
# 307
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 308
(*__result) = std::move(*__first); }  
# 309
return __result; 
# 310
} 
# 311
}; 
# 315
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 317
template< class _II, class _OI> static _OI 
# 319
__copy_m(_II __first, _II __last, _OI __result) 
# 320
{ 
# 321
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 322
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 323
{ 
# 324
(*__result) = (*__first); 
# 325
++__first; 
# 326
++__result; 
# 327
}  
# 328
return __result; 
# 329
} 
# 330
}; 
# 334
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 336
template< class _II, class _OI> static _OI 
# 338
__copy_m(_II __first, _II __last, _OI __result) 
# 339
{ 
# 340
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 341
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 342
{ 
# 343
(*__result) = std::move(*__first); 
# 344
++__first; 
# 345
++__result; 
# 346
}  
# 347
return __result; 
# 348
} 
# 349
}; 
# 352
template< bool _IsMove> 
# 353
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 355
template< class _Tp> static _Tp *
# 357
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 358
{ 
# 360
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 364
static_assert((__assignable::type::value), "type is not assignable");
# 366
const ptrdiff_t _Num = __last - __first; 
# 367
if (_Num) { 
# 368
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 369
return __result + _Num; 
# 370
} 
# 371
}; 
# 373
template< bool _IsMove, class _II, class _OI> inline _OI 
# 375
__copy_move_a(_II __first, _II __last, _OI __result) 
# 376
{ 
# 377
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 378
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 379
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 380
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 385
return std::template __copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 387
} 
# 391
template< class _CharT> struct char_traits; 
# 394
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 397
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 400
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 406
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 412
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 418
template< bool _IsMove, class _II, class _OI> inline _OI 
# 420
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 421
{ 
# 422
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 425
} 
# 444 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 446
copy(_II __first, _II __last, _OI __result) 
# 447
{ 
# 452
; 
# 454
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 457
} 
# 477 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 479
move(_II __first, _II __last, _OI __result) 
# 480
{ 
# 485
; 
# 487
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 489
} 
# 496
template< bool , bool , class > 
# 497
struct __copy_move_backward { 
# 499
template< class _BI1, class _BI2> static _BI2 
# 501
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 502
{ 
# 503
while (__first != __last) { 
# 504
(*(--__result)) = (*(--__last)); }  
# 505
return __result; 
# 506
} 
# 507
}; 
# 510
template< class _Category> 
# 511
struct __copy_move_backward< true, false, _Category>  { 
# 513
template< class _BI1, class _BI2> static _BI2 
# 515
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 516
{ 
# 517
while (__first != __last) { 
# 518
(*(--__result)) = std::move(*(--__last)); }  
# 519
return __result; 
# 520
} 
# 521
}; 
# 525
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 527
template< class _BI1, class _BI2> static _BI2 
# 529
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 530
{ 
# 531
typename iterator_traits< _BI1> ::difference_type __n; 
# 532
for (__n = (__last - __first); __n > 0; --__n) { 
# 533
(*(--__result)) = (*(--__last)); }  
# 534
return __result; 
# 535
} 
# 536
}; 
# 540
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 542
template< class _BI1, class _BI2> static _BI2 
# 544
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 545
{ 
# 546
typename iterator_traits< _BI1> ::difference_type __n; 
# 547
for (__n = (__last - __first); __n > 0; --__n) { 
# 548
(*(--__result)) = std::move(*(--__last)); }  
# 549
return __result; 
# 550
} 
# 551
}; 
# 554
template< bool _IsMove> 
# 555
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 557
template< class _Tp> static _Tp *
# 559
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 560
{ 
# 562
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 566
static_assert((__assignable::type::value), "type is not assignable");
# 568
const ptrdiff_t _Num = __last - __first; 
# 569
if (_Num) { 
# 570
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 571
return __result - _Num; 
# 572
} 
# 573
}; 
# 575
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 577
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 578
{ 
# 579
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 580
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 581
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 582
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 587
return std::template __copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 591
} 
# 593
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 595
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 596
{ 
# 597
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 600
} 
# 620 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 622
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 623
{ 
# 630
; 
# 632
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 635
} 
# 656 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 658
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 659
{ 
# 666
; 
# 668
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 671
} 
# 678
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 681
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 682
__value) 
# 683
{ 
# 684
for (; __first != __last; ++__first) { 
# 685
(*__first) = __value; }  
# 686
} 
# 688
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 691
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 692
__value) 
# 693
{ 
# 694
const _Tp __tmp = __value; 
# 695
for (; __first != __last; ++__first) { 
# 696
(*__first) = __tmp; }  
# 697
} 
# 700
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 703
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 704
{ 
# 705
const _Tp __tmp = __c; 
# 706
if (const size_t __len = __last - __first) { 
# 707
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 708
} 
# 722 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 724
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 725
{ 
# 729
; 
# 731
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 733
} 
# 735
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 738
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 739
{ 
# 740
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 742
(*__first) = __value; }  
# 743
return __first; 
# 744
} 
# 746
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 749
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 750
{ 
# 751
const _Tp __tmp = __value; 
# 752
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 754
(*__first) = __tmp; }  
# 755
return __first; 
# 756
} 
# 758
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 761
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 762
{ 
# 763
std::__fill_a(__first, __first + __n, __c); 
# 764
return __first + __n; 
# 765
} 
# 782 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 784
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 785
{ 
# 789
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value); 
# 790
} 
# 792
template< bool _BoolType> 
# 793
struct __equal { 
# 795
template< class _II1, class _II2> static bool 
# 797
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 798
{ 
# 799
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 800
if (!((*__first1) == (*__first2))) { 
# 801
return false; }  }  
# 802
return true; 
# 803
} 
# 804
}; 
# 807
template<> struct __equal< true>  { 
# 809
template< class _Tp> static bool 
# 811
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 812
{ 
# 813
if (const size_t __len = __last1 - __first1) { 
# 814
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 815
return true; 
# 816
} 
# 817
}; 
# 819
template< class _II1, class _II2> inline bool 
# 821
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 822
{ 
# 823
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 824
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 825
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 831
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 832
} 
# 834
template< class , class > 
# 835
struct __lc_rai { 
# 837
template< class _II1, class _II2> static _II1 
# 839
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 840
{ return __last1; } 
# 842
template< class _II> static bool 
# 844
__cnd2(_II __first, _II __last) 
# 845
{ return __first != __last; } 
# 846
}; 
# 849
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 851
template< class _RAI1, class _RAI2> static _RAI1 
# 853
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 854
__first2, _RAI2 __last2) 
# 855
{ 
# 857
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 859
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 860
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 861
} 
# 863
template< class _RAI> static bool 
# 865
__cnd2(_RAI, _RAI) 
# 866
{ return true; } 
# 867
}; 
# 869
template< class _II1, class _II2, class _Compare> bool 
# 871
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 872
__first2, _II2 __last2, _Compare 
# 873
__comp) 
# 874
{ 
# 875
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 876
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 877
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 879
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 880
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 882
{ 
# 883
if (__comp(__first1, __first2)) { 
# 884
return true; }  
# 885
if (__comp(__first2, __first1)) { 
# 886
return false; }  
# 887
}  
# 888
return (__first1 == __last1) && (__first2 != __last2); 
# 889
} 
# 891
template< bool _BoolType> 
# 892
struct __lexicographical_compare { 
# 894
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 896
}; 
# 898
template< bool _BoolType> 
# 899
template< class _II1, class _II2> bool 
# 902
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 903
{ 
# 904
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 907
} 
# 910
template<> struct __lexicographical_compare< true>  { 
# 912
template< class _Tp, class _Up> static bool 
# 914
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 915
__first2, const _Up *__last2) 
# 916
{ 
# 917
const size_t __len1 = __last1 - __first1; 
# 918
const size_t __len2 = __last2 - __first2; 
# 919
if (const size_t __len = std::min(__len1, __len2)) { 
# 920
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 921
return __result < 0; }  }  
# 922
return __len1 < __len2; 
# 923
} 
# 924
}; 
# 926
template< class _II1, class _II2> inline bool 
# 928
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 929
__first2, _II2 __last2) 
# 930
{ 
# 931
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 932
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 933
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::template __numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 940
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 942
} 
# 944
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 946
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 947
__val, _Compare __comp) 
# 948
{ 
# 950
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 952
_DistanceType __len = std::distance(__first, __last); 
# 954
while (__len > 0) 
# 955
{ 
# 956
_DistanceType __half = __len >> 1; 
# 957
_ForwardIterator __middle = __first; 
# 958
std::advance(__middle, __half); 
# 959
if (__comp(__middle, __val)) 
# 960
{ 
# 961
__first = __middle; 
# 962
++__first; 
# 963
__len = ((__len - __half) - 1); 
# 964
} else { 
# 966
__len = __half; }  
# 967
}  
# 968
return __first; 
# 969
} 
# 982 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 984
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 985
__val) 
# 986
{ 
# 991
; 
# 993
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 995
} 
# 1000
constexpr int __lg(int __n) 
# 1001
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1004
constexpr unsigned __lg(unsigned __n) 
# 1005
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1008
constexpr long __lg(long __n) 
# 1009
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1012
constexpr unsigned long __lg(unsigned long __n) 
# 1013
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1016
constexpr long long __lg(long long __n) 
# 1017
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1020
constexpr unsigned long long __lg(unsigned long long __n) 
# 1021
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1039 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1041
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1042
{ 
# 1049
; 
# 1051
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1054
} 
# 1071 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1073
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1074
__first2, _BinaryPredicate __binary_pred) 
# 1075
{ 
# 1079
; 
# 1081
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1082
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1083
return false; }  }  
# 1084
return true; 
# 1085
} 
# 1104 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1106
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1107
{ 
# 1114
; 
# 1115
; 
# 1117
using _RATag = random_access_iterator_tag; 
# 1118
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1119
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1120
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1121
if (_RAIters()) 
# 1122
{ 
# 1123
auto __d1 = std::distance(__first1, __last1); 
# 1124
auto __d2 = std::distance(__first2, __last2); 
# 1125
if (__d1 != __d2) { 
# 1126
return false; }  
# 1127
return std::equal(__first1, __last1, __first2); 
# 1128
}  
# 1130
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1132
if (!((*__first1) == (*__first2))) { 
# 1133
return false; }  }  
# 1134
return (__first1 == __last1) && (__first2 == __last2); 
# 1135
} 
# 1153 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1155
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1156
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1157
{ 
# 1161
; 
# 1162
; 
# 1164
using _RATag = random_access_iterator_tag; 
# 1165
using _Cat1 = typename iterator_traits< _IIter1> ::iterator_category; 
# 1166
using _Cat2 = typename iterator_traits< _IIter2> ::iterator_category; 
# 1167
using _RAIters = __and_< is_same< typename iterator_traits< _IIter1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _IIter2> ::iterator_category, random_access_iterator_tag> > ; 
# 1168
if (_RAIters()) 
# 1169
{ 
# 1170
auto __d1 = std::distance(__first1, __last1); 
# 1171
auto __d2 = std::distance(__first2, __last2); 
# 1172
if (__d1 != __d2) { 
# 1173
return false; }  
# 1174
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1176
}  
# 1178
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1180
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1181
return false; }  }  
# 1182
return (__first1 == __last1) && (__first2 == __last2); 
# 1183
} 
# 1201 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1203
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1204
__first2, _II2 __last2) 
# 1205
{ 
# 1215
; 
# 1216
; 
# 1218
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1222
} 
# 1237 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1239
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1240
__first2, _II2 __last2, _Compare __comp) 
# 1241
{ 
# 1245
; 
# 1246
; 
# 1248
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1251
} 
# 1253
template< class _InputIterator1, class _InputIterator2, class 
# 1254
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1256
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1257
__first2, _BinaryPredicate __binary_pred) 
# 1258
{ 
# 1259
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1260
{ 
# 1261
++__first1; 
# 1262
++__first2; 
# 1263
}  
# 1264
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1265
} 
# 1280 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1282
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1283
__first2) 
# 1284
{ 
# 1291
; 
# 1293
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1295
} 
# 1313 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1314
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1316
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1317
__first2, _BinaryPredicate __binary_pred) 
# 1318
{ 
# 1322
; 
# 1324
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1326
} 
# 1330
template< class _InputIterator1, class _InputIterator2, class 
# 1331
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1333
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1334
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1335
__binary_pred) 
# 1336
{ 
# 1337
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1339
{ 
# 1340
++__first1; 
# 1341
++__first2; 
# 1342
}  
# 1343
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1344
} 
# 1360 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1362
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1363
__first2, _InputIterator2 __last2) 
# 1364
{ 
# 1371
; 
# 1372
; 
# 1374
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1376
} 
# 1395 "/usr/include/c++/7/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1396
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1398
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1399
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1400
__binary_pred) 
# 1401
{ 
# 1405
; 
# 1406
; 
# 1408
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1410
} 
# 1414
}
# 158 "/usr/include/c++/7/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/7/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr inline bool is_specialized = false; 
# 211
static constexpr inline int digits = 0; 
# 214
static constexpr inline int digits10 = 0; 
# 219
static constexpr inline int max_digits10 = 0; 
# 223
static constexpr inline bool is_signed = false; 
# 226
static constexpr inline bool is_integer = false; 
# 231
static constexpr inline bool is_exact = false; 
# 235
static constexpr inline int radix = 0; 
# 239
static constexpr inline int min_exponent = 0; 
# 243
static constexpr inline int min_exponent10 = 0; 
# 248
static constexpr inline int max_exponent = 0; 
# 252
static constexpr inline int max_exponent10 = 0; 
# 255
static constexpr inline bool has_infinity = false; 
# 259
static constexpr inline bool has_quiet_NaN = false; 
# 263
static constexpr inline bool has_signaling_NaN = false; 
# 266
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr inline bool has_denorm_loss = false; 
# 274
static constexpr inline bool is_iec559 = false; 
# 279
static constexpr inline bool is_bounded = false; 
# 288 "/usr/include/c++/7/limits" 3
static constexpr inline bool is_modulo = false; 
# 291
static constexpr inline bool traps = false; 
# 294
static constexpr inline bool tinyness_before = false; 
# 299
static constexpr inline float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/7/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 383 "/usr/include/c++/7/limits" 3
template<> struct numeric_limits< bool>  { 
# 385
static constexpr inline bool is_specialized = true; 
# 388
static constexpr bool min() noexcept { return false; } 
# 391
static constexpr bool max() noexcept { return true; } 
# 395
static constexpr bool lowest() noexcept { return min(); } 
# 397
static constexpr inline int digits = 1; 
# 398
static constexpr inline int digits10 = 0; 
# 400
static constexpr inline int max_digits10 = 0; 
# 402
static constexpr inline bool is_signed = false; 
# 403
static constexpr inline bool is_integer = true; 
# 404
static constexpr inline bool is_exact = true; 
# 405
static constexpr inline int radix = 2; 
# 408
static constexpr bool epsilon() noexcept { return false; } 
# 411
static constexpr bool round_error() noexcept { return false; } 
# 413
static constexpr inline int min_exponent = 0; 
# 414
static constexpr inline int min_exponent10 = 0; 
# 415
static constexpr inline int max_exponent = 0; 
# 416
static constexpr inline int max_exponent10 = 0; 
# 418
static constexpr inline bool has_infinity = false; 
# 419
static constexpr inline bool has_quiet_NaN = false; 
# 420
static constexpr inline bool has_signaling_NaN = false; 
# 421
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 423
static constexpr inline bool has_denorm_loss = false; 
# 426
static constexpr bool infinity() noexcept { return false; } 
# 429
static constexpr bool quiet_NaN() noexcept { return false; } 
# 432
static constexpr bool signaling_NaN() noexcept { return false; } 
# 435
static constexpr bool denorm_min() noexcept { return false; } 
# 437
static constexpr inline bool is_iec559 = false; 
# 438
static constexpr inline bool is_bounded = true; 
# 439
static constexpr inline bool is_modulo = false; 
# 444
static constexpr inline bool traps = true; 
# 445
static constexpr inline bool tinyness_before = false; 
# 446
static constexpr inline float_round_style round_style = round_toward_zero; 
# 448
}; 
# 452
template<> struct numeric_limits< char>  { 
# 454
static constexpr inline bool is_specialized = true; 
# 457
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 460
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 464
static constexpr char lowest() noexcept { return min(); } 
# 467
static constexpr inline int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 468
static constexpr inline int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 470
static constexpr inline int max_digits10 = 0; 
# 472
static constexpr inline bool is_signed = (((char)(-1)) < 0); 
# 473
static constexpr inline bool is_integer = true; 
# 474
static constexpr inline bool is_exact = true; 
# 475
static constexpr inline int radix = 2; 
# 478
static constexpr char epsilon() noexcept { return 0; } 
# 481
static constexpr char round_error() noexcept { return 0; } 
# 483
static constexpr inline int min_exponent = 0; 
# 484
static constexpr inline int min_exponent10 = 0; 
# 485
static constexpr inline int max_exponent = 0; 
# 486
static constexpr inline int max_exponent10 = 0; 
# 488
static constexpr inline bool has_infinity = false; 
# 489
static constexpr inline bool has_quiet_NaN = false; 
# 490
static constexpr inline bool has_signaling_NaN = false; 
# 491
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 493
static constexpr inline bool has_denorm_loss = false; 
# 496
static constexpr char infinity() noexcept { return ((char)0); } 
# 499
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 502
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 505
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 507
static constexpr inline bool is_iec559 = false; 
# 508
static constexpr inline bool is_bounded = true; 
# 509
static constexpr inline bool is_modulo = (!is_signed); 
# 511
static constexpr inline bool traps = true; 
# 512
static constexpr inline bool tinyness_before = false; 
# 513
static constexpr inline float_round_style round_style = round_toward_zero; 
# 515
}; 
# 519
template<> struct numeric_limits< signed char>  { 
# 521
static constexpr inline bool is_specialized = true; 
# 524
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 527
static constexpr signed char max() noexcept { return 127; } 
# 531
static constexpr signed char lowest() noexcept { return min(); } 
# 534
static constexpr inline int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 535
static constexpr inline int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 538
static constexpr inline int max_digits10 = 0; 
# 540
static constexpr inline bool is_signed = true; 
# 541
static constexpr inline bool is_integer = true; 
# 542
static constexpr inline bool is_exact = true; 
# 543
static constexpr inline int radix = 2; 
# 546
static constexpr signed char epsilon() noexcept { return 0; } 
# 549
static constexpr signed char round_error() noexcept { return 0; } 
# 551
static constexpr inline int min_exponent = 0; 
# 552
static constexpr inline int min_exponent10 = 0; 
# 553
static constexpr inline int max_exponent = 0; 
# 554
static constexpr inline int max_exponent10 = 0; 
# 556
static constexpr inline bool has_infinity = false; 
# 557
static constexpr inline bool has_quiet_NaN = false; 
# 558
static constexpr inline bool has_signaling_NaN = false; 
# 559
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 561
static constexpr inline bool has_denorm_loss = false; 
# 564
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 567
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 570
static constexpr signed char signaling_NaN() noexcept 
# 571
{ return static_cast< signed char>(0); } 
# 574
static constexpr signed char denorm_min() noexcept 
# 575
{ return static_cast< signed char>(0); } 
# 577
static constexpr inline bool is_iec559 = false; 
# 578
static constexpr inline bool is_bounded = true; 
# 579
static constexpr inline bool is_modulo = false; 
# 581
static constexpr inline bool traps = true; 
# 582
static constexpr inline bool tinyness_before = false; 
# 583
static constexpr inline float_round_style round_style = round_toward_zero; 
# 585
}; 
# 589
template<> struct numeric_limits< unsigned char>  { 
# 591
static constexpr inline bool is_specialized = true; 
# 594
static constexpr unsigned char min() noexcept { return 0; } 
# 597
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 601
static constexpr unsigned char lowest() noexcept { return min(); } 
# 604
static constexpr inline int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 606
static constexpr inline int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 609
static constexpr inline int max_digits10 = 0; 
# 611
static constexpr inline bool is_signed = false; 
# 612
static constexpr inline bool is_integer = true; 
# 613
static constexpr inline bool is_exact = true; 
# 614
static constexpr inline int radix = 2; 
# 617
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 620
static constexpr unsigned char round_error() noexcept { return 0; } 
# 622
static constexpr inline int min_exponent = 0; 
# 623
static constexpr inline int min_exponent10 = 0; 
# 624
static constexpr inline int max_exponent = 0; 
# 625
static constexpr inline int max_exponent10 = 0; 
# 627
static constexpr inline bool has_infinity = false; 
# 628
static constexpr inline bool has_quiet_NaN = false; 
# 629
static constexpr inline bool has_signaling_NaN = false; 
# 630
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 632
static constexpr inline bool has_denorm_loss = false; 
# 635
static constexpr unsigned char infinity() noexcept 
# 636
{ return static_cast< unsigned char>(0); } 
# 639
static constexpr unsigned char quiet_NaN() noexcept 
# 640
{ return static_cast< unsigned char>(0); } 
# 643
static constexpr unsigned char signaling_NaN() noexcept 
# 644
{ return static_cast< unsigned char>(0); } 
# 647
static constexpr unsigned char denorm_min() noexcept 
# 648
{ return static_cast< unsigned char>(0); } 
# 650
static constexpr inline bool is_iec559 = false; 
# 651
static constexpr inline bool is_bounded = true; 
# 652
static constexpr inline bool is_modulo = true; 
# 654
static constexpr inline bool traps = true; 
# 655
static constexpr inline bool tinyness_before = false; 
# 656
static constexpr inline float_round_style round_style = round_toward_zero; 
# 658
}; 
# 662
template<> struct numeric_limits< wchar_t>  { 
# 664
static constexpr inline bool is_specialized = true; 
# 667
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 670
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 674
static constexpr wchar_t lowest() noexcept { return min(); } 
# 677
static constexpr inline int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 678
static constexpr inline int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 681
static constexpr inline int max_digits10 = 0; 
# 683
static constexpr inline bool is_signed = (((wchar_t)(-1)) < 0); 
# 684
static constexpr inline bool is_integer = true; 
# 685
static constexpr inline bool is_exact = true; 
# 686
static constexpr inline int radix = 2; 
# 689
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 692
static constexpr wchar_t round_error() noexcept { return 0; } 
# 694
static constexpr inline int min_exponent = 0; 
# 695
static constexpr inline int min_exponent10 = 0; 
# 696
static constexpr inline int max_exponent = 0; 
# 697
static constexpr inline int max_exponent10 = 0; 
# 699
static constexpr inline bool has_infinity = false; 
# 700
static constexpr inline bool has_quiet_NaN = false; 
# 701
static constexpr inline bool has_signaling_NaN = false; 
# 702
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 704
static constexpr inline bool has_denorm_loss = false; 
# 707
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 710
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 713
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 716
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 718
static constexpr inline bool is_iec559 = false; 
# 719
static constexpr inline bool is_bounded = true; 
# 720
static constexpr inline bool is_modulo = (!is_signed); 
# 722
static constexpr inline bool traps = true; 
# 723
static constexpr inline bool tinyness_before = false; 
# 724
static constexpr inline float_round_style round_style = round_toward_zero; 
# 726
}; 
# 731
template<> struct numeric_limits< char16_t>  { 
# 733
static constexpr inline bool is_specialized = true; 
# 736
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 739
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 742
static constexpr char16_t lowest() noexcept { return min(); } 
# 744
static constexpr inline int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 745
static constexpr inline int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 746
static constexpr inline int max_digits10 = 0; 
# 747
static constexpr inline bool is_signed = (((char16_t)(-1)) < 0); 
# 748
static constexpr inline bool is_integer = true; 
# 749
static constexpr inline bool is_exact = true; 
# 750
static constexpr inline int radix = 2; 
# 753
static constexpr char16_t epsilon() noexcept { return 0; } 
# 756
static constexpr char16_t round_error() noexcept { return 0; } 
# 758
static constexpr inline int min_exponent = 0; 
# 759
static constexpr inline int min_exponent10 = 0; 
# 760
static constexpr inline int max_exponent = 0; 
# 761
static constexpr inline int max_exponent10 = 0; 
# 763
static constexpr inline bool has_infinity = false; 
# 764
static constexpr inline bool has_quiet_NaN = false; 
# 765
static constexpr inline bool has_signaling_NaN = false; 
# 766
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 767
static constexpr inline bool has_denorm_loss = false; 
# 770
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 773
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 776
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 779
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 781
static constexpr inline bool is_iec559 = false; 
# 782
static constexpr inline bool is_bounded = true; 
# 783
static constexpr inline bool is_modulo = (!is_signed); 
# 785
static constexpr inline bool traps = true; 
# 786
static constexpr inline bool tinyness_before = false; 
# 787
static constexpr inline float_round_style round_style = round_toward_zero; 
# 788
}; 
# 792
template<> struct numeric_limits< char32_t>  { 
# 794
static constexpr inline bool is_specialized = true; 
# 797
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 800
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 803
static constexpr char32_t lowest() noexcept { return min(); } 
# 805
static constexpr inline int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 806
static constexpr inline int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 807
static constexpr inline int max_digits10 = 0; 
# 808
static constexpr inline bool is_signed = (((char32_t)(-1)) < (0)); 
# 809
static constexpr inline bool is_integer = true; 
# 810
static constexpr inline bool is_exact = true; 
# 811
static constexpr inline int radix = 2; 
# 814
static constexpr char32_t epsilon() noexcept { return 0; } 
# 817
static constexpr char32_t round_error() noexcept { return 0; } 
# 819
static constexpr inline int min_exponent = 0; 
# 820
static constexpr inline int min_exponent10 = 0; 
# 821
static constexpr inline int max_exponent = 0; 
# 822
static constexpr inline int max_exponent10 = 0; 
# 824
static constexpr inline bool has_infinity = false; 
# 825
static constexpr inline bool has_quiet_NaN = false; 
# 826
static constexpr inline bool has_signaling_NaN = false; 
# 827
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 828
static constexpr inline bool has_denorm_loss = false; 
# 831
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 834
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 837
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 840
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 842
static constexpr inline bool is_iec559 = false; 
# 843
static constexpr inline bool is_bounded = true; 
# 844
static constexpr inline bool is_modulo = (!is_signed); 
# 846
static constexpr inline bool traps = true; 
# 847
static constexpr inline bool tinyness_before = false; 
# 848
static constexpr inline float_round_style round_style = round_toward_zero; 
# 849
}; 
# 854
template<> struct numeric_limits< short>  { 
# 856
static constexpr inline bool is_specialized = true; 
# 859
static constexpr short min() noexcept { return (-32767) - 1; } 
# 862
static constexpr short max() noexcept { return 32767; } 
# 866
static constexpr short lowest() noexcept { return min(); } 
# 869
static constexpr inline int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 870
static constexpr inline int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 872
static constexpr inline int max_digits10 = 0; 
# 874
static constexpr inline bool is_signed = true; 
# 875
static constexpr inline bool is_integer = true; 
# 876
static constexpr inline bool is_exact = true; 
# 877
static constexpr inline int radix = 2; 
# 880
static constexpr short epsilon() noexcept { return 0; } 
# 883
static constexpr short round_error() noexcept { return 0; } 
# 885
static constexpr inline int min_exponent = 0; 
# 886
static constexpr inline int min_exponent10 = 0; 
# 887
static constexpr inline int max_exponent = 0; 
# 888
static constexpr inline int max_exponent10 = 0; 
# 890
static constexpr inline bool has_infinity = false; 
# 891
static constexpr inline bool has_quiet_NaN = false; 
# 892
static constexpr inline bool has_signaling_NaN = false; 
# 893
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 895
static constexpr inline bool has_denorm_loss = false; 
# 898
static constexpr short infinity() noexcept { return ((short)0); } 
# 901
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 904
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 907
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 909
static constexpr inline bool is_iec559 = false; 
# 910
static constexpr inline bool is_bounded = true; 
# 911
static constexpr inline bool is_modulo = false; 
# 913
static constexpr inline bool traps = true; 
# 914
static constexpr inline bool tinyness_before = false; 
# 915
static constexpr inline float_round_style round_style = round_toward_zero; 
# 917
}; 
# 921
template<> struct numeric_limits< unsigned short>  { 
# 923
static constexpr inline bool is_specialized = true; 
# 926
static constexpr unsigned short min() noexcept { return 0; } 
# 929
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 933
static constexpr unsigned short lowest() noexcept { return min(); } 
# 936
static constexpr inline int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 938
static constexpr inline int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 941
static constexpr inline int max_digits10 = 0; 
# 943
static constexpr inline bool is_signed = false; 
# 944
static constexpr inline bool is_integer = true; 
# 945
static constexpr inline bool is_exact = true; 
# 946
static constexpr inline int radix = 2; 
# 949
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 952
static constexpr unsigned short round_error() noexcept { return 0; } 
# 954
static constexpr inline int min_exponent = 0; 
# 955
static constexpr inline int min_exponent10 = 0; 
# 956
static constexpr inline int max_exponent = 0; 
# 957
static constexpr inline int max_exponent10 = 0; 
# 959
static constexpr inline bool has_infinity = false; 
# 960
static constexpr inline bool has_quiet_NaN = false; 
# 961
static constexpr inline bool has_signaling_NaN = false; 
# 962
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 964
static constexpr inline bool has_denorm_loss = false; 
# 967
static constexpr unsigned short infinity() noexcept 
# 968
{ return static_cast< unsigned short>(0); } 
# 971
static constexpr unsigned short quiet_NaN() noexcept 
# 972
{ return static_cast< unsigned short>(0); } 
# 975
static constexpr unsigned short signaling_NaN() noexcept 
# 976
{ return static_cast< unsigned short>(0); } 
# 979
static constexpr unsigned short denorm_min() noexcept 
# 980
{ return static_cast< unsigned short>(0); } 
# 982
static constexpr inline bool is_iec559 = false; 
# 983
static constexpr inline bool is_bounded = true; 
# 984
static constexpr inline bool is_modulo = true; 
# 986
static constexpr inline bool traps = true; 
# 987
static constexpr inline bool tinyness_before = false; 
# 988
static constexpr inline float_round_style round_style = round_toward_zero; 
# 990
}; 
# 994
template<> struct numeric_limits< int>  { 
# 996
static constexpr inline bool is_specialized = true; 
# 999
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1002
static constexpr int max() noexcept { return 2147483647; } 
# 1006
static constexpr int lowest() noexcept { return min(); } 
# 1009
static constexpr inline int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1010
static constexpr inline int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1012
static constexpr inline int max_digits10 = 0; 
# 1014
static constexpr inline bool is_signed = true; 
# 1015
static constexpr inline bool is_integer = true; 
# 1016
static constexpr inline bool is_exact = true; 
# 1017
static constexpr inline int radix = 2; 
# 1020
static constexpr int epsilon() noexcept { return 0; } 
# 1023
static constexpr int round_error() noexcept { return 0; } 
# 1025
static constexpr inline int min_exponent = 0; 
# 1026
static constexpr inline int min_exponent10 = 0; 
# 1027
static constexpr inline int max_exponent = 0; 
# 1028
static constexpr inline int max_exponent10 = 0; 
# 1030
static constexpr inline bool has_infinity = false; 
# 1031
static constexpr inline bool has_quiet_NaN = false; 
# 1032
static constexpr inline bool has_signaling_NaN = false; 
# 1033
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1035
static constexpr inline bool has_denorm_loss = false; 
# 1038
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1041
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1044
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1047
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1049
static constexpr inline bool is_iec559 = false; 
# 1050
static constexpr inline bool is_bounded = true; 
# 1051
static constexpr inline bool is_modulo = false; 
# 1053
static constexpr inline bool traps = true; 
# 1054
static constexpr inline bool tinyness_before = false; 
# 1055
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1057
}; 
# 1061
template<> struct numeric_limits< unsigned>  { 
# 1063
static constexpr inline bool is_specialized = true; 
# 1066
static constexpr unsigned min() noexcept { return 0; } 
# 1069
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1073
static constexpr unsigned lowest() noexcept { return min(); } 
# 1076
static constexpr inline int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1078
static constexpr inline int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1081
static constexpr inline int max_digits10 = 0; 
# 1083
static constexpr inline bool is_signed = false; 
# 1084
static constexpr inline bool is_integer = true; 
# 1085
static constexpr inline bool is_exact = true; 
# 1086
static constexpr inline int radix = 2; 
# 1089
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1092
static constexpr unsigned round_error() noexcept { return 0; } 
# 1094
static constexpr inline int min_exponent = 0; 
# 1095
static constexpr inline int min_exponent10 = 0; 
# 1096
static constexpr inline int max_exponent = 0; 
# 1097
static constexpr inline int max_exponent10 = 0; 
# 1099
static constexpr inline bool has_infinity = false; 
# 1100
static constexpr inline bool has_quiet_NaN = false; 
# 1101
static constexpr inline bool has_signaling_NaN = false; 
# 1102
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1104
static constexpr inline bool has_denorm_loss = false; 
# 1107
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1110
static constexpr unsigned quiet_NaN() noexcept 
# 1111
{ return static_cast< unsigned>(0); } 
# 1114
static constexpr unsigned signaling_NaN() noexcept 
# 1115
{ return static_cast< unsigned>(0); } 
# 1118
static constexpr unsigned denorm_min() noexcept 
# 1119
{ return static_cast< unsigned>(0); } 
# 1121
static constexpr inline bool is_iec559 = false; 
# 1122
static constexpr inline bool is_bounded = true; 
# 1123
static constexpr inline bool is_modulo = true; 
# 1125
static constexpr inline bool traps = true; 
# 1126
static constexpr inline bool tinyness_before = false; 
# 1127
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1129
}; 
# 1133
template<> struct numeric_limits< long>  { 
# 1135
static constexpr inline bool is_specialized = true; 
# 1138
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1141
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1145
static constexpr long lowest() noexcept { return min(); } 
# 1148
static constexpr inline int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1149
static constexpr inline int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1151
static constexpr inline int max_digits10 = 0; 
# 1153
static constexpr inline bool is_signed = true; 
# 1154
static constexpr inline bool is_integer = true; 
# 1155
static constexpr inline bool is_exact = true; 
# 1156
static constexpr inline int radix = 2; 
# 1159
static constexpr long epsilon() noexcept { return 0; } 
# 1162
static constexpr long round_error() noexcept { return 0; } 
# 1164
static constexpr inline int min_exponent = 0; 
# 1165
static constexpr inline int min_exponent10 = 0; 
# 1166
static constexpr inline int max_exponent = 0; 
# 1167
static constexpr inline int max_exponent10 = 0; 
# 1169
static constexpr inline bool has_infinity = false; 
# 1170
static constexpr inline bool has_quiet_NaN = false; 
# 1171
static constexpr inline bool has_signaling_NaN = false; 
# 1172
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1174
static constexpr inline bool has_denorm_loss = false; 
# 1177
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1180
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1183
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1186
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1188
static constexpr inline bool is_iec559 = false; 
# 1189
static constexpr inline bool is_bounded = true; 
# 1190
static constexpr inline bool is_modulo = false; 
# 1192
static constexpr inline bool traps = true; 
# 1193
static constexpr inline bool tinyness_before = false; 
# 1194
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1196
}; 
# 1200
template<> struct numeric_limits< unsigned long>  { 
# 1202
static constexpr inline bool is_specialized = true; 
# 1205
static constexpr unsigned long min() noexcept { return 0; } 
# 1208
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1212
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1215
static constexpr inline int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1217
static constexpr inline int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1220
static constexpr inline int max_digits10 = 0; 
# 1222
static constexpr inline bool is_signed = false; 
# 1223
static constexpr inline bool is_integer = true; 
# 1224
static constexpr inline bool is_exact = true; 
# 1225
static constexpr inline int radix = 2; 
# 1228
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1231
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1233
static constexpr inline int min_exponent = 0; 
# 1234
static constexpr inline int min_exponent10 = 0; 
# 1235
static constexpr inline int max_exponent = 0; 
# 1236
static constexpr inline int max_exponent10 = 0; 
# 1238
static constexpr inline bool has_infinity = false; 
# 1239
static constexpr inline bool has_quiet_NaN = false; 
# 1240
static constexpr inline bool has_signaling_NaN = false; 
# 1241
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1243
static constexpr inline bool has_denorm_loss = false; 
# 1246
static constexpr unsigned long infinity() noexcept 
# 1247
{ return static_cast< unsigned long>(0); } 
# 1250
static constexpr unsigned long quiet_NaN() noexcept 
# 1251
{ return static_cast< unsigned long>(0); } 
# 1254
static constexpr unsigned long signaling_NaN() noexcept 
# 1255
{ return static_cast< unsigned long>(0); } 
# 1258
static constexpr unsigned long denorm_min() noexcept 
# 1259
{ return static_cast< unsigned long>(0); } 
# 1261
static constexpr inline bool is_iec559 = false; 
# 1262
static constexpr inline bool is_bounded = true; 
# 1263
static constexpr inline bool is_modulo = true; 
# 1265
static constexpr inline bool traps = true; 
# 1266
static constexpr inline bool tinyness_before = false; 
# 1267
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1269
}; 
# 1273
template<> struct numeric_limits< long long>  { 
# 1275
static constexpr inline bool is_specialized = true; 
# 1278
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1281
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1285
static constexpr long long lowest() noexcept { return min(); } 
# 1288
static constexpr inline int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1290
static constexpr inline int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1293
static constexpr inline int max_digits10 = 0; 
# 1295
static constexpr inline bool is_signed = true; 
# 1296
static constexpr inline bool is_integer = true; 
# 1297
static constexpr inline bool is_exact = true; 
# 1298
static constexpr inline int radix = 2; 
# 1301
static constexpr long long epsilon() noexcept { return 0; } 
# 1304
static constexpr long long round_error() noexcept { return 0; } 
# 1306
static constexpr inline int min_exponent = 0; 
# 1307
static constexpr inline int min_exponent10 = 0; 
# 1308
static constexpr inline int max_exponent = 0; 
# 1309
static constexpr inline int max_exponent10 = 0; 
# 1311
static constexpr inline bool has_infinity = false; 
# 1312
static constexpr inline bool has_quiet_NaN = false; 
# 1313
static constexpr inline bool has_signaling_NaN = false; 
# 1314
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1316
static constexpr inline bool has_denorm_loss = false; 
# 1319
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1322
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1325
static constexpr long long signaling_NaN() noexcept 
# 1326
{ return static_cast< long long>(0); } 
# 1329
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1331
static constexpr inline bool is_iec559 = false; 
# 1332
static constexpr inline bool is_bounded = true; 
# 1333
static constexpr inline bool is_modulo = false; 
# 1335
static constexpr inline bool traps = true; 
# 1336
static constexpr inline bool tinyness_before = false; 
# 1337
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1339
}; 
# 1343
template<> struct numeric_limits< unsigned long long>  { 
# 1345
static constexpr inline bool is_specialized = true; 
# 1348
static constexpr unsigned long long min() noexcept { return 0; } 
# 1351
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1355
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1358
static constexpr inline int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1360
static constexpr inline int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1363
static constexpr inline int max_digits10 = 0; 
# 1365
static constexpr inline bool is_signed = false; 
# 1366
static constexpr inline bool is_integer = true; 
# 1367
static constexpr inline bool is_exact = true; 
# 1368
static constexpr inline int radix = 2; 
# 1371
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1374
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1376
static constexpr inline int min_exponent = 0; 
# 1377
static constexpr inline int min_exponent10 = 0; 
# 1378
static constexpr inline int max_exponent = 0; 
# 1379
static constexpr inline int max_exponent10 = 0; 
# 1381
static constexpr inline bool has_infinity = false; 
# 1382
static constexpr inline bool has_quiet_NaN = false; 
# 1383
static constexpr inline bool has_signaling_NaN = false; 
# 1384
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1386
static constexpr inline bool has_denorm_loss = false; 
# 1389
static constexpr unsigned long long infinity() noexcept 
# 1390
{ return static_cast< unsigned long long>(0); } 
# 1393
static constexpr unsigned long long quiet_NaN() noexcept 
# 1394
{ return static_cast< unsigned long long>(0); } 
# 1397
static constexpr unsigned long long signaling_NaN() noexcept 
# 1398
{ return static_cast< unsigned long long>(0); } 
# 1401
static constexpr unsigned long long denorm_min() noexcept 
# 1402
{ return static_cast< unsigned long long>(0); } 
# 1404
static constexpr inline bool is_iec559 = false; 
# 1405
static constexpr inline bool is_bounded = true; 
# 1406
static constexpr inline bool is_modulo = true; 
# 1408
static constexpr inline bool traps = true; 
# 1409
static constexpr inline bool tinyness_before = false; 
# 1410
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1412
}; 
# 1594 "/usr/include/c++/7/limits" 3
template<> struct numeric_limits< float>  { 
# 1596
static constexpr inline bool is_specialized = true; 
# 1599
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1602
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1606
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1609
static constexpr inline int digits = 24; 
# 1610
static constexpr inline int digits10 = 6; 
# 1612
static constexpr inline int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1615
static constexpr inline bool is_signed = true; 
# 1616
static constexpr inline bool is_integer = false; 
# 1617
static constexpr inline bool is_exact = false; 
# 1618
static constexpr inline int radix = 2; 
# 1621
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1624
static constexpr float round_error() noexcept { return (0.5F); } 
# 1626
static constexpr inline int min_exponent = (-125); 
# 1627
static constexpr inline int min_exponent10 = (-37); 
# 1628
static constexpr inline int max_exponent = 128; 
# 1629
static constexpr inline int max_exponent10 = 38; 
# 1631
static constexpr inline bool has_infinity = (1); 
# 1632
static constexpr inline bool has_quiet_NaN = (1); 
# 1633
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1634
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1636
static constexpr inline bool has_denorm_loss = false; 
# 1640
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1643
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1646
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1649
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1651
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1653
static constexpr inline bool is_bounded = true; 
# 1654
static constexpr inline bool is_modulo = false; 
# 1656
static constexpr inline bool traps = false; 
# 1657
static constexpr inline bool tinyness_before = false; 
# 1659
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1661
}; 
# 1669
template<> struct numeric_limits< double>  { 
# 1671
static constexpr inline bool is_specialized = true; 
# 1674
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1677
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1681
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1684
static constexpr inline int digits = 53; 
# 1685
static constexpr inline int digits10 = 15; 
# 1687
static constexpr inline int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1690
static constexpr inline bool is_signed = true; 
# 1691
static constexpr inline bool is_integer = false; 
# 1692
static constexpr inline bool is_exact = false; 
# 1693
static constexpr inline int radix = 2; 
# 1696
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1699
static constexpr double round_error() noexcept { return (0.5); } 
# 1701
static constexpr inline int min_exponent = (-1021); 
# 1702
static constexpr inline int min_exponent10 = (-307); 
# 1703
static constexpr inline int max_exponent = 1024; 
# 1704
static constexpr inline int max_exponent10 = 308; 
# 1706
static constexpr inline bool has_infinity = (1); 
# 1707
static constexpr inline bool has_quiet_NaN = (1); 
# 1708
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1709
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1711
static constexpr inline bool has_denorm_loss = false; 
# 1715
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1718
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1721
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1724
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1726
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1728
static constexpr inline bool is_bounded = true; 
# 1729
static constexpr inline bool is_modulo = false; 
# 1731
static constexpr inline bool traps = false; 
# 1732
static constexpr inline bool tinyness_before = false; 
# 1734
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1736
}; 
# 1744
template<> struct numeric_limits< long double>  { 
# 1746
static constexpr inline bool is_specialized = true; 
# 1749
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1752
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1756
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1759
static constexpr inline int digits = 64; 
# 1760
static constexpr inline int digits10 = 18; 
# 1762
static constexpr inline int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1765
static constexpr inline bool is_signed = true; 
# 1766
static constexpr inline bool is_integer = false; 
# 1767
static constexpr inline bool is_exact = false; 
# 1768
static constexpr inline int radix = 2; 
# 1771
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1774
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1776
static constexpr inline int min_exponent = (-16381); 
# 1777
static constexpr inline int min_exponent10 = (-4931); 
# 1778
static constexpr inline int max_exponent = 16384; 
# 1779
static constexpr inline int max_exponent10 = 4932; 
# 1781
static constexpr inline bool has_infinity = (1); 
# 1782
static constexpr inline bool has_quiet_NaN = (1); 
# 1783
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1784
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1786
static constexpr inline bool has_denorm_loss = false; 
# 1790
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1793
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1796
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1799
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1801
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1803
static constexpr inline bool is_bounded = true; 
# 1804
static constexpr inline bool is_modulo = false; 
# 1806
static constexpr inline bool traps = false; 
# 1807
static constexpr inline bool tinyness_before = false; 
# 1809
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1811
}; 
# 1818
}
# 39 "/usr/include/c++/7/tr1/special_function_util.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
namespace __detail { 
# 55
template< class _Tp> 
# 56
struct __floating_point_constant { 
# 58
static const _Tp __value; 
# 59
}; 
# 63
template< class _Tp> 
# 64
struct __numeric_constants { 
# 67
static _Tp __pi() throw() 
# 68
{ return static_cast< _Tp>((3.1415926535897932385L)); } 
# 70
static _Tp __pi_2() throw() 
# 71
{ return static_cast< _Tp>((1.5707963267948966193L)); } 
# 73
static _Tp __pi_3() throw() 
# 74
{ return static_cast< _Tp>((1.0471975511965977461L)); } 
# 76
static _Tp __pi_4() throw() 
# 77
{ return static_cast< _Tp>((0.78539816339744830963L)); } 
# 79
static _Tp __1_pi() throw() 
# 80
{ return static_cast< _Tp>((0.31830988618379067154L)); } 
# 82
static _Tp __2_sqrtpi() throw() 
# 83
{ return static_cast< _Tp>((1.1283791670955125738L)); } 
# 85
static _Tp __sqrt2() throw() 
# 86
{ return static_cast< _Tp>((1.4142135623730950488L)); } 
# 88
static _Tp __sqrt3() throw() 
# 89
{ return static_cast< _Tp>((1.7320508075688772936L)); } 
# 91
static _Tp __sqrtpio2() throw() 
# 92
{ return static_cast< _Tp>((1.2533141373155002512L)); } 
# 94
static _Tp __sqrt1_2() throw() 
# 95
{ return static_cast< _Tp>((0.7071067811865475244L)); } 
# 97
static _Tp __lnpi() throw() 
# 98
{ return static_cast< _Tp>((1.1447298858494001742L)); } 
# 100
static _Tp __gamma_e() throw() 
# 101
{ return static_cast< _Tp>((0.5772156649015328606L)); } 
# 103
static _Tp __euler() throw() 
# 104
{ return static_cast< _Tp>((2.7182818284590452354L)); } 
# 105
}; 
# 114 "/usr/include/c++/7/tr1/special_function_util.h" 3
template< class _Tp> inline bool 
# 115
__isnan(_Tp __x) 
# 116
{ return std::isnan(__x); } 
# 135 "/usr/include/c++/7/tr1/special_function_util.h" 3
}
# 139
}
# 51 "/usr/include/c++/7/tr1/gamma.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/tr1/gamma.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 78
__bernoulli_series(unsigned __n) 
# 79
{ 
# 81
static const _Tp __num[28] = {((_Tp)1UL), ((-((_Tp)1UL)) / ((_Tp)2UL)), (((_Tp)1UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)1UL) / ((_Tp)42UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)5UL) / ((_Tp)66UL)), ((_Tp)0UL), ((-((_Tp)691UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)7UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)3617UL)) / ((_Tp)510UL)), ((_Tp)0UL), (((_Tp)43867UL) / ((_Tp)798UL)), ((_Tp)0UL), ((-((_Tp)174611)) / ((_Tp)330UL)), ((_Tp)0UL), (((_Tp)854513UL) / ((_Tp)138UL)), ((_Tp)0UL), ((-((_Tp)236364091UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)8553103UL) / ((_Tp)6UL)), ((_Tp)0UL)}; 
# 98
if (__n == (0)) { 
# 99
return (_Tp)1; }  
# 101
if (__n == (1)) { 
# 102
return (-((_Tp)1)) / ((_Tp)2); }  
# 105
if ((__n % (2)) == (1)) { 
# 106
return (_Tp)0; }  
# 109
if (__n < (28)) { 
# 110
return __num[__n]; }  
# 113
_Tp __fact = ((_Tp)1); 
# 114
if (((__n / (2)) % (2)) == (0)) { 
# 115
__fact *= ((_Tp)(-1)); }  
# 116
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 117
__fact *= (__k / (((_Tp)2) * __numeric_constants< _Tp> ::__pi())); }  
# 118
__fact *= ((_Tp)2); 
# 120
_Tp __sum = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (1000); ++__i) 
# 122
{ 
# 123
_Tp __term = std::pow((_Tp)__i, -((_Tp)__n)); 
# 124
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__sum += __term; 
# 127
}  
# 129
return __fact * __sum; 
# 130
} 
# 139 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 141
__bernoulli(int __n) 
# 142
{ return __bernoulli_series< _Tp> (__n); } 
# 153 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 155
__log_gamma_bernoulli(_Tp __x) 
# 156
{ 
# 157
_Tp __lg = (((__x - ((_Tp)(0.5L))) * std::log(__x)) - __x) + (((_Tp)(0.5L)) * std::log(((_Tp)2) * __numeric_constants< _Tp> ::__pi())); 
# 161
const _Tp __xx = __x * __x; 
# 162
_Tp __help = ((_Tp)1) / __x; 
# 163
for (unsigned __i = (1); __i < (20); ++__i) 
# 164
{ 
# 165
const _Tp __2i = (_Tp)((2) * __i); 
# 166
__help /= ((__2i * (__2i - ((_Tp)1))) * __xx); 
# 167
__lg += (__bernoulli< _Tp> ((2) * __i) * __help); 
# 168
}  
# 170
return __lg; 
# 171
} 
# 181 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 183
__log_gamma_lanczos(_Tp __x) 
# 184
{ 
# 185
const _Tp __xm1 = __x - ((_Tp)1); 
# 187
static const _Tp __lanczos_cheb_7[9] = {((_Tp)(0.99999999999980993226L)), ((_Tp)(676.52036812188509857L)), ((_Tp)(-(1259.1392167224028704L))), ((_Tp)(771.32342877765307887L)), ((_Tp)(-(176.61502916214059906L))), ((_Tp)(12.507343278686904814L)), ((_Tp)(-(0.1385710952657201169L))), ((_Tp)(9.9843695780195708595E-6L)), ((_Tp)(1.5056327351493115584E-7L))}; 
# 199
static const _Tp __LOGROOT2PI = ((_Tp)(0.9189385332046727418L)); 
# 202
_Tp __sum = (__lanczos_cheb_7[0]); 
# 203
for (unsigned __k = (1); __k < (9); ++__k) { 
# 204
__sum += ((__lanczos_cheb_7[__k]) / (__xm1 + __k)); }  
# 206
const _Tp __term1 = (__xm1 + ((_Tp)(0.5L))) * std::log((__xm1 + ((_Tp)(7.5L))) / __numeric_constants< _Tp> ::__euler()); 
# 209
const _Tp __term2 = __LOGROOT2PI + std::log(__sum); 
# 210
const _Tp __result = __term1 + (__term2 - ((_Tp)7)); 
# 212
return __result; 
# 213
} 
# 225 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 227
__log_gamma(_Tp __x) 
# 228
{ 
# 229
if (__x > ((_Tp)(0.5L))) { 
# 230
return __log_gamma_lanczos(__x); } else 
# 232
{ 
# 233
const _Tp __sin_fact = std::abs(std::sin(__numeric_constants< _Tp> ::__pi() * __x)); 
# 235
if (__sin_fact == ((_Tp)0)) { 
# 236
std::__throw_domain_error("Argument is nonpositive integer in __log_gamma"); }  
# 238
return (__numeric_constants< _Tp> ::__lnpi() - std::log(__sin_fact)) - __log_gamma_lanczos(((_Tp)1) - __x); 
# 241
}  
# 242
} 
# 252 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 254
__log_gamma_sign(_Tp __x) 
# 255
{ 
# 256
if (__x > ((_Tp)0)) { 
# 257
return (_Tp)1; } else 
# 259
{ 
# 260
const _Tp __sin_fact = std::sin(__numeric_constants< _Tp> ::__pi() * __x); 
# 262
if (__sin_fact > ((_Tp)0)) { 
# 263
return 1; } else { 
# 264
if (__sin_fact < ((_Tp)0)) { 
# 265
return -((_Tp)1); } else { 
# 267
return (_Tp)0; }  }  
# 268
}  
# 269
} 
# 283 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 285
__log_bincoef(unsigned __n, unsigned __k) 
# 286
{ 
# 288
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 292
_Tp __coeff = (std::lgamma((_Tp)((1) + __n)) - std::lgamma((_Tp)((1) + __k))) - std::lgamma((_Tp)(((1) + __n) - __k)); 
# 300
} 
# 314 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 316
__bincoef(unsigned __n, unsigned __k) 
# 317
{ 
# 319
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 323
const _Tp __log_coeff = __log_bincoef< _Tp> (__n, __k); 
# 324
if (__log_coeff > __max_bincoeff) { 
# 325
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 327
return std::exp(__log_coeff); }  
# 328
} 
# 337 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 339
__gamma(_Tp __x) 
# 340
{ return std::exp(__log_gamma(__x)); } 
# 356 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 358
__psi_series(_Tp __x) 
# 359
{ 
# 360
_Tp __sum = (-__numeric_constants< _Tp> ::__gamma_e()) - (((_Tp)1) / __x); 
# 361
const unsigned __max_iter = (100000); 
# 362
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 363
{ 
# 364
const _Tp __term = __x / (__k * (__k + __x)); 
# 365
__sum += __term; 
# 366
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 367
break; }  
# 368
}  
# 369
return __sum; 
# 370
} 
# 386 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 388
__psi_asymp(_Tp __x) 
# 389
{ 
# 390
_Tp __sum = std::log(__x) - (((_Tp)(0.5L)) / __x); 
# 391
const _Tp __xx = __x * __x; 
# 392
_Tp __xp = __xx; 
# 393
const unsigned __max_iter = (100); 
# 394
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 395
{ 
# 396
const _Tp __term = __bernoulli< _Tp> ((2) * __k) / (((2) * __k) * __xp); 
# 397
__sum -= __term; 
# 398
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 399
break; }  
# 400
__xp *= __xx; 
# 401
}  
# 402
return __sum; 
# 403
} 
# 417 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 419
__psi(_Tp __x) 
# 420
{ 
# 421
const int __n = static_cast< int>(__x + (0.5L)); 
# 422
const _Tp __eps = ((_Tp)4) * std::template numeric_limits< _Tp> ::epsilon(); 
# 423
if ((__n <= 0) && (std::abs(__x - ((_Tp)__n)) < __eps)) { 
# 424
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 425
if (__x < ((_Tp)0)) 
# 426
{ 
# 427
const _Tp __pi = __numeric_constants< _Tp> ::__pi(); 
# 428
return __psi(((_Tp)1) - __x) - ((__pi * std::cos(__pi * __x)) / std::sin(__pi * __x)); 
# 430
} else { 
# 431
if (__x > ((_Tp)100)) { 
# 432
return __psi_asymp(__x); } else { 
# 434
return __psi_series(__x); }  }  }  
# 435
} 
# 446 "/usr/include/c++/7/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 448
__psi(unsigned __n, _Tp __x) 
# 449
{ 
# 450
if (__x <= ((_Tp)0)) { 
# 451
std::__throw_domain_error("Argument out of range in __psi"); } else { 
# 453
if (__n == (0)) { 
# 454
return __psi(__x); } else 
# 456
{ 
# 457
const _Tp __hzeta = __hurwitz_zeta((_Tp)(__n + (1)), __x); 
# 459
const _Tp __ln_nfact = std::lgamma((_Tp)(__n + (1))); 
# 463
_Tp __result = std::exp(__ln_nfact) * __hzeta; 
# 464
if ((__n % (2)) == (1)) { 
# 465
__result = (-__result); }  
# 466
return __result; 
# 467
}  }  
# 468
} 
# 471
}
# 476
}
# 51 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
namespace __detail { 
# 94 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 96
__gamma_temme(_Tp __mu, _Tp &
# 97
__gam1, _Tp &__gam2, _Tp &__gampl, _Tp &__gammi) 
# 98
{ 
# 100
__gampl = (((_Tp)1) / std::tgamma(((_Tp)1) + __mu)); 
# 101
__gammi = (((_Tp)1) / std::tgamma(((_Tp)1) - __mu)); 
# 107
if (std::abs(__mu) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 108
__gam1 = (-((_Tp)__numeric_constants< _Tp> ::__gamma_e())); } else { 
# 110
__gam1 = ((__gammi - __gampl) / (((_Tp)2) * __mu)); }  
# 112
__gam2 = ((__gammi + __gampl) / ((_Tp)2)); 
# 115
} 
# 132 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 134
__bessel_jn(_Tp __nu, _Tp __x, _Tp &
# 135
__Jnu, _Tp &__Nnu, _Tp &__Jpnu, _Tp &__Npnu) 
# 136
{ 
# 137
if (__x == ((_Tp)0)) 
# 138
{ 
# 139
if (__nu == ((_Tp)0)) 
# 140
{ 
# 141
__Jnu = ((_Tp)1); 
# 142
__Jpnu = ((_Tp)0); 
# 143
} else { 
# 144
if (__nu == ((_Tp)1)) 
# 145
{ 
# 146
__Jnu = ((_Tp)0); 
# 147
__Jpnu = ((_Tp)(0.5L)); 
# 148
} else 
# 150
{ 
# 151
__Jnu = ((_Tp)0); 
# 152
__Jpnu = ((_Tp)0); 
# 153
}  }  
# 154
__Nnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 155
__Npnu = std::template numeric_limits< _Tp> ::infinity(); 
# 156
return; 
# 157
}  
# 159
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 164
const _Tp __fp_min = std::sqrt(std::template numeric_limits< _Tp> ::min()); 
# 165
const int __max_iter = 15000; 
# 166
const _Tp __x_min = ((_Tp)2); 
# 168
const int __nl = (__x < __x_min) ? static_cast< int>(__nu + ((_Tp)(0.5L))) : std::max(0, static_cast< int>((__nu - __x) + ((_Tp)(1.5L)))); 
# 172
const _Tp __mu = __nu - __nl; 
# 173
const _Tp __mu2 = __mu * __mu; 
# 174
const _Tp __xi = ((_Tp)1) / __x; 
# 175
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 176
_Tp __w = __xi2 / __numeric_constants< _Tp> ::__pi(); 
# 177
int __isign = 1; 
# 178
_Tp __h = __nu * __xi; 
# 179
if (__h < __fp_min) { 
# 180
__h = __fp_min; }  
# 181
_Tp __b = __xi2 * __nu; 
# 182
_Tp __d = ((_Tp)0); 
# 183
_Tp __c = __h; 
# 184
int __i; 
# 185
for (__i = 1; __i <= __max_iter; ++__i) 
# 186
{ 
# 187
__b += __xi2; 
# 188
__d = (__b - __d); 
# 189
if (std::abs(__d) < __fp_min) { 
# 190
__d = __fp_min; }  
# 191
__c = (__b - (((_Tp)1) / __c)); 
# 192
if (std::abs(__c) < __fp_min) { 
# 193
__c = __fp_min; }  
# 194
__d = (((_Tp)1) / __d); 
# 195
const _Tp __del = __c * __d; 
# 196
__h *= __del; 
# 197
if (__d < ((_Tp)0)) { 
# 198
__isign = (-__isign); }  
# 199
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 200
break; }  
# 201
}  
# 202
if (__i > __max_iter) { 
# 203
std::__throw_runtime_error("Argument x too large in __bessel_jn; try asymptotic expansion."); }  
# 205
_Tp __Jnul = __isign * __fp_min; 
# 206
_Tp __Jpnul = __h * __Jnul; 
# 207
_Tp __Jnul1 = __Jnul; 
# 208
_Tp __Jpnu1 = __Jpnul; 
# 209
_Tp __fact = __nu * __xi; 
# 210
for (int __l = __nl; __l >= 1; --__l) 
# 211
{ 
# 212
const _Tp __Jnutemp = (__fact * __Jnul) + __Jpnul; 
# 213
__fact -= __xi; 
# 214
__Jpnul = ((__fact * __Jnutemp) - __Jnul); 
# 215
__Jnul = __Jnutemp; 
# 216
}  
# 217
if (__Jnul == ((_Tp)0)) { 
# 218
__Jnul = __eps; }  
# 219
_Tp __f = __Jpnul / __Jnul; 
# 220
_Tp __Nmu, __Nnu1, __Npmu, __Jmu; 
# 221
if (__x < __x_min) 
# 222
{ 
# 223
const _Tp __x2 = __x / ((_Tp)2); 
# 224
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 225
_Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 227
_Tp __d = (-std::log(__x2)); 
# 228
_Tp __e = __mu * __d; 
# 229
_Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 231
_Tp __gam1, __gam2, __gampl, __gammi; 
# 232
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 233
_Tp __ff = ((((_Tp)2) / __numeric_constants< _Tp> ::__pi()) * __fact) * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 235
__e = std::exp(__e); 
# 236
_Tp __p = __e / (__numeric_constants< _Tp> ::__pi() * __gampl); 
# 237
_Tp __q = ((_Tp)1) / ((__e * __numeric_constants< _Tp> ::__pi()) * __gammi); 
# 238
const _Tp __pimu2 = __pimu / ((_Tp)2); 
# 239
_Tp __fact3 = (std::abs(__pimu2) < __eps) ? (_Tp)1 : (std::sin(__pimu2) / __pimu2); 
# 241
_Tp __r = ((__numeric_constants< _Tp> ::__pi() * __pimu2) * __fact3) * __fact3; 
# 242
_Tp __c = ((_Tp)1); 
# 243
__d = ((-__x2) * __x2); 
# 244
_Tp __sum = __ff + (__r * __q); 
# 245
_Tp __sum1 = __p; 
# 246
for (__i = 1; __i <= __max_iter; ++__i) 
# 247
{ 
# 248
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 249
__c *= (__d / ((_Tp)__i)); 
# 250
__p /= (((_Tp)__i) - __mu); 
# 251
__q /= (((_Tp)__i) + __mu); 
# 252
const _Tp __del = __c * (__ff + (__r * __q)); 
# 253
__sum += __del; 
# 254
const _Tp __del1 = (__c * __p) - (__i * __del); 
# 255
__sum1 += __del1; 
# 256
if (std::abs(__del) < (__eps * (((_Tp)1) + std::abs(__sum)))) { 
# 257
break; }  
# 258
}  
# 259
if (__i > __max_iter) { 
# 260
std::__throw_runtime_error("Bessel y series failed to converge in __bessel_jn."); }  
# 262
__Nmu = (-__sum); 
# 263
__Nnu1 = ((-__sum1) * __xi2); 
# 264
__Npmu = (((__mu * __xi) * __Nmu) - __Nnu1); 
# 265
__Jmu = (__w / (__Npmu - (__f * __Nmu))); 
# 266
} else 
# 268
{ 
# 269
_Tp __a = ((_Tp)(0.25L)) - __mu2; 
# 270
_Tp __q = ((_Tp)1); 
# 271
_Tp __p = ((-__xi) / ((_Tp)2)); 
# 272
_Tp __br = ((_Tp)2) * __x; 
# 273
_Tp __bi = ((_Tp)2); 
# 274
_Tp __fact = (__a * __xi) / ((__p * __p) + (__q * __q)); 
# 275
_Tp __cr = __br + (__q * __fact); 
# 276
_Tp __ci = __bi + (__p * __fact); 
# 277
_Tp __den = (__br * __br) + (__bi * __bi); 
# 278
_Tp __dr = __br / __den; 
# 279
_Tp __di = (-__bi) / __den; 
# 280
_Tp __dlr = (__cr * __dr) - (__ci * __di); 
# 281
_Tp __dli = (__cr * __di) + (__ci * __dr); 
# 282
_Tp __temp = (__p * __dlr) - (__q * __dli); 
# 283
__q = ((__p * __dli) + (__q * __dlr)); 
# 284
__p = __temp; 
# 285
int __i; 
# 286
for (__i = 2; __i <= __max_iter; ++__i) 
# 287
{ 
# 288
__a += ((_Tp)(2 * (__i - 1))); 
# 289
__bi += ((_Tp)2); 
# 290
__dr = ((__a * __dr) + __br); 
# 291
__di = ((__a * __di) + __bi); 
# 292
if ((std::abs(__dr) + std::abs(__di)) < __fp_min) { 
# 293
__dr = __fp_min; }  
# 294
__fact = (__a / ((__cr * __cr) + (__ci * __ci))); 
# 295
__cr = (__br + (__cr * __fact)); 
# 296
__ci = (__bi - (__ci * __fact)); 
# 297
if ((std::abs(__cr) + std::abs(__ci)) < __fp_min) { 
# 298
__cr = __fp_min; }  
# 299
__den = ((__dr * __dr) + (__di * __di)); 
# 300
__dr /= __den; 
# 301
__di /= (-__den); 
# 302
__dlr = ((__cr * __dr) - (__ci * __di)); 
# 303
__dli = ((__cr * __di) + (__ci * __dr)); 
# 304
__temp = ((__p * __dlr) - (__q * __dli)); 
# 305
__q = ((__p * __dli) + (__q * __dlr)); 
# 306
__p = __temp; 
# 307
if ((std::abs(__dlr - ((_Tp)1)) + std::abs(__dli)) < __eps) { 
# 308
break; }  
# 309
}  
# 310
if (__i > __max_iter) { 
# 311
std::__throw_runtime_error("Lentz\'s method failed in __bessel_jn."); }  
# 313
const _Tp __gam = (__p - __f) / __q; 
# 314
__Jmu = std::sqrt(__w / (((__p - __f) * __gam) + __q)); 
# 316
__Jmu = std::copysign(__Jmu, __Jnul); 
# 321
__Nmu = (__gam * __Jmu); 
# 322
__Npmu = ((__p + (__q / __gam)) * __Nmu); 
# 323
__Nnu1 = (((__mu * __xi) * __Nmu) - __Npmu); 
# 324
}  
# 325
__fact = (__Jmu / __Jnul); 
# 326
__Jnu = (__fact * __Jnul1); 
# 327
__Jpnu = (__fact * __Jpnu1); 
# 328
for (__i = 1; __i <= __nl; ++__i) 
# 329
{ 
# 330
const _Tp __Nnutemp = (((__mu + __i) * __xi2) * __Nnu1) - __Nmu; 
# 331
__Nmu = __Nnu1; 
# 332
__Nnu1 = __Nnutemp; 
# 333
}  
# 334
__Nnu = __Nmu; 
# 335
__Npnu = (((__nu * __xi) * __Nmu) - __Nnu1); 
# 338
} 
# 357 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 359
__cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp &__Jnu, _Tp &__Nnu) 
# 360
{ 
# 361
const _Tp __mu = (((_Tp)4) * __nu) * __nu; 
# 362
const _Tp __mum1 = __mu - ((_Tp)1); 
# 363
const _Tp __mum9 = __mu - ((_Tp)9); 
# 364
const _Tp __mum25 = __mu - ((_Tp)25); 
# 365
const _Tp __mum49 = __mu - ((_Tp)49); 
# 366
const _Tp __xx = (((_Tp)64) * __x) * __x; 
# 367
const _Tp __P = ((_Tp)1) - (((__mum1 * __mum9) / (((_Tp)2) * __xx)) * (((_Tp)1) - ((__mum25 * __mum49) / (((_Tp)12) * __xx)))); 
# 369
const _Tp __Q = (__mum1 / (((_Tp)8) * __x)) * (((_Tp)1) - ((__mum9 * __mum25) / (((_Tp)6) * __xx))); 
# 372
const _Tp __chi = __x - ((__nu + ((_Tp)(0.5L))) * __numeric_constants< _Tp> ::__pi_2()); 
# 374
const _Tp __c = std::cos(__chi); 
# 375
const _Tp __s = std::sin(__chi); 
# 377
const _Tp __coef = std::sqrt(((_Tp)2) / (__numeric_constants< _Tp> ::__pi() * __x)); 
# 379
__Jnu = (__coef * ((__c * __P) - (__s * __Q))); 
# 380
__Nnu = (__coef * ((__s * __P) + (__c * __Q))); 
# 383
} 
# 413 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 415
__cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn, unsigned 
# 416
__max_iter) 
# 417
{ 
# 418
if (__x == ((_Tp)0)) { 
# 419
return (__nu == ((_Tp)0)) ? (_Tp)1 : ((_Tp)0); }  
# 421
const _Tp __x2 = __x / ((_Tp)2); 
# 422
_Tp __fact = __nu * std::log(__x2); 
# 424
__fact -= std::lgamma(__nu + ((_Tp)1)); 
# 428
__fact = std::exp(__fact); 
# 429
const _Tp __xx4 = (__sgn * __x2) * __x2; 
# 430
_Tp __Jn = ((_Tp)1); 
# 431
_Tp __term = ((_Tp)1); 
# 433
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 434
{ 
# 435
__term *= (__xx4 / (((_Tp)__i) * (__nu + ((_Tp)__i)))); 
# 436
__Jn += __term; 
# 437
if (std::abs(__term / __Jn) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 438
break; }  
# 439
}  
# 441
return __fact * __Jn; 
# 442
} 
# 459 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 461
__cyl_bessel_j(_Tp __nu, _Tp __x) 
# 462
{ 
# 463
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 464
std::__throw_domain_error("Bad argument in __cyl_bessel_j."); } else { 
# 466
if (__isnan(__nu) || __isnan(__x)) { 
# 467
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 468
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 469
return __cyl_bessel_ij_series(__nu, __x, -((_Tp)1), 200); } else { 
# 470
if (__x > ((_Tp)1000)) 
# 471
{ 
# 472
_Tp __J_nu, __N_nu; 
# 473
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 474
return __J_nu; 
# 475
} else 
# 477
{ 
# 478
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 479
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 480
return __J_nu; 
# 481
}  }  }  }  
# 482
} 
# 501 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 503
__cyl_neumann_n(_Tp __nu, _Tp __x) 
# 504
{ 
# 505
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 506
std::__throw_domain_error("Bad argument in __cyl_neumann_n."); } else { 
# 508
if (__isnan(__nu) || __isnan(__x)) { 
# 509
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 510
if (__x > ((_Tp)1000)) 
# 511
{ 
# 512
_Tp __J_nu, __N_nu; 
# 513
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 514
return __N_nu; 
# 515
} else 
# 517
{ 
# 518
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 519
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 520
return __N_nu; 
# 521
}  }  }  
# 522
} 
# 538 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 540
__sph_bessel_jn(unsigned __n, _Tp __x, _Tp &
# 541
__j_n, _Tp &__n_n, _Tp &__jp_n, _Tp &__np_n) 
# 542
{ 
# 543
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 545
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 546
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 548
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 551
__j_n = (__factor * __J_nu); 
# 552
__n_n = (__factor * __N_nu); 
# 553
__jp_n = ((__factor * __Jp_nu) - (__j_n / (((_Tp)2) * __x))); 
# 554
__np_n = ((__factor * __Np_nu) - (__n_n / (((_Tp)2) * __x))); 
# 557
} 
# 573 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 575
__sph_bessel(unsigned __n, _Tp __x) 
# 576
{ 
# 577
if (__x < ((_Tp)0)) { 
# 578
std::__throw_domain_error("Bad argument in __sph_bessel."); } else { 
# 580
if (__isnan(__x)) { 
# 581
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 582
if (__x == ((_Tp)0)) 
# 583
{ 
# 584
if (__n == (0)) { 
# 585
return (_Tp)1; } else { 
# 587
return (_Tp)0; }  
# 588
} else 
# 590
{ 
# 591
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 592
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 593
return __j_n; 
# 594
}  }  }  
# 595
} 
# 611 "/usr/include/c++/7/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 613
__sph_neumann(unsigned __n, _Tp __x) 
# 614
{ 
# 615
if (__x < ((_Tp)0)) { 
# 616
std::__throw_domain_error("Bad argument in __sph_neumann."); } else { 
# 618
if (__isnan(__x)) { 
# 619
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 620
if (__x == ((_Tp)0)) { 
# 621
return -std::template numeric_limits< _Tp> ::infinity(); } else 
# 623
{ 
# 624
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 625
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 626
return __n_n; 
# 627
}  }  }  
# 628
} 
# 631
}
# 636
}
# 49 "/usr/include/c++/7/tr1/beta_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/tr1/beta_function.tcc" 3
namespace __detail { 
# 79 "/usr/include/c++/7/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 81
__beta_gamma(_Tp __x, _Tp __y) 
# 82
{ 
# 84
_Tp __bet; 
# 86
if (__x > __y) 
# 87
{ 
# 88
__bet = (std::tgamma(__x) / std::tgamma(__x + __y)); 
# 90
__bet *= std::tgamma(__y); 
# 91
} else 
# 93
{ 
# 94
__bet = (std::tgamma(__y) / std::tgamma(__x + __y)); 
# 96
__bet *= std::tgamma(__x); 
# 97
}  
# 111 "/usr/include/c++/7/tr1/beta_function.tcc" 3
return __bet; 
# 112
} 
# 127 "/usr/include/c++/7/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 129
__beta_lgamma(_Tp __x, _Tp __y) 
# 130
{ 
# 132
_Tp __bet = (std::lgamma(__x) + std::lgamma(__y)) - std::lgamma(__x + __y); 
# 140
__bet = std::exp(__bet); 
# 141
return __bet; 
# 142
} 
# 158 "/usr/include/c++/7/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 160
__beta_product(_Tp __x, _Tp __y) 
# 161
{ 
# 163
_Tp __bet = (__x + __y) / (__x * __y); 
# 165
unsigned __max_iter = (1000000); 
# 166
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 167
{ 
# 168
_Tp __term = (((_Tp)1) + ((__x + __y) / __k)) / ((((_Tp)1) + (__x / __k)) * (((_Tp)1) + (__y / __k))); 
# 170
__bet *= __term; 
# 171
}  
# 173
return __bet; 
# 174
} 
# 189 "/usr/include/c++/7/tr1/beta_function.tcc" 3
template< class _Tp> inline _Tp 
# 191
__beta(_Tp __x, _Tp __y) 
# 192
{ 
# 193
if (__isnan(__x) || __isnan(__y)) { 
# 194
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 196
return __beta_lgamma(__x, __y); }  
# 197
} 
# 200
}
# 205
}
# 45 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 78
__ellint_rf(_Tp __x, _Tp __y, _Tp __z) 
# 79
{ 
# 80
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 81
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 82
const _Tp __lolim = ((_Tp)5) * __min; 
# 83
const _Tp __uplim = __max / ((_Tp)5); 
# 85
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 86
std::__throw_domain_error("Argument less than zero in __ellint_rf."); } else { 
# 88
if ((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) { 
# 90
std::__throw_domain_error("Argument too small in __ellint_rf"); } else 
# 92
{ 
# 93
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 94
const _Tp __c1 = (((_Tp)1) / ((_Tp)24)); 
# 95
const _Tp __c2 = (((_Tp)1) / ((_Tp)10)); 
# 96
const _Tp __c3 = (((_Tp)3) / ((_Tp)44)); 
# 97
const _Tp __c4 = (((_Tp)1) / ((_Tp)14)); 
# 99
_Tp __xn = __x; 
# 100
_Tp __yn = __y; 
# 101
_Tp __zn = __z; 
# 103
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 104
const _Tp __errtol = std::pow(__eps, ((_Tp)1) / ((_Tp)6)); 
# 105
_Tp __mu; 
# 106
_Tp __xndev, __yndev, __zndev; 
# 108
const unsigned __max_iter = (100); 
# 109
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 110
{ 
# 111
__mu = (((__xn + __yn) + __zn) / ((_Tp)3)); 
# 112
__xndev = (2 - ((__mu + __xn) / __mu)); 
# 113
__yndev = (2 - ((__mu + __yn) / __mu)); 
# 114
__zndev = (2 - ((__mu + __zn) / __mu)); 
# 115
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 116
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 117
if (__epsilon < __errtol) { 
# 118
break; }  
# 119
const _Tp __xnroot = std::sqrt(__xn); 
# 120
const _Tp __ynroot = std::sqrt(__yn); 
# 121
const _Tp __znroot = std::sqrt(__zn); 
# 122
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 124
__xn = (__c0 * (__xn + __lambda)); 
# 125
__yn = (__c0 * (__yn + __lambda)); 
# 126
__zn = (__c0 * (__zn + __lambda)); 
# 127
}  
# 129
const _Tp __e2 = (__xndev * __yndev) - (__zndev * __zndev); 
# 130
const _Tp __e3 = (__xndev * __yndev) * __zndev; 
# 131
const _Tp __s = (((_Tp)1) + ((((__c1 * __e2) - __c2) - (__c3 * __e3)) * __e2)) + (__c4 * __e3); 
# 134
return __s / std::sqrt(__mu); 
# 135
}  }  
# 136
} 
# 155 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 157
__comp_ellint_1_series(_Tp __k) 
# 158
{ 
# 160
const _Tp __kk = __k * __k; 
# 162
_Tp __term = __kk / ((_Tp)4); 
# 163
_Tp __sum = ((_Tp)1) + __term; 
# 165
const unsigned __max_iter = (1000); 
# 166
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 167
{ 
# 168
__term *= (((((2) * __i) - (1)) * __kk) / ((2) * __i)); 
# 169
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 170
break; }  
# 171
__sum += __term; 
# 172
}  
# 174
return __numeric_constants< _Tp> ::__pi_2() * __sum; 
# 175
} 
# 193 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 195
__comp_ellint_1(_Tp __k) 
# 196
{ 
# 198
if (__isnan(__k)) { 
# 199
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 200
if (std::abs(__k) >= ((_Tp)1)) { 
# 201
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 203
return __ellint_rf((_Tp)0, ((_Tp)1) - (__k * __k), (_Tp)1); }  }  
# 204
} 
# 221 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 223
__ellint_1(_Tp __k, _Tp __phi) 
# 224
{ 
# 226
if (__isnan(__k) || __isnan(__phi)) { 
# 227
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 228
if (std::abs(__k) > ((_Tp)1)) { 
# 229
std::__throw_domain_error("Bad argument in __ellint_1."); } else 
# 231
{ 
# 233
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 235
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 238
const _Tp __s = std::sin(__phi_red); 
# 239
const _Tp __c = std::cos(__phi_red); 
# 241
const _Tp __F = __s * __ellint_rf(__c * __c, ((_Tp)1) - (((__k * __k) * __s) * __s), (_Tp)1); 
# 245
if (__n == 0) { 
# 246
return __F; } else { 
# 248
return __F + ((((_Tp)2) * __n) * __comp_ellint_1(__k)); }  
# 249
}  }  
# 250
} 
# 268 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 270
__comp_ellint_2_series(_Tp __k) 
# 271
{ 
# 273
const _Tp __kk = __k * __k; 
# 275
_Tp __term = __kk; 
# 276
_Tp __sum = __term; 
# 278
const unsigned __max_iter = (1000); 
# 279
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 280
{ 
# 281
const _Tp __i2m = ((2) * __i) - (1); 
# 282
const _Tp __i2 = (2) * __i; 
# 283
__term *= (((__i2m * __i2m) * __kk) / (__i2 * __i2)); 
# 284
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 285
break; }  
# 286
__sum += (__term / __i2m); 
# 287
}  
# 289
return __numeric_constants< _Tp> ::__pi_2() * (((_Tp)1) - __sum); 
# 290
} 
# 316 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 318
__ellint_rd(_Tp __x, _Tp __y, _Tp __z) 
# 319
{ 
# 320
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 321
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 322
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 323
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 324
const _Tp __lolim = (((_Tp)2) / std::pow(__max, ((_Tp)2) / ((_Tp)3))); 
# 325
const _Tp __uplim = std::pow((((_Tp)(0.1L)) * __errtol) / __min, ((_Tp)2) / ((_Tp)3)); 
# 327
if ((__x < ((_Tp)0)) || (__y < ((_Tp)0))) { 
# 328
std::__throw_domain_error("Argument less than zero in __ellint_rd."); } else { 
# 330
if (((__x + __y) < __lolim) || (__z < __lolim)) { 
# 331
std::__throw_domain_error("Argument too small in __ellint_rd."); } else 
# 334
{ 
# 335
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 336
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 337
const _Tp __c2 = (((_Tp)1) / ((_Tp)6)); 
# 338
const _Tp __c3 = (((_Tp)9) / ((_Tp)22)); 
# 339
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 341
_Tp __xn = __x; 
# 342
_Tp __yn = __y; 
# 343
_Tp __zn = __z; 
# 344
_Tp __sigma = ((_Tp)0); 
# 345
_Tp __power4 = ((_Tp)1); 
# 347
_Tp __mu; 
# 348
_Tp __xndev, __yndev, __zndev; 
# 350
const unsigned __max_iter = (100); 
# 351
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 352
{ 
# 353
__mu = (((__xn + __yn) + (((_Tp)3) * __zn)) / ((_Tp)5)); 
# 354
__xndev = ((__mu - __xn) / __mu); 
# 355
__yndev = ((__mu - __yn) / __mu); 
# 356
__zndev = ((__mu - __zn) / __mu); 
# 357
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 358
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 359
if (__epsilon < __errtol) { 
# 360
break; }  
# 361
_Tp __xnroot = std::sqrt(__xn); 
# 362
_Tp __ynroot = std::sqrt(__yn); 
# 363
_Tp __znroot = std::sqrt(__zn); 
# 364
_Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 366
__sigma += (__power4 / (__znroot * (__zn + __lambda))); 
# 367
__power4 *= __c0; 
# 368
__xn = (__c0 * (__xn + __lambda)); 
# 369
__yn = (__c0 * (__yn + __lambda)); 
# 370
__zn = (__c0 * (__zn + __lambda)); 
# 371
}  
# 374
_Tp __eaa = __xndev * __yndev; 
# 375
_Tp __eb = __zndev * __zndev; 
# 376
_Tp __ec = __eaa - __eb; 
# 377
_Tp __ed = __eaa - (((_Tp)6) * __eb); 
# 378
_Tp __ef = (__ed + __ec) + __ec; 
# 379
_Tp __s1 = __ed * (((-__c1) + ((__c3 * __ed) / ((_Tp)3))) - ((((((_Tp)3) * __c4) * __zndev) * __ef) / ((_Tp)2))); 
# 382
_Tp __s2 = __zndev * ((__c2 * __ef) + (__zndev * ((((-__c3) * __ec) - (__zndev * __c4)) - __eaa))); 
# 386
return (((_Tp)3) * __sigma) + ((__power4 * ((((_Tp)1) + __s1) + __s2)) / (__mu * std::sqrt(__mu))); 
# 388
}  }  
# 389
} 
# 404 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 406
__comp_ellint_2(_Tp __k) 
# 407
{ 
# 409
if (__isnan(__k)) { 
# 410
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 411
if (std::abs(__k) == 1) { 
# 412
return (_Tp)1; } else { 
# 413
if (std::abs(__k) > ((_Tp)1)) { 
# 414
std::__throw_domain_error("Bad argument in __comp_ellint_2."); } else 
# 416
{ 
# 417
const _Tp __kk = __k * __k; 
# 419
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) - ((__kk * __ellint_rd((_Tp)0, ((_Tp)1) - __kk, (_Tp)1)) / ((_Tp)3)); 
# 421
}  }  }  
# 422
} 
# 438 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 440
__ellint_2(_Tp __k, _Tp __phi) 
# 441
{ 
# 443
if (__isnan(__k) || __isnan(__phi)) { 
# 444
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 445
if (std::abs(__k) > ((_Tp)1)) { 
# 446
std::__throw_domain_error("Bad argument in __ellint_2."); } else 
# 448
{ 
# 450
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 452
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 455
const _Tp __kk = __k * __k; 
# 456
const _Tp __s = std::sin(__phi_red); 
# 457
const _Tp __ss = __s * __s; 
# 458
const _Tp __sss = __ss * __s; 
# 459
const _Tp __c = std::cos(__phi_red); 
# 460
const _Tp __cc = __c * __c; 
# 462
const _Tp __E = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) - (((__kk * __sss) * __ellint_rd(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) / ((_Tp)3)); 
# 468
if (__n == 0) { 
# 469
return __E; } else { 
# 471
return __E + ((((_Tp)2) * __n) * __comp_ellint_2(__k)); }  
# 472
}  }  
# 473
} 
# 497 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 499
__ellint_rc(_Tp __x, _Tp __y) 
# 500
{ 
# 501
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 502
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 503
const _Tp __lolim = ((_Tp)5) * __min; 
# 504
const _Tp __uplim = __max / ((_Tp)5); 
# 506
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || ((__x + __y) < __lolim)) { 
# 507
std::__throw_domain_error("Argument less than zero in __ellint_rc."); } else 
# 510
{ 
# 511
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 512
const _Tp __c1 = (((_Tp)1) / ((_Tp)7)); 
# 513
const _Tp __c2 = (((_Tp)9) / ((_Tp)22)); 
# 514
const _Tp __c3 = (((_Tp)3) / ((_Tp)10)); 
# 515
const _Tp __c4 = (((_Tp)3) / ((_Tp)8)); 
# 517
_Tp __xn = __x; 
# 518
_Tp __yn = __y; 
# 520
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 521
const _Tp __errtol = std::pow(__eps / ((_Tp)30), ((_Tp)1) / ((_Tp)6)); 
# 522
_Tp __mu; 
# 523
_Tp __sn; 
# 525
const unsigned __max_iter = (100); 
# 526
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 527
{ 
# 528
__mu = ((__xn + (((_Tp)2) * __yn)) / ((_Tp)3)); 
# 529
__sn = (((__yn + __mu) / __mu) - ((_Tp)2)); 
# 530
if (std::abs(__sn) < __errtol) { 
# 531
break; }  
# 532
const _Tp __lambda = ((((_Tp)2) * std::sqrt(__xn)) * std::sqrt(__yn)) + __yn; 
# 534
__xn = (__c0 * (__xn + __lambda)); 
# 535
__yn = (__c0 * (__yn + __lambda)); 
# 536
}  
# 538
_Tp __s = (__sn * __sn) * (__c3 + (__sn * (__c1 + (__sn * (__c4 + (__sn * __c2)))))); 
# 541
return (((_Tp)1) + __s) / std::sqrt(__mu); 
# 542
}  
# 543
} 
# 568 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 570
__ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p) 
# 571
{ 
# 572
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 573
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 574
const _Tp __lolim = std::pow(((_Tp)5) * __min, ((_Tp)1) / ((_Tp)3)); 
# 575
const _Tp __uplim = (((_Tp)(0.3L)) * std::pow(((_Tp)(0.2L)) * __max, ((_Tp)1) / ((_Tp)3))); 
# 578
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 579
std::__throw_domain_error("Argument less than zero in __ellint_rj."); } else { 
# 581
if (((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) || (__p < __lolim)) { 
# 583
std::__throw_domain_error("Argument too small in __ellint_rj"); } else 
# 586
{ 
# 587
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 588
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 589
const _Tp __c2 = (((_Tp)1) / ((_Tp)3)); 
# 590
const _Tp __c3 = (((_Tp)3) / ((_Tp)22)); 
# 591
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 593
_Tp __xn = __x; 
# 594
_Tp __yn = __y; 
# 595
_Tp __zn = __z; 
# 596
_Tp __pn = __p; 
# 597
_Tp __sigma = ((_Tp)0); 
# 598
_Tp __power4 = ((_Tp)1); 
# 600
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 601
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 603
_Tp __lambda, __mu; 
# 604
_Tp __xndev, __yndev, __zndev, __pndev; 
# 606
const unsigned __max_iter = (100); 
# 607
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 608
{ 
# 609
__mu = ((((__xn + __yn) + __zn) + (((_Tp)2) * __pn)) / ((_Tp)5)); 
# 610
__xndev = ((__mu - __xn) / __mu); 
# 611
__yndev = ((__mu - __yn) / __mu); 
# 612
__zndev = ((__mu - __zn) / __mu); 
# 613
__pndev = ((__mu - __pn) / __mu); 
# 614
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 615
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 616
__epsilon = std::max(__epsilon, std::abs(__pndev)); 
# 617
if (__epsilon < __errtol) { 
# 618
break; }  
# 619
const _Tp __xnroot = std::sqrt(__xn); 
# 620
const _Tp __ynroot = std::sqrt(__yn); 
# 621
const _Tp __znroot = std::sqrt(__zn); 
# 622
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 624
const _Tp __alpha1 = (__pn * ((__xnroot + __ynroot) + __znroot)) + ((__xnroot * __ynroot) * __znroot); 
# 626
const _Tp __alpha2 = __alpha1 * __alpha1; 
# 627
const _Tp __beta = (__pn * (__pn + __lambda)) * (__pn + __lambda); 
# 629
__sigma += (__power4 * __ellint_rc(__alpha2, __beta)); 
# 630
__power4 *= __c0; 
# 631
__xn = (__c0 * (__xn + __lambda)); 
# 632
__yn = (__c0 * (__yn + __lambda)); 
# 633
__zn = (__c0 * (__zn + __lambda)); 
# 634
__pn = (__c0 * (__pn + __lambda)); 
# 635
}  
# 638
_Tp __eaa = (__xndev * (__yndev + __zndev)) + (__yndev * __zndev); 
# 639
_Tp __eb = (__xndev * __yndev) * __zndev; 
# 640
_Tp __ec = __pndev * __pndev; 
# 641
_Tp __e2 = __eaa - (((_Tp)3) * __ec); 
# 642
_Tp __e3 = __eb + ((((_Tp)2) * __pndev) * (__eaa - __ec)); 
# 643
_Tp __s1 = ((_Tp)1) + (__e2 * (((-__c1) + (((((_Tp)3) * __c3) * __e2) / ((_Tp)4))) - (((((_Tp)3) * __c4) * __e3) / ((_Tp)2)))); 
# 645
_Tp __s2 = __eb * ((__c2 / ((_Tp)2)) + (__pndev * (((-__c3) - __c3) + (__pndev * __c4)))); 
# 647
_Tp __s3 = ((__pndev * __eaa) * (__c2 - (__pndev * __c3))) - ((__c2 * __pndev) * __ec); 
# 650
return (((_Tp)3) * __sigma) + ((__power4 * ((__s1 + __s2) + __s3)) / (__mu * std::sqrt(__mu))); 
# 652
}  }  
# 653
} 
# 672 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 674
__comp_ellint_3(_Tp __k, _Tp __nu) 
# 675
{ 
# 677
if (__isnan(__k) || __isnan(__nu)) { 
# 678
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 679
if (__nu == ((_Tp)1)) { 
# 680
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 681
if (std::abs(__k) > ((_Tp)1)) { 
# 682
std::__throw_domain_error("Bad argument in __comp_ellint_3."); } else 
# 684
{ 
# 685
const _Tp __kk = __k * __k; 
# 687
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) + ((__nu * __ellint_rj((_Tp)0, ((_Tp)1) - __kk, (_Tp)1, ((_Tp)1) - __nu)) / ((_Tp)3)); 
# 691
}  }  }  
# 692
} 
# 712 "/usr/include/c++/7/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 714
__ellint_3(_Tp __k, _Tp __nu, _Tp __phi) 
# 715
{ 
# 717
if ((__isnan(__k) || __isnan(__nu)) || __isnan(__phi)) { 
# 718
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 719
if (std::abs(__k) > ((_Tp)1)) { 
# 720
std::__throw_domain_error("Bad argument in __ellint_3."); } else 
# 722
{ 
# 724
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 726
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 729
const _Tp __kk = __k * __k; 
# 730
const _Tp __s = std::sin(__phi_red); 
# 731
const _Tp __ss = __s * __s; 
# 732
const _Tp __sss = __ss * __s; 
# 733
const _Tp __c = std::cos(__phi_red); 
# 734
const _Tp __cc = __c * __c; 
# 736
const _Tp __Pi = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) + (((__nu * __sss) * __ellint_rj(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1, ((_Tp)1) - (__nu * __ss))) / ((_Tp)3)); 
# 742
if (__n == 0) { 
# 743
return __Pi; } else { 
# 745
return __Pi + ((((_Tp)2) * __n) * __comp_ellint_3(__k, __nu)); }  
# 746
}  }  
# 747
} 
# 750
}
# 754
}
# 50 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
namespace __detail { 
# 66
template< class _Tp> _Tp __expint_E1(_Tp); 
# 81 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 83
__expint_E1_series(_Tp __x) 
# 84
{ 
# 85
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 86
_Tp __term = ((_Tp)1); 
# 87
_Tp __esum = ((_Tp)0); 
# 88
_Tp __osum = ((_Tp)0); 
# 89
const unsigned __max_iter = (1000); 
# 90
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 91
{ 
# 92
__term *= ((-__x) / __i); 
# 93
if (std::abs(__term) < __eps) { 
# 94
break; }  
# 95
if (__term >= ((_Tp)0)) { 
# 96
__esum += (__term / __i); } else { 
# 98
__osum += (__term / __i); }  
# 99
}  
# 101
return (((-__esum) - __osum) - __numeric_constants< _Tp> ::__gamma_e()) - std::log(__x); 
# 103
} 
# 118 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 120
__expint_E1_asymp(_Tp __x) 
# 121
{ 
# 122
_Tp __term = ((_Tp)1); 
# 123
_Tp __esum = ((_Tp)1); 
# 124
_Tp __osum = ((_Tp)0); 
# 125
const unsigned __max_iter = (1000); 
# 126
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 127
{ 
# 128
_Tp __prev = __term; 
# 129
__term *= ((-__i) / __x); 
# 130
if (std::abs(__term) > std::abs(__prev)) { 
# 131
break; }  
# 132
if (__term >= ((_Tp)0)) { 
# 133
__esum += __term; } else { 
# 135
__osum += __term; }  
# 136
}  
# 138
return (std::exp(-__x) * (__esum + __osum)) / __x; 
# 139
} 
# 155 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 157
__expint_En_series(unsigned __n, _Tp __x) 
# 158
{ 
# 159
const unsigned __max_iter = (1000); 
# 160
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 161
const int __nm1 = __n - (1); 
# 162
_Tp __ans = (__nm1 != 0) ? ((_Tp)1) / __nm1 : ((-std::log(__x)) - __numeric_constants< _Tp> ::__gamma_e()); 
# 165
_Tp __fact = ((_Tp)1); 
# 166
for (int __i = 1; __i <= __max_iter; ++__i) 
# 167
{ 
# 168
__fact *= ((-__x) / ((_Tp)__i)); 
# 169
_Tp __del; 
# 170
if (__i != __nm1) { 
# 171
__del = ((-__fact) / ((_Tp)(__i - __nm1))); } else 
# 173
{ 
# 174
_Tp __psi = (-__numeric_constants< _Tp> ::gamma_e()); 
# 175
for (int __ii = 1; __ii <= __nm1; ++__ii) { 
# 176
__psi += (((_Tp)1) / ((_Tp)__ii)); }  
# 177
__del = (__fact * (__psi - std::log(__x))); 
# 178
}  
# 179
__ans += __del; 
# 180
if (std::abs(__del) < (__eps * std::abs(__ans))) { 
# 181
return __ans; }  
# 182
}  
# 183
std::__throw_runtime_error("Series summation failed in __expint_En_series."); 
# 185
} 
# 201 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 203
__expint_En_cont_frac(unsigned __n, _Tp __x) 
# 204
{ 
# 205
const unsigned __max_iter = (1000); 
# 206
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 207
const _Tp __fp_min = std::template numeric_limits< _Tp> ::min(); 
# 208
const int __nm1 = __n - (1); 
# 209
_Tp __b = __x + ((_Tp)__n); 
# 210
_Tp __c = ((_Tp)1) / __fp_min; 
# 211
_Tp __d = ((_Tp)1) / __b; 
# 212
_Tp __h = __d; 
# 213
for (unsigned __i = (1); __i <= __max_iter; ++__i) 
# 214
{ 
# 215
_Tp __a = (-((_Tp)(__i * (__nm1 + __i)))); 
# 216
__b += ((_Tp)2); 
# 217
__d = (((_Tp)1) / ((__a * __d) + __b)); 
# 218
__c = (__b + (__a / __c)); 
# 219
const _Tp __del = __c * __d; 
# 220
__h *= __del; 
# 221
if (std::abs(__del - ((_Tp)1)) < __eps) 
# 222
{ 
# 223
const _Tp __ans = __h * std::exp(-__x); 
# 224
return __ans; 
# 225
}  
# 226
}  
# 227
std::__throw_runtime_error("Continued fraction failed in __expint_En_cont_frac."); 
# 229
} 
# 246 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 248
__expint_En_recursion(unsigned __n, _Tp __x) 
# 249
{ 
# 250
_Tp __En; 
# 251
_Tp __E1 = __expint_E1(__x); 
# 252
if (__x < ((_Tp)__n)) 
# 253
{ 
# 255
__En = __E1; 
# 256
for (unsigned __j = (2); __j < __n; ++__j) { 
# 257
__En = ((std::exp(-__x) - (__x * __En)) / ((_Tp)(__j - (1)))); }  
# 258
} else 
# 260
{ 
# 262
__En = ((_Tp)1); 
# 263
const int __N = __n + (20); 
# 264
_Tp __save = ((_Tp)0); 
# 265
for (int __j = __N; __j > 0; --__j) 
# 266
{ 
# 267
__En = ((std::exp(-__x) - (__j * __En)) / __x); 
# 268
if (__j == __n) { 
# 269
__save = __En; }  
# 270
}  
# 271
_Tp __norm = __En / __E1; 
# 272
__En /= __norm; 
# 273
}  
# 275
return __En; 
# 276
} 
# 290 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 292
__expint_Ei_series(_Tp __x) 
# 293
{ 
# 294
_Tp __term = ((_Tp)1); 
# 295
_Tp __sum = ((_Tp)0); 
# 296
const unsigned __max_iter = (1000); 
# 297
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 298
{ 
# 299
__term *= (__x / __i); 
# 300
__sum += (__term / __i); 
# 301
if (__term < (std::template numeric_limits< _Tp> ::epsilon() * __sum)) { 
# 302
break; }  
# 303
}  
# 305
return (__numeric_constants< _Tp> ::__gamma_e() + __sum) + std::log(__x); 
# 306
} 
# 321 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 323
__expint_Ei_asymp(_Tp __x) 
# 324
{ 
# 325
_Tp __term = ((_Tp)1); 
# 326
_Tp __sum = ((_Tp)1); 
# 327
const unsigned __max_iter = (1000); 
# 328
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 329
{ 
# 330
_Tp __prev = __term; 
# 331
__term *= (__i / __x); 
# 332
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 333
break; }  
# 334
if (__term >= __prev) { 
# 335
break; }  
# 336
__sum += __term; 
# 337
}  
# 339
return (std::exp(__x) * __sum) / __x; 
# 340
} 
# 354 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 356
__expint_Ei(_Tp __x) 
# 357
{ 
# 358
if (__x < ((_Tp)0)) { 
# 359
return -__expint_E1(-__x); } else { 
# 360
if (__x < (-std::log(std::template numeric_limits< _Tp> ::epsilon()))) { 
# 361
return __expint_Ei_series(__x); } else { 
# 363
return __expint_Ei_asymp(__x); }  }  
# 364
} 
# 378 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 380
__expint_E1(_Tp __x) 
# 381
{ 
# 382
if (__x < ((_Tp)0)) { 
# 383
return -__expint_Ei(-__x); } else { 
# 384
if (__x < ((_Tp)1)) { 
# 385
return __expint_E1_series(__x); } else { 
# 386
if (__x < ((_Tp)100)) { 
# 387
return __expint_En_cont_frac(1, __x); } else { 
# 389
return __expint_E1_asymp(__x); }  }  }  
# 390
} 
# 408 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 410
__expint_asymp(unsigned __n, _Tp __x) 
# 411
{ 
# 412
_Tp __term = ((_Tp)1); 
# 413
_Tp __sum = ((_Tp)1); 
# 414
for (unsigned __i = (1); __i <= __n; ++__i) 
# 415
{ 
# 416
_Tp __prev = __term; 
# 417
__term *= ((-((__n - __i) + (1))) / __x); 
# 418
if (std::abs(__term) > std::abs(__prev)) { 
# 419
break; }  
# 420
__sum += __term; 
# 421
}  
# 423
return (std::exp(-__x) * __sum) / __x; 
# 424
} 
# 442 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 444
__expint_large_n(unsigned __n, _Tp __x) 
# 445
{ 
# 446
const _Tp __xpn = __x + __n; 
# 447
const _Tp __xpn2 = __xpn * __xpn; 
# 448
_Tp __term = ((_Tp)1); 
# 449
_Tp __sum = ((_Tp)1); 
# 450
for (unsigned __i = (1); __i <= __n; ++__i) 
# 451
{ 
# 452
_Tp __prev = __term; 
# 453
__term *= ((__n - (((2) * (__i - (1))) * __x)) / __xpn2); 
# 454
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 455
break; }  
# 456
__sum += __term; 
# 457
}  
# 459
return (std::exp(-__x) * __sum) / __xpn; 
# 460
} 
# 476 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 478
__expint(unsigned __n, _Tp __x) 
# 479
{ 
# 481
if (__isnan(__x)) { 
# 482
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 483
if ((__n <= (1)) && (__x == ((_Tp)0))) { 
# 484
return std::template numeric_limits< _Tp> ::infinity(); } else 
# 486
{ 
# 487
_Tp __E0 = std::exp(__x) / __x; 
# 488
if (__n == (0)) { 
# 489
return __E0; }  
# 491
_Tp __E1 = __expint_E1(__x); 
# 492
if (__n == (1)) { 
# 493
return __E1; }  
# 495
if (__x == ((_Tp)0)) { 
# 496
return ((_Tp)1) / (static_cast< _Tp>(__n - (1))); }  
# 498
_Tp __En = __expint_En_recursion(__n, __x); 
# 500
return __En; 
# 501
}  }  
# 502
} 
# 516 "/usr/include/c++/7/tr1/exp_integral.tcc" 3
template< class _Tp> inline _Tp 
# 518
__expint(_Tp __x) 
# 519
{ 
# 520
if (__isnan(__x)) { 
# 521
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 523
return __expint_Ei(__x); }  
# 524
} 
# 527
}
# 531
}
# 44 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 85
__conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x) 
# 86
{ 
# 87
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 89
_Tp __term = ((_Tp)1); 
# 90
_Tp __Fac = ((_Tp)1); 
# 91
const unsigned __max_iter = (100000); 
# 92
unsigned __i; 
# 93
for (__i = (0); __i < __max_iter; ++__i) 
# 94
{ 
# 95
__term *= (((__a + ((_Tp)__i)) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 97
if (std::abs(__term) < __eps) 
# 98
{ 
# 99
break; 
# 100
}  
# 101
__Fac += __term; 
# 102
}  
# 103
if (__i == __max_iter) { 
# 104
std::__throw_runtime_error("Series failed to converge in __conf_hyperg_series."); }  
# 107
return __Fac; 
# 108
} 
# 120 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 122
__conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin) 
# 123
{ 
# 124
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 125
const int __nmax = 20000; 
# 126
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 127
const _Tp __x = (-__xin); 
# 128
const _Tp __x3 = (__x * __x) * __x; 
# 129
const _Tp __t0 = __a / __c; 
# 130
const _Tp __t1 = (__a + ((_Tp)1)) / (((_Tp)2) * __c); 
# 131
const _Tp __t2 = (__a + ((_Tp)2)) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 132
_Tp __F = ((_Tp)1); 
# 133
_Tp __prec; 
# 135
_Tp __Bnm3 = ((_Tp)1); 
# 136
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 137
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 139
_Tp __Anm3 = ((_Tp)1); 
# 140
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 141
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 144
int __n = 3; 
# 145
while (1) 
# 146
{ 
# 147
_Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 148
_Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 149
_Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 150
_Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 151
_Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 152
_Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 153
_Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 154
_Tp __F1 = (((_Tp)(__n - 2)) - __a) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 155
_Tp __F2 = ((((_Tp)__n) + __a) * __npam1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 157
_Tp __F3 = (((-__npam2) * __npam1) * (((_Tp)(__n - 2)) - __a)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 160
_Tp __E = ((-__npam1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 163
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 165
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 167
_Tp __r = __An / __Bn; 
# 169
__prec = std::abs((__F - __r) / __F); 
# 170
__F = __r; 
# 172
if ((__prec < __eps) || (__n > __nmax)) { 
# 173
break; }  
# 175
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 176
{ 
# 177
__An /= __big; 
# 178
__Bn /= __big; 
# 179
__Anm1 /= __big; 
# 180
__Bnm1 /= __big; 
# 181
__Anm2 /= __big; 
# 182
__Bnm2 /= __big; 
# 183
__Anm3 /= __big; 
# 184
__Bnm3 /= __big; 
# 185
} else { 
# 186
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 188
{ 
# 189
__An *= __big; 
# 190
__Bn *= __big; 
# 191
__Anm1 *= __big; 
# 192
__Bnm1 *= __big; 
# 193
__Anm2 *= __big; 
# 194
__Bnm2 *= __big; 
# 195
__Anm3 *= __big; 
# 196
__Bnm3 *= __big; 
# 197
}  }  
# 199
++__n; 
# 200
__Bnm3 = __Bnm2; 
# 201
__Bnm2 = __Bnm1; 
# 202
__Bnm1 = __Bn; 
# 203
__Anm3 = __Anm2; 
# 204
__Anm2 = __Anm1; 
# 205
__Anm1 = __An; 
# 206
}  
# 208
if (__n >= __nmax) { 
# 209
std::__throw_runtime_error("Iteration failed to converge in __conf_hyperg_luke."); }  
# 212
return __F; 
# 213
} 
# 227 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 229
__conf_hyperg(_Tp __a, _Tp __c, _Tp __x) 
# 230
{ 
# 232
const _Tp __c_nint = std::nearbyint(__c); 
# 236
if ((__isnan(__a) || __isnan(__c)) || __isnan(__x)) { 
# 237
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 238
if ((__c_nint == __c) && (__c_nint <= 0)) { 
# 239
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 240
if (__a == ((_Tp)0)) { 
# 241
return (_Tp)1; } else { 
# 242
if (__c == __a) { 
# 243
return std::exp(__x); } else { 
# 244
if (__x < ((_Tp)0)) { 
# 245
return __conf_hyperg_luke(__a, __c, __x); } else { 
# 247
return __conf_hyperg_series(__a, __c, __x); }  }  }  }  }  
# 248
} 
# 271 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 273
__hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 274
{ 
# 275
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 277
_Tp __term = ((_Tp)1); 
# 278
_Tp __Fabc = ((_Tp)1); 
# 279
const unsigned __max_iter = (100000); 
# 280
unsigned __i; 
# 281
for (__i = (0); __i < __max_iter; ++__i) 
# 282
{ 
# 283
__term *= ((((__a + ((_Tp)__i)) * (__b + ((_Tp)__i))) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 285
if (std::abs(__term) < __eps) 
# 286
{ 
# 287
break; 
# 288
}  
# 289
__Fabc += __term; 
# 290
}  
# 291
if (__i == __max_iter) { 
# 292
std::__throw_runtime_error("Series failed to converge in __hyperg_series."); }  
# 295
return __Fabc; 
# 296
} 
# 304
template< class _Tp> _Tp 
# 306
__hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin) 
# 307
{ 
# 308
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 309
const int __nmax = 20000; 
# 310
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 311
const _Tp __x = (-__xin); 
# 312
const _Tp __x3 = (__x * __x) * __x; 
# 313
const _Tp __t0 = (__a * __b) / __c; 
# 314
const _Tp __t1 = ((__a + ((_Tp)1)) * (__b + ((_Tp)1))) / (((_Tp)2) * __c); 
# 315
const _Tp __t2 = ((__a + ((_Tp)2)) * (__b + ((_Tp)2))) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 318
_Tp __F = ((_Tp)1); 
# 320
_Tp __Bnm3 = ((_Tp)1); 
# 321
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 322
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 324
_Tp __Anm3 = ((_Tp)1); 
# 325
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 326
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 329
int __n = 3; 
# 330
while (1) 
# 331
{ 
# 332
const _Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 333
const _Tp __npbm1 = ((_Tp)(__n - 1)) + __b; 
# 334
const _Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 335
const _Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 336
const _Tp __npbm2 = ((_Tp)(__n - 2)) + __b; 
# 337
const _Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 338
const _Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 339
const _Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 340
const _Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 341
const _Tp __n2 = __n * __n; 
# 342
const _Tp __F1 = (((((((_Tp)3) * __n2) + (((__a + __b) - ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b)) - (((_Tp)2) * (__a + __b))) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 345
const _Tp __F2 = (((-((((((_Tp)3) * __n2) - (((__a + __b) + ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b))) * __npam1) * __npbm1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 348
const _Tp __F3 = (((((__npam2 * __npam1) * __npbm2) * __npbm1) * (((_Tp)(__n - 2)) - __a)) * (((_Tp)(__n - 2)) - __b)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 352
const _Tp __E = (((-__npam1) * __npbm1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 355
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 357
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 359
const _Tp __r = __An / __Bn; 
# 361
const _Tp __prec = std::abs((__F - __r) / __F); 
# 362
__F = __r; 
# 364
if ((__prec < __eps) || (__n > __nmax)) { 
# 365
break; }  
# 367
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 368
{ 
# 369
__An /= __big; 
# 370
__Bn /= __big; 
# 371
__Anm1 /= __big; 
# 372
__Bnm1 /= __big; 
# 373
__Anm2 /= __big; 
# 374
__Bnm2 /= __big; 
# 375
__Anm3 /= __big; 
# 376
__Bnm3 /= __big; 
# 377
} else { 
# 378
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 380
{ 
# 381
__An *= __big; 
# 382
__Bn *= __big; 
# 383
__Anm1 *= __big; 
# 384
__Bnm1 *= __big; 
# 385
__Anm2 *= __big; 
# 386
__Bnm2 *= __big; 
# 387
__Anm3 *= __big; 
# 388
__Bnm3 *= __big; 
# 389
}  }  
# 391
++__n; 
# 392
__Bnm3 = __Bnm2; 
# 393
__Bnm2 = __Bnm1; 
# 394
__Bnm1 = __Bn; 
# 395
__Anm3 = __Anm2; 
# 396
__Anm2 = __Anm1; 
# 397
__Anm1 = __An; 
# 398
}  
# 400
if (__n >= __nmax) { 
# 401
std::__throw_runtime_error("Iteration failed to converge in __hyperg_luke."); }  
# 404
return __F; 
# 405
} 
# 438 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 440
__hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 441
{ 
# 442
const _Tp __d = (__c - __a) - __b; 
# 443
const int __intd = std::floor(__d + ((_Tp)(0.5L))); 
# 444
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 445
const _Tp __toler = ((_Tp)1000) * __eps; 
# 446
const _Tp __log_max = std::log(std::template numeric_limits< _Tp> ::max()); 
# 447
const bool __d_integer = std::abs(__d - __intd) < __toler; 
# 449
if (__d_integer) 
# 450
{ 
# 451
const _Tp __ln_omx = std::log(((_Tp)1) - __x); 
# 452
const _Tp __ad = std::abs(__d); 
# 453
_Tp __F1, __F2; 
# 455
_Tp __d1, __d2; 
# 456
if (__d >= ((_Tp)0)) 
# 457
{ 
# 458
__d1 = __d; 
# 459
__d2 = ((_Tp)0); 
# 460
} else 
# 462
{ 
# 463
__d1 = ((_Tp)0); 
# 464
__d2 = __d; 
# 465
}  
# 467
const _Tp __lng_c = __log_gamma(__c); 
# 470
if (__ad < __eps) 
# 471
{ 
# 473
__F1 = ((_Tp)0); 
# 474
} else 
# 476
{ 
# 478
bool __ok_d1 = true; 
# 479
_Tp __lng_ad, __lng_ad1, __lng_bd1; 
# 480
try 
# 481
{ 
# 482
__lng_ad = __log_gamma(__ad); 
# 483
__lng_ad1 = __log_gamma(__a + __d1); 
# 484
__lng_bd1 = __log_gamma(__b + __d1); 
# 485
} 
# 486
catch (...) 
# 487
{ 
# 488
__ok_d1 = false; 
# 489
}  
# 491
if (__ok_d1) 
# 492
{ 
# 496
_Tp __sum1 = ((_Tp)1); 
# 497
_Tp __term = ((_Tp)1); 
# 498
_Tp __ln_pre1 = (((__lng_ad + __lng_c) + (__d2 * __ln_omx)) - __lng_ad1) - __lng_bd1; 
# 503
for (int __i = 1; __i < __ad; ++__i) 
# 504
{ 
# 505
const int __j = __i - 1; 
# 506
__term *= ((((((__a + __d2) + __j) * ((__b + __d2) + __j)) / ((((_Tp)1) + __d2) + __j)) / __i) * (((_Tp)1) - __x)); 
# 508
__sum1 += __term; 
# 509
}  
# 511
if (__ln_pre1 > __log_max) { 
# 512
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_luke."); } else { 
# 515
__F1 = (std::exp(__ln_pre1) * __sum1); }  
# 516
} else 
# 518
{ 
# 521
__F1 = ((_Tp)0); 
# 522
}  
# 523
}  
# 526
bool __ok_d2 = true; 
# 527
_Tp __lng_ad2, __lng_bd2; 
# 528
try 
# 529
{ 
# 530
__lng_ad2 = __log_gamma(__a + __d2); 
# 531
__lng_bd2 = __log_gamma(__b + __d2); 
# 532
} 
# 533
catch (...) 
# 534
{ 
# 535
__ok_d2 = false; 
# 536
}  
# 538
if (__ok_d2) 
# 539
{ 
# 542
const int __maxiter = 2000; 
# 543
const _Tp __psi_1 = (-__numeric_constants< _Tp> ::__gamma_e()); 
# 544
const _Tp __psi_1pd = __psi(((_Tp)1) + __ad); 
# 545
const _Tp __psi_apd1 = __psi(__a + __d1); 
# 546
const _Tp __psi_bpd1 = __psi(__b + __d1); 
# 548
_Tp __psi_term = (((__psi_1 + __psi_1pd) - __psi_apd1) - __psi_bpd1) - __ln_omx; 
# 550
_Tp __fact = ((_Tp)1); 
# 551
_Tp __sum2 = __psi_term; 
# 552
_Tp __ln_pre2 = ((__lng_c + (__d1 * __ln_omx)) - __lng_ad2) - __lng_bd2; 
# 556
int __j; 
# 557
for (__j = 1; __j < __maxiter; ++__j) 
# 558
{ 
# 561
const _Tp __term1 = (((_Tp)1) / ((_Tp)__j)) + (((_Tp)1) / (__ad + __j)); 
# 563
const _Tp __term2 = (((_Tp)1) / ((__a + __d1) + ((_Tp)(__j - 1)))) + (((_Tp)1) / ((__b + __d1) + ((_Tp)(__j - 1)))); 
# 565
__psi_term += (__term1 - __term2); 
# 566
__fact *= (((((__a + __d1) + ((_Tp)(__j - 1))) * ((__b + __d1) + ((_Tp)(__j - 1)))) / ((__ad + __j) * __j)) * (((_Tp)1) - __x)); 
# 569
const _Tp __delta = __fact * __psi_term; 
# 570
__sum2 += __delta; 
# 571
if (std::abs(__delta) < (__eps * std::abs(__sum2))) { 
# 572
break; }  
# 573
}  
# 574
if (__j == __maxiter) { 
# 575
std::__throw_runtime_error("Sum F2 failed to converge in __hyperg_reflect"); }  
# 578
if (__sum2 == ((_Tp)0)) { 
# 579
__F2 = ((_Tp)0); } else { 
# 581
__F2 = (std::exp(__ln_pre2) * __sum2); }  
# 582
} else 
# 584
{ 
# 587
__F2 = ((_Tp)0); 
# 588
}  
# 590
const _Tp __sgn_2 = (((__intd % 2) == 1) ? -((_Tp)1) : ((_Tp)1)); 
# 591
const _Tp __F = __F1 + (__sgn_2 * __F2); 
# 593
return __F; 
# 594
} else 
# 596
{ 
# 601
bool __ok1 = true; 
# 602
_Tp __sgn_g1ca = ((_Tp)0), __ln_g1ca = ((_Tp)0); 
# 603
_Tp __sgn_g1cb = ((_Tp)0), __ln_g1cb = ((_Tp)0); 
# 604
try 
# 605
{ 
# 606
__sgn_g1ca = __log_gamma_sign(__c - __a); 
# 607
__ln_g1ca = __log_gamma(__c - __a); 
# 608
__sgn_g1cb = __log_gamma_sign(__c - __b); 
# 609
__ln_g1cb = __log_gamma(__c - __b); 
# 610
} 
# 611
catch (...) 
# 612
{ 
# 613
__ok1 = false; 
# 614
}  
# 616
bool __ok2 = true; 
# 617
_Tp __sgn_g2a = ((_Tp)0), __ln_g2a = ((_Tp)0); 
# 618
_Tp __sgn_g2b = ((_Tp)0), __ln_g2b = ((_Tp)0); 
# 619
try 
# 620
{ 
# 621
__sgn_g2a = __log_gamma_sign(__a); 
# 622
__ln_g2a = __log_gamma(__a); 
# 623
__sgn_g2b = __log_gamma_sign(__b); 
# 624
__ln_g2b = __log_gamma(__b); 
# 625
} 
# 626
catch (...) 
# 627
{ 
# 628
__ok2 = false; 
# 629
}  
# 631
const _Tp __sgn_gc = __log_gamma_sign(__c); 
# 632
const _Tp __ln_gc = __log_gamma(__c); 
# 633
const _Tp __sgn_gd = __log_gamma_sign(__d); 
# 634
const _Tp __ln_gd = __log_gamma(__d); 
# 635
const _Tp __sgn_gmd = __log_gamma_sign(-__d); 
# 636
const _Tp __ln_gmd = __log_gamma(-__d); 
# 638
const _Tp __sgn1 = ((__sgn_gc * __sgn_gd) * __sgn_g1ca) * __sgn_g1cb; 
# 639
const _Tp __sgn2 = ((__sgn_gc * __sgn_gmd) * __sgn_g2a) * __sgn_g2b; 
# 641
_Tp __pre1, __pre2; 
# 642
if (__ok1 && __ok2) 
# 643
{ 
# 644
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 645
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 647
if ((__ln_pre1 < __log_max) && (__ln_pre2 < __log_max)) 
# 648
{ 
# 649
__pre1 = std::exp(__ln_pre1); 
# 650
__pre2 = std::exp(__ln_pre2); 
# 651
__pre1 *= __sgn1; 
# 652
__pre2 *= __sgn2; 
# 653
} else 
# 655
{ 
# 656
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 658
}  
# 659
} else { 
# 660
if (__ok1 && (!__ok2)) 
# 661
{ 
# 662
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 663
if (__ln_pre1 < __log_max) 
# 664
{ 
# 665
__pre1 = std::exp(__ln_pre1); 
# 666
__pre1 *= __sgn1; 
# 667
__pre2 = ((_Tp)0); 
# 668
} else 
# 670
{ 
# 671
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 673
}  
# 674
} else { 
# 675
if ((!__ok1) && __ok2) 
# 676
{ 
# 677
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 679
if (__ln_pre2 < __log_max) 
# 680
{ 
# 681
__pre1 = ((_Tp)0); 
# 682
__pre2 = std::exp(__ln_pre2); 
# 683
__pre2 *= __sgn2; 
# 684
} else 
# 686
{ 
# 687
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 689
}  
# 690
} else 
# 692
{ 
# 693
__pre1 = ((_Tp)0); 
# 694
__pre2 = ((_Tp)0); 
# 695
std::__throw_runtime_error("Underflow of gamma functions in __hyperg_reflect"); 
# 697
}  }  }  
# 699
const _Tp __F1 = __hyperg_series(__a, __b, ((_Tp)1) - __d, ((_Tp)1) - __x); 
# 701
const _Tp __F2 = __hyperg_series(__c - __a, __c - __b, ((_Tp)1) + __d, ((_Tp)1) - __x); 
# 704
const _Tp __F = (__pre1 * __F1) + (__pre2 * __F2); 
# 706
return __F; 
# 707
}  
# 708
} 
# 728 "/usr/include/c++/7/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 730
__hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 731
{ 
# 733
const _Tp __a_nint = std::nearbyint(__a); 
# 734
const _Tp __b_nint = std::nearbyint(__b); 
# 735
const _Tp __c_nint = std::nearbyint(__c); 
# 741
const _Tp __toler = ((_Tp)1000) * std::template numeric_limits< _Tp> ::epsilon(); 
# 742
if (std::abs(__x) >= ((_Tp)1)) { 
# 743
std::__throw_domain_error("Argument outside unit circle in __hyperg."); } else { 
# 745
if (((__isnan(__a) || __isnan(__b)) || __isnan(__c)) || __isnan(__x)) { 
# 747
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 748
if ((__c_nint == __c) && (__c_nint <= ((_Tp)0))) { 
# 749
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 750
if ((std::abs(__c - __b) < __toler) || (std::abs(__c - __a) < __toler)) { 
# 751
return std::pow(((_Tp)1) - __x, (__c - __a) - __b); } else { 
# 752
if ((__a >= ((_Tp)0)) && (__b >= ((_Tp)0)) && (__c >= ((_Tp)0)) && (__x >= ((_Tp)0)) && (__x < ((_Tp)(0.995L)))) { 
# 754
return __hyperg_series(__a, __b, __c, __x); } else { 
# 755
if ((std::abs(__a) < ((_Tp)10)) && (std::abs(__b) < ((_Tp)10))) 
# 756
{ 
# 759
if ((__a < ((_Tp)0)) && (std::abs(__a - __a_nint) < __toler)) { 
# 760
return __hyperg_series(__a_nint, __b, __c, __x); } else { 
# 761
if ((__b < ((_Tp)0)) && (std::abs(__b - __b_nint) < __toler)) { 
# 762
return __hyperg_series(__a, __b_nint, __c, __x); } else { 
# 763
if (__x < (-((_Tp)(0.25L)))) { 
# 764
return __hyperg_luke(__a, __b, __c, __x); } else { 
# 765
if (__x < ((_Tp)(0.5L))) { 
# 766
return __hyperg_series(__a, __b, __c, __x); } else { 
# 768
if (std::abs(__c) > ((_Tp)10)) { 
# 769
return __hyperg_series(__a, __b, __c, __x); } else { 
# 771
return __hyperg_reflect(__a, __b, __c, __x); }  }  }  }  }  
# 772
} else { 
# 774
return __hyperg_luke(__a, __b, __c, __x); }  }  }  }  }  }  
# 775
} 
# 778
}
# 783
}
# 49 "/usr/include/c++/7/tr1/legendre_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/tr1/legendre_function.tcc" 3
namespace __detail { 
# 80 "/usr/include/c++/7/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 82
__poly_legendre_p(unsigned __l, _Tp __x) 
# 83
{ 
# 85
if ((__x < ((_Tp)(-1))) || (__x > ((_Tp)(+1)))) { 
# 86
std::__throw_domain_error("Argument out of range in __poly_legendre_p."); } else { 
# 88
if (__isnan(__x)) { 
# 89
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 90
if (__x == (+((_Tp)1))) { 
# 91
return +((_Tp)1); } else { 
# 92
if (__x == (-((_Tp)1))) { 
# 93
return (((__l % (2)) == (1)) ? -((_Tp)1) : (+((_Tp)1))); } else 
# 95
{ 
# 96
_Tp __p_lm2 = ((_Tp)1); 
# 97
if (__l == (0)) { 
# 98
return __p_lm2; }  
# 100
_Tp __p_lm1 = __x; 
# 101
if (__l == (1)) { 
# 102
return __p_lm1; }  
# 104
_Tp __p_l = (0); 
# 105
for (unsigned __ll = (2); __ll <= __l; ++__ll) 
# 106
{ 
# 109
__p_l = ((((((_Tp)2) * __x) * __p_lm1) - __p_lm2) - (((__x * __p_lm1) - __p_lm2) / ((_Tp)__ll))); 
# 111
__p_lm2 = __p_lm1; 
# 112
__p_lm1 = __p_l; 
# 113
}  
# 115
return __p_l; 
# 116
}  }  }  }  
# 117
} 
# 137 "/usr/include/c++/7/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 139
__assoc_legendre_p(unsigned __l, unsigned __m, _Tp __x) 
# 140
{ 
# 142
if ((__x < ((_Tp)(-1))) || (__x > ((_Tp)(+1)))) { 
# 143
std::__throw_domain_error("Argument out of range in __assoc_legendre_p."); } else { 
# 145
if (__m > __l) { 
# 146
std::__throw_domain_error("Degree out of range in __assoc_legendre_p."); } else { 
# 148
if (__isnan(__x)) { 
# 149
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 150
if (__m == (0)) { 
# 151
return __poly_legendre_p(__l, __x); } else 
# 153
{ 
# 154
_Tp __p_mm = ((_Tp)1); 
# 155
if (__m > (0)) 
# 156
{ 
# 159
_Tp __root = std::sqrt(((_Tp)1) - __x) * std::sqrt(((_Tp)1) + __x); 
# 160
_Tp __fact = ((_Tp)1); 
# 161
for (unsigned __i = (1); __i <= __m; ++__i) 
# 162
{ 
# 163
__p_mm *= ((-__fact) * __root); 
# 164
__fact += ((_Tp)2); 
# 165
}  
# 166
}  
# 167
if (__l == __m) { 
# 168
return __p_mm; }  
# 170
_Tp __p_mp1m = (((_Tp)(((2) * __m) + (1))) * __x) * __p_mm; 
# 171
if (__l == (__m + (1))) { 
# 172
return __p_mp1m; }  
# 174
_Tp __p_lm2m = __p_mm; 
# 175
_Tp __P_lm1m = __p_mp1m; 
# 176
_Tp __p_lm = ((_Tp)0); 
# 177
for (unsigned __j = __m + (2); __j <= __l; ++__j) 
# 178
{ 
# 179
__p_lm = ((((((_Tp)(((2) * __j) - (1))) * __x) * __P_lm1m) - (((_Tp)((__j + __m) - (1))) * __p_lm2m)) / ((_Tp)(__j - __m))); 
# 181
__p_lm2m = __P_lm1m; 
# 182
__P_lm1m = __p_lm; 
# 183
}  
# 185
return __p_lm; 
# 186
}  }  }  }  
# 187
} 
# 216 "/usr/include/c++/7/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 218
__sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 219
{ 
# 220
if (__isnan(__theta)) { 
# 221
return std::template numeric_limits< _Tp> ::quiet_NaN(); }  
# 223
const _Tp __x = std::cos(__theta); 
# 225
if (__l < __m) 
# 226
{ 
# 227
std::__throw_domain_error("Bad argument in __sph_legendre."); 
# 229
} else { 
# 230
if (__m == (0)) 
# 231
{ 
# 232
_Tp __P = __poly_legendre_p(__l, __x); 
# 233
_Tp __fact = std::sqrt(((_Tp)(((2) * __l) + (1))) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 235
__P *= __fact; 
# 236
return __P; 
# 237
} else { 
# 238
if ((__x == ((_Tp)1)) || (__x == (-((_Tp)1)))) 
# 239
{ 
# 241
return (_Tp)0; 
# 242
} else 
# 244
{ 
# 250
const _Tp __sgn = ((__m % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1); 
# 251
const _Tp __y_mp1m_factor = __x * std::sqrt((_Tp)(((2) * __m) + (3))); 
# 253
const _Tp __lncirc = std::log1p((-__x) * __x); 
# 259
const _Tp __lnpoch = std::lgamma((_Tp)(__m + ((_Tp)(0.5L)))) - std::lgamma((_Tp)__m); 
# 265
const _Tp __lnpre_val = ((-((_Tp)(0.25L))) * __numeric_constants< _Tp> ::__lnpi()) + (((_Tp)(0.5L)) * (__lnpoch + (__m * __lncirc))); 
# 268
_Tp __sr = std::sqrt((((_Tp)2) + (((_Tp)1) / __m)) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 270
_Tp __y_mm = (__sgn * __sr) * std::exp(__lnpre_val); 
# 271
_Tp __y_mp1m = __y_mp1m_factor * __y_mm; 
# 273
if (__l == __m) 
# 274
{ 
# 275
return __y_mm; 
# 276
} else { 
# 277
if (__l == (__m + (1))) 
# 278
{ 
# 279
return __y_mp1m; 
# 280
} else 
# 282
{ 
# 283
_Tp __y_lm = ((_Tp)0); 
# 286
for (int __ll = __m + (2); __ll <= __l; ++__ll) 
# 287
{ 
# 288
const _Tp __rat1 = ((_Tp)(__ll - __m)) / ((_Tp)(__ll + __m)); 
# 289
const _Tp __rat2 = ((_Tp)((__ll - __m) - (1))) / ((_Tp)((__ll + __m) - (1))); 
# 290
const _Tp __fact1 = std::sqrt((__rat1 * ((_Tp)((2 * __ll) + 1))) * ((_Tp)((2 * __ll) - 1))); 
# 292
const _Tp __fact2 = std::sqrt(((__rat1 * __rat2) * ((_Tp)((2 * __ll) + 1))) / ((_Tp)((2 * __ll) - 3))); 
# 294
__y_lm = ((((__x * __y_mp1m) * __fact1) - ((((__ll + __m) - (1)) * __y_mm) * __fact2)) / ((_Tp)(__ll - __m))); 
# 296
__y_mm = __y_mp1m; 
# 297
__y_mp1m = __y_lm; 
# 298
}  
# 300
return __y_lm; 
# 301
}  }  
# 302
}  }  }  
# 303
} 
# 306
}
# 311
}
# 51 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 85
__bessel_ik(_Tp __nu, _Tp __x, _Tp &
# 86
__Inu, _Tp &__Knu, _Tp &__Ipnu, _Tp &__Kpnu) 
# 87
{ 
# 88
if (__x == ((_Tp)0)) 
# 89
{ 
# 90
if (__nu == ((_Tp)0)) 
# 91
{ 
# 92
__Inu = ((_Tp)1); 
# 93
__Ipnu = ((_Tp)0); 
# 94
} else { 
# 95
if (__nu == ((_Tp)1)) 
# 96
{ 
# 97
__Inu = ((_Tp)0); 
# 98
__Ipnu = ((_Tp)(0.5L)); 
# 99
} else 
# 101
{ 
# 102
__Inu = ((_Tp)0); 
# 103
__Ipnu = ((_Tp)0); 
# 104
}  }  
# 105
__Knu = std::template numeric_limits< _Tp> ::infinity(); 
# 106
__Kpnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 107
return; 
# 108
}  
# 110
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 111
const _Tp __fp_min = ((_Tp)10) * std::template numeric_limits< _Tp> ::epsilon(); 
# 112
const int __max_iter = 15000; 
# 113
const _Tp __x_min = ((_Tp)2); 
# 115
const int __nl = static_cast< int>(__nu + ((_Tp)(0.5L))); 
# 117
const _Tp __mu = __nu - __nl; 
# 118
const _Tp __mu2 = __mu * __mu; 
# 119
const _Tp __xi = ((_Tp)1) / __x; 
# 120
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 121
_Tp __h = __nu * __xi; 
# 122
if (__h < __fp_min) { 
# 123
__h = __fp_min; }  
# 124
_Tp __b = __xi2 * __nu; 
# 125
_Tp __d = ((_Tp)0); 
# 126
_Tp __c = __h; 
# 127
int __i; 
# 128
for (__i = 1; __i <= __max_iter; ++__i) 
# 129
{ 
# 130
__b += __xi2; 
# 131
__d = (((_Tp)1) / (__b + __d)); 
# 132
__c = (__b + (((_Tp)1) / __c)); 
# 133
const _Tp __del = __c * __d; 
# 134
__h *= __del; 
# 135
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 136
break; }  
# 137
}  
# 138
if (__i > __max_iter) { 
# 139
std::__throw_runtime_error("Argument x too large in __bessel_ik; try asymptotic expansion."); }  
# 142
_Tp __Inul = __fp_min; 
# 143
_Tp __Ipnul = __h * __Inul; 
# 144
_Tp __Inul1 = __Inul; 
# 145
_Tp __Ipnu1 = __Ipnul; 
# 146
_Tp __fact = __nu * __xi; 
# 147
for (int __l = __nl; __l >= 1; --__l) 
# 148
{ 
# 149
const _Tp __Inutemp = (__fact * __Inul) + __Ipnul; 
# 150
__fact -= __xi; 
# 151
__Ipnul = ((__fact * __Inutemp) + __Inul); 
# 152
__Inul = __Inutemp; 
# 153
}  
# 154
_Tp __f = __Ipnul / __Inul; 
# 155
_Tp __Kmu, __Knu1; 
# 156
if (__x < __x_min) 
# 157
{ 
# 158
const _Tp __x2 = __x / ((_Tp)2); 
# 159
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 160
const _Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 162
_Tp __d = (-std::log(__x2)); 
# 163
_Tp __e = __mu * __d; 
# 164
const _Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 166
_Tp __gam1, __gam2, __gampl, __gammi; 
# 167
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 168
_Tp __ff = __fact * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 170
_Tp __sum = __ff; 
# 171
__e = std::exp(__e); 
# 172
_Tp __p = __e / (((_Tp)2) * __gampl); 
# 173
_Tp __q = ((_Tp)1) / ((((_Tp)2) * __e) * __gammi); 
# 174
_Tp __c = ((_Tp)1); 
# 175
__d = (__x2 * __x2); 
# 176
_Tp __sum1 = __p; 
# 177
int __i; 
# 178
for (__i = 1; __i <= __max_iter; ++__i) 
# 179
{ 
# 180
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 181
__c *= (__d / __i); 
# 182
__p /= (__i - __mu); 
# 183
__q /= (__i + __mu); 
# 184
const _Tp __del = __c * __ff; 
# 185
__sum += __del; 
# 186
const _Tp __del1 = __c * (__p - (__i * __ff)); 
# 187
__sum1 += __del1; 
# 188
if (std::abs(__del) < (__eps * std::abs(__sum))) { 
# 189
break; }  
# 190
}  
# 191
if (__i > __max_iter) { 
# 192
std::__throw_runtime_error("Bessel k series failed to converge in __bessel_ik."); }  
# 194
__Kmu = __sum; 
# 195
__Knu1 = (__sum1 * __xi2); 
# 196
} else 
# 198
{ 
# 199
_Tp __b = ((_Tp)2) * (((_Tp)1) + __x); 
# 200
_Tp __d = ((_Tp)1) / __b; 
# 201
_Tp __delh = __d; 
# 202
_Tp __h = __delh; 
# 203
_Tp __q1 = ((_Tp)0); 
# 204
_Tp __q2 = ((_Tp)1); 
# 205
_Tp __a1 = ((_Tp)(0.25L)) - __mu2; 
# 206
_Tp __q = __c = __a1; 
# 207
_Tp __a = (-__a1); 
# 208
_Tp __s = ((_Tp)1) + (__q * __delh); 
# 209
int __i; 
# 210
for (__i = 2; __i <= __max_iter; ++__i) 
# 211
{ 
# 212
__a -= (2 * (__i - 1)); 
# 213
__c = (((-__a) * __c) / __i); 
# 214
const _Tp __qnew = (__q1 - (__b * __q2)) / __a; 
# 215
__q1 = __q2; 
# 216
__q2 = __qnew; 
# 217
__q += (__c * __qnew); 
# 218
__b += ((_Tp)2); 
# 219
__d = (((_Tp)1) / (__b + (__a * __d))); 
# 220
__delh = (((__b * __d) - ((_Tp)1)) * __delh); 
# 221
__h += __delh; 
# 222
const _Tp __dels = __q * __delh; 
# 223
__s += __dels; 
# 224
if (std::abs(__dels / __s) < __eps) { 
# 225
break; }  
# 226
}  
# 227
if (__i > __max_iter) { 
# 228
std::__throw_runtime_error("Steed\'s method failed in __bessel_ik."); }  
# 230
__h = (__a1 * __h); 
# 231
__Kmu = ((std::sqrt(__numeric_constants< _Tp> ::__pi() / (((_Tp)2) * __x)) * std::exp(-__x)) / __s); 
# 233
__Knu1 = ((__Kmu * (((__mu + __x) + ((_Tp)(0.5L))) - __h)) * __xi); 
# 234
}  
# 236
_Tp __Kpmu = ((__mu * __xi) * __Kmu) - __Knu1; 
# 237
_Tp __Inumu = __xi / ((__f * __Kmu) - __Kpmu); 
# 238
__Inu = ((__Inumu * __Inul1) / __Inul); 
# 239
__Ipnu = ((__Inumu * __Ipnu1) / __Inul); 
# 240
for (__i = 1; __i <= __nl; ++__i) 
# 241
{ 
# 242
const _Tp __Knutemp = (((__mu + __i) * __xi2) * __Knu1) + __Kmu; 
# 243
__Kmu = __Knu1; 
# 244
__Knu1 = __Knutemp; 
# 245
}  
# 246
__Knu = __Kmu; 
# 247
__Kpnu = (((__nu * __xi) * __Kmu) - __Knu1); 
# 250
} 
# 267 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 269
__cyl_bessel_i(_Tp __nu, _Tp __x) 
# 270
{ 
# 271
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 272
std::__throw_domain_error("Bad argument in __cyl_bessel_i."); } else { 
# 274
if (__isnan(__nu) || __isnan(__x)) { 
# 275
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 276
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 277
return __cyl_bessel_ij_series(__nu, __x, +((_Tp)1), 200); } else 
# 279
{ 
# 280
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 281
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 282
return __I_nu; 
# 283
}  }  }  
# 284
} 
# 303 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 305
__cyl_bessel_k(_Tp __nu, _Tp __x) 
# 306
{ 
# 307
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 308
std::__throw_domain_error("Bad argument in __cyl_bessel_k."); } else { 
# 310
if (__isnan(__nu) || __isnan(__x)) { 
# 311
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else 
# 313
{ 
# 314
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 315
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 316
return __K_nu; 
# 317
}  }  
# 318
} 
# 337 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 339
__sph_bessel_ik(unsigned __n, _Tp __x, _Tp &
# 340
__i_n, _Tp &__k_n, _Tp &__ip_n, _Tp &__kp_n) 
# 341
{ 
# 342
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 344
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 345
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 347
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 350
__i_n = (__factor * __I_nu); 
# 351
__k_n = (__factor * __K_nu); 
# 352
__ip_n = ((__factor * __Ip_nu) - (__i_n / (((_Tp)2) * __x))); 
# 353
__kp_n = ((__factor * __Kp_nu) - (__k_n / (((_Tp)2) * __x))); 
# 356
} 
# 373 "/usr/include/c++/7/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 375
__airy(_Tp __x, _Tp &__Ai, _Tp &__Bi, _Tp &__Aip, _Tp &__Bip) 
# 376
{ 
# 377
const _Tp __absx = std::abs(__x); 
# 378
const _Tp __rootx = std::sqrt(__absx); 
# 379
const _Tp __z = ((((_Tp)2) * __absx) * __rootx) / ((_Tp)3); 
# 381
if (__x > ((_Tp)0)) 
# 382
{ 
# 383
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 385
__bessel_ik(((_Tp)1) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 386
__Ai = ((__rootx * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 389
__Bi = (__rootx * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 392
__bessel_ik(((_Tp)2) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 393
__Aip = (((-__x) * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 396
__Bip = (__x * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 399
} else { 
# 400
if (__x < ((_Tp)0)) 
# 401
{ 
# 402
_Tp __J_nu, __Jp_nu, __N_nu, __Np_nu; 
# 404
__bessel_jn(((_Tp)1) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 405
__Ai = ((__rootx * (__J_nu - (__N_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 407
__Bi = (((-__rootx) * (__N_nu + (__J_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 410
__bessel_jn(((_Tp)2) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 411
__Aip = ((__absx * ((__N_nu / __numeric_constants< _Tp> ::__sqrt3()) + __J_nu)) / ((_Tp)2)); 
# 413
__Bip = ((__absx * ((__J_nu / __numeric_constants< _Tp> ::__sqrt3()) - __N_nu)) / ((_Tp)2)); 
# 415
} else 
# 417
{ 
# 421
__Ai = ((_Tp)(0.35502805388781723926L)); 
# 422
__Bi = (__Ai * __numeric_constants< _Tp> ::__sqrt3()); 
# 427
__Aip = (-((_Tp)(0.2588194037928067984L))); 
# 428
__Bip = ((-__Aip) * __numeric_constants< _Tp> ::__sqrt3()); 
# 429
}  }  
# 432
} 
# 435
}
# 439
}
# 42 "/usr/include/c++/7/tr1/poly_hermite.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/7/tr1/poly_hermite.tcc" 3
namespace __detail { 
# 72 "/usr/include/c++/7/tr1/poly_hermite.tcc" 3
template< class _Tp> _Tp 
# 74
__poly_hermite_recursion(unsigned __n, _Tp __x) 
# 75
{ 
# 77
_Tp __H_0 = (1); 
# 78
if (__n == (0)) { 
# 79
return __H_0; }  
# 82
_Tp __H_1 = 2 * __x; 
# 83
if (__n == (1)) { 
# 84
return __H_1; }  
# 87
_Tp __H_n, __H_nm1, __H_nm2; 
# 88
unsigned __i; 
# 89
for (((__H_nm2 = __H_0), (__H_nm1 = __H_1)), (__i = (2)); __i <= __n; ++__i) 
# 90
{ 
# 91
__H_n = (2 * ((__x * __H_nm1) - ((__i - (1)) * __H_nm2))); 
# 92
__H_nm2 = __H_nm1; 
# 93
__H_nm1 = __H_n; 
# 94
}  
# 96
return __H_n; 
# 97
} 
# 114 "/usr/include/c++/7/tr1/poly_hermite.tcc" 3
template< class _Tp> inline _Tp 
# 116
__poly_hermite(unsigned __n, _Tp __x) 
# 117
{ 
# 118
if (__isnan(__x)) { 
# 119
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 121
return __poly_hermite_recursion(__n, __x); }  
# 122
} 
# 125
}
# 129
}
# 44 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
namespace __detail { 
# 75 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 77
__poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 78
{ 
# 79
const _Tp __a = (-((_Tp)__n)); 
# 80
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 81
const _Tp __eta = (((_Tp)2) * __b) - (((_Tp)4) * __a); 
# 82
const _Tp __cos2th = __x / __eta; 
# 83
const _Tp __sin2th = ((_Tp)1) - __cos2th; 
# 84
const _Tp __th = std::acos(std::sqrt(__cos2th)); 
# 85
const _Tp __pre_h = ((((__numeric_constants< _Tp> ::__pi_2() * __numeric_constants< _Tp> ::__pi_2()) * __eta) * __eta) * __cos2th) * __sin2th; 
# 90
const _Tp __lg_b = std::lgamma(((_Tp)__n) + __b); 
# 91
const _Tp __lnfact = std::lgamma((_Tp)(__n + (1))); 
# 97
_Tp __pre_term1 = (((_Tp)(0.5L)) * (((_Tp)1) - __b)) * std::log((((_Tp)(0.25L)) * __x) * __eta); 
# 99
_Tp __pre_term2 = ((_Tp)(0.25L)) * std::log(__pre_h); 
# 100
_Tp __lnpre = (((__lg_b - __lnfact) + (((_Tp)(0.5L)) * __x)) + __pre_term1) - __pre_term2; 
# 102
_Tp __ser_term1 = std::sin(__a * __numeric_constants< _Tp> ::__pi()); 
# 103
_Tp __ser_term2 = std::sin(((((_Tp)(0.25L)) * __eta) * ((((_Tp)2) * __th) - std::sin(((_Tp)2) * __th))) + __numeric_constants< _Tp> ::__pi_4()); 
# 107
_Tp __ser = __ser_term1 + __ser_term2; 
# 109
return std::exp(__lnpre) * __ser; 
# 110
} 
# 129 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 131
__poly_laguerre_hyperg(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 132
{ 
# 133
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 134
const _Tp __mx = (-__x); 
# 135
const _Tp __tc_sgn = (__x < ((_Tp)0)) ? (_Tp)1 : (((__n % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1)); 
# 138
_Tp __tc = ((_Tp)1); 
# 139
const _Tp __ax = std::abs(__x); 
# 140
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 141
__tc *= (__ax / __k); }  
# 143
_Tp __term = __tc * __tc_sgn; 
# 144
_Tp __sum = __term; 
# 145
for (int __k = ((int)__n) - 1; __k >= 0; --__k) 
# 146
{ 
# 147
__term *= ((((__b + ((_Tp)__k)) / ((_Tp)(((int)__n) - __k))) * ((_Tp)(__k + 1))) / __mx); 
# 149
__sum += __term; 
# 150
}  
# 152
return __sum; 
# 153
} 
# 185 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 187
__poly_laguerre_recursion(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 188
{ 
# 190
_Tp __l_0 = ((_Tp)1); 
# 191
if (__n == (0)) { 
# 192
return __l_0; }  
# 195
_Tp __l_1 = (((-__x) + ((_Tp)1)) + ((_Tp)__alpha1)); 
# 196
if (__n == (1)) { 
# 197
return __l_1; }  
# 200
_Tp __l_n2 = __l_0; 
# 201
_Tp __l_n1 = __l_1; 
# 202
_Tp __l_n = ((_Tp)0); 
# 203
for (unsigned __nn = (2); __nn <= __n; ++__nn) 
# 204
{ 
# 205
__l_n = (((((((_Tp)(((2) * __nn) - (1))) + ((_Tp)__alpha1)) - __x) * __l_n1) / ((_Tp)__nn)) - (((((_Tp)(__nn - (1))) + ((_Tp)__alpha1)) * __l_n2) / ((_Tp)__nn))); 
# 208
__l_n2 = __l_n1; 
# 209
__l_n1 = __l_n; 
# 210
}  
# 212
return __l_n; 
# 213
} 
# 244 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 246
__poly_laguerre(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 247
{ 
# 248
if (__x < ((_Tp)0)) { 
# 249
std::__throw_domain_error("Negative argument in __poly_laguerre."); } else { 
# 252
if (__isnan(__x)) { 
# 253
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 254
if (__n == (0)) { 
# 255
return (_Tp)1; } else { 
# 256
if (__n == (1)) { 
# 257
return (((_Tp)1) + ((_Tp)__alpha1)) - __x; } else { 
# 258
if (__x == ((_Tp)0)) 
# 259
{ 
# 260
_Tp __prod = ((_Tp)__alpha1) + ((_Tp)1); 
# 261
for (unsigned __k = (2); __k <= __n; ++__k) { 
# 262
__prod *= ((((_Tp)__alpha1) + ((_Tp)__k)) / ((_Tp)__k)); }  
# 263
return __prod; 
# 264
} else { 
# 265
if ((__n > (10000000)) && (((_Tp)__alpha1) > (-((_Tp)1))) && (__x < ((((_Tp)2) * (((_Tp)__alpha1) + ((_Tp)1))) + ((_Tp)((4) * __n))))) { 
# 267
return __poly_laguerre_large_n(__n, __alpha1, __x); } else { 
# 268
if ((((_Tp)__alpha1) >= ((_Tp)0)) || ((__x > ((_Tp)0)) && (((_Tp)__alpha1) < (-((_Tp)(__n + (1))))))) { 
# 270
return __poly_laguerre_recursion(__n, __alpha1, __x); } else { 
# 272
return __poly_laguerre_hyperg(__n, __alpha1, __x); }  }  }  }  }  }  }  
# 273
} 
# 296 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 298
__assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 299
{ return __poly_laguerre< unsigned, _Tp> (__n, __m, __x); } 
# 316 "/usr/include/c++/7/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 318
__laguerre(unsigned __n, _Tp __x) 
# 319
{ return __poly_laguerre< unsigned, _Tp> (__n, 0, __x); } 
# 322
}
# 327
}
# 47 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 61 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
namespace __detail { 
# 78 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 80
__riemann_zeta_sum(_Tp __s) 
# 81
{ 
# 83
if (__s < ((_Tp)1)) { 
# 84
std::__throw_domain_error("Bad argument in zeta sum."); }  
# 86
const unsigned max_iter = (10000); 
# 87
_Tp __zeta = ((_Tp)0); 
# 88
for (unsigned __k = (1); __k < max_iter; ++__k) 
# 89
{ 
# 90
_Tp __term = std::pow(static_cast< _Tp>(__k), -__s); 
# 91
if (__term < std::template numeric_limits< _Tp> ::epsilon()) 
# 92
{ 
# 93
break; 
# 94
}  
# 95
__zeta += __term; 
# 96
}  
# 98
return __zeta; 
# 99
} 
# 115 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 117
__riemann_zeta_alt(_Tp __s) 
# 118
{ 
# 119
_Tp __sgn = ((_Tp)1); 
# 120
_Tp __zeta = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (10000000); ++__i) 
# 122
{ 
# 123
_Tp __term = __sgn / std::pow(__i, __s); 
# 124
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__zeta += __term; 
# 127
__sgn *= ((_Tp)(-1)); 
# 128
}  
# 129
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 131
return __zeta; 
# 132
} 
# 157 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 159
__riemann_zeta_glob(_Tp __s) 
# 160
{ 
# 161
_Tp __zeta = ((_Tp)0); 
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 165
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 170
if (__s < ((_Tp)0)) 
# 171
{ 
# 173
if (std::fmod(__s, (_Tp)2) == ((_Tp)0)) { 
# 174
return (_Tp)0; } else 
# 177
{ 
# 178
_Tp __zeta = __riemann_zeta_glob(((_Tp)1) - __s); 
# 179
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 188
return __zeta; 
# 189
}  
# 190
}  
# 192
_Tp __num = ((_Tp)(0.5L)); 
# 193
const unsigned __maxit = (10000); 
# 194
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 195
{ 
# 196
bool __punt = false; 
# 197
_Tp __sgn = ((_Tp)1); 
# 198
_Tp __term = ((_Tp)0); 
# 199
for (unsigned __j = (0); __j <= __i; ++__j) 
# 200
{ 
# 202
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 210
if (__bincoeff > __max_bincoeff) 
# 211
{ 
# 213
__punt = true; 
# 214
break; 
# 215
}  
# 216
__bincoeff = std::exp(__bincoeff); 
# 217
__term += ((__sgn * __bincoeff) * std::pow((_Tp)((1) + __j), -__s)); 
# 218
__sgn *= ((_Tp)(-1)); 
# 219
}  
# 220
if (__punt) { 
# 221
break; }  
# 222
__term *= __num; 
# 223
__zeta += __term; 
# 224
if (std::abs(__term / __zeta) < __eps) { 
# 225
break; }  
# 226
__num *= ((_Tp)(0.5L)); 
# 227
}  
# 229
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 231
return __zeta; 
# 232
} 
# 252 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 254
__riemann_zeta_product(_Tp __s) 
# 255
{ 
# 256
static const _Tp __prime[] = {((_Tp)2), ((_Tp)3), ((_Tp)5), ((_Tp)7), ((_Tp)11), ((_Tp)13), ((_Tp)17), ((_Tp)19), ((_Tp)23), ((_Tp)29), ((_Tp)31), ((_Tp)37), ((_Tp)41), ((_Tp)43), ((_Tp)47), ((_Tp)53), ((_Tp)59), ((_Tp)61), ((_Tp)67), ((_Tp)71), ((_Tp)73), ((_Tp)79), ((_Tp)83), ((_Tp)89), ((_Tp)97), ((_Tp)101), ((_Tp)103), ((_Tp)107), ((_Tp)109)}; 
# 262
static const unsigned __num_primes = (sizeof(__prime) / sizeof(_Tp)); 
# 264
_Tp __zeta = ((_Tp)1); 
# 265
for (unsigned __i = (0); __i < __num_primes; ++__i) 
# 266
{ 
# 267
const _Tp __fact = ((_Tp)1) - std::pow(__prime[__i], -__s); 
# 268
__zeta *= __fact; 
# 269
if ((((_Tp)1) - __fact) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 270
break; }  
# 271
}  
# 273
__zeta = (((_Tp)1) / __zeta); 
# 275
return __zeta; 
# 276
} 
# 293 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 295
__riemann_zeta(_Tp __s) 
# 296
{ 
# 297
if (__isnan(__s)) { 
# 298
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 299
if (__s == ((_Tp)1)) { 
# 300
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 301
if (__s < (-((_Tp)19))) 
# 302
{ 
# 303
_Tp __zeta = __riemann_zeta_product(((_Tp)1) - __s); 
# 304
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 312
return __zeta; 
# 313
} else { 
# 314
if (__s < ((_Tp)20)) 
# 315
{ 
# 317
bool __glob = true; 
# 318
if (__glob) { 
# 319
return __riemann_zeta_glob(__s); } else 
# 321
{ 
# 322
if (__s > ((_Tp)1)) { 
# 323
return __riemann_zeta_sum(__s); } else 
# 325
{ 
# 326
_Tp __zeta = ((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::tgamma(((_Tp)1) - __s)) * __riemann_zeta_sum(((_Tp)1) - __s); 
# 335
return __zeta; 
# 336
}  
# 337
}  
# 338
} else { 
# 340
return __riemann_zeta_product(__s); }  }  }  }  
# 341
} 
# 365 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 367
__hurwitz_zeta_glob(_Tp __a, _Tp __s) 
# 368
{ 
# 369
_Tp __zeta = ((_Tp)0); 
# 371
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 373
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 376
const unsigned __maxit = (10000); 
# 377
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 378
{ 
# 379
bool __punt = false; 
# 380
_Tp __sgn = ((_Tp)1); 
# 381
_Tp __term = ((_Tp)0); 
# 382
for (unsigned __j = (0); __j <= __i; ++__j) 
# 383
{ 
# 385
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 393
if (__bincoeff > __max_bincoeff) 
# 394
{ 
# 396
__punt = true; 
# 397
break; 
# 398
}  
# 399
__bincoeff = std::exp(__bincoeff); 
# 400
__term += ((__sgn * __bincoeff) * std::pow((_Tp)(__a + __j), -__s)); 
# 401
__sgn *= ((_Tp)(-1)); 
# 402
}  
# 403
if (__punt) { 
# 404
break; }  
# 405
__term /= ((_Tp)(__i + (1))); 
# 406
if (std::abs(__term / __zeta) < __eps) { 
# 407
break; }  
# 408
__zeta += __term; 
# 409
}  
# 411
__zeta /= (__s - ((_Tp)1)); 
# 413
return __zeta; 
# 414
} 
# 430 "/usr/include/c++/7/tr1/riemann_zeta.tcc" 3
template< class _Tp> inline _Tp 
# 432
__hurwitz_zeta(_Tp __a, _Tp __s) 
# 433
{ return __hurwitz_zeta_glob(__a, __s); } 
# 436
}
# 441
}
# 61 "/usr/include/c++/7/bits/specfun.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 206 "/usr/include/c++/7/bits/specfun.h" 3
inline float assoc_laguerref(unsigned __n, unsigned __m, float __x) 
# 207
{ return __detail::__assoc_laguerre< float> (__n, __m, __x); } 
# 216
inline long double assoc_laguerrel(unsigned __n, unsigned __m, long double __x) 
# 217
{ return __detail::__assoc_laguerre< long double> (__n, __m, __x); } 
# 250 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 252
assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 253
{ 
# 254
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 255
return __detail::__assoc_laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __m, __x); 
# 256
} 
# 267 "/usr/include/c++/7/bits/specfun.h" 3
inline float assoc_legendref(unsigned __l, unsigned __m, float __x) 
# 268
{ return __detail::__assoc_legendre_p< float> (__l, __m, __x); } 
# 276
inline long double assoc_legendrel(unsigned __l, unsigned __m, long double __x) 
# 277
{ return __detail::__assoc_legendre_p< long double> (__l, __m, __x); } 
# 296 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 298
assoc_legendre(unsigned __l, unsigned __m, _Tp __x) 
# 299
{ 
# 300
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 301
return __detail::__assoc_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __x); 
# 302
} 
# 312 "/usr/include/c++/7/bits/specfun.h" 3
inline float betaf(float __a, float __b) 
# 313
{ return __detail::__beta< float> (__a, __b); } 
# 322
inline long double betal(long double __a, long double __b) 
# 323
{ return __detail::__beta< long double> (__a, __b); } 
# 341 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpa, class _Tpb> inline typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type 
# 343
beta(_Tpa __a, _Tpb __b) 
# 344
{ 
# 345
typedef typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type __type; 
# 346
return __detail::__beta< typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type> (__a, __b); 
# 347
} 
# 358 "/usr/include/c++/7/bits/specfun.h" 3
inline float comp_ellint_1f(float __k) 
# 359
{ return __detail::__comp_ellint_1< float> (__k); } 
# 368
inline long double comp_ellint_1l(long double __k) 
# 369
{ return __detail::__comp_ellint_1< long double> (__k); } 
# 389 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 391
comp_ellint_1(_Tp __k) 
# 392
{ 
# 393
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 394
return __detail::__comp_ellint_1< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 395
} 
# 406 "/usr/include/c++/7/bits/specfun.h" 3
inline float comp_ellint_2f(float __k) 
# 407
{ return __detail::__comp_ellint_2< float> (__k); } 
# 416
inline long double comp_ellint_2l(long double __k) 
# 417
{ return __detail::__comp_ellint_2< long double> (__k); } 
# 436 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 438
comp_ellint_2(_Tp __k) 
# 439
{ 
# 440
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 441
return __detail::__comp_ellint_2< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 442
} 
# 453 "/usr/include/c++/7/bits/specfun.h" 3
inline float comp_ellint_3f(float __k, float __nu) 
# 454
{ return __detail::__comp_ellint_3< float> (__k, __nu); } 
# 463
inline long double comp_ellint_3l(long double __k, long double __nu) 
# 464
{ return __detail::__comp_ellint_3< long double> (__k, __nu); } 
# 487 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp, class _Tpn> inline typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type 
# 489
comp_ellint_3(_Tp __k, _Tpn __nu) 
# 490
{ 
# 491
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type __type; 
# 492
return __detail::__comp_ellint_3< typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type> (__k, __nu); 
# 493
} 
# 504 "/usr/include/c++/7/bits/specfun.h" 3
inline float cyl_bessel_if(float __nu, float __x) 
# 505
{ return __detail::__cyl_bessel_i< float> (__nu, __x); } 
# 514
inline long double cyl_bessel_il(long double __nu, long double __x) 
# 515
{ return __detail::__cyl_bessel_i< long double> (__nu, __x); } 
# 533 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 535
cyl_bessel_i(_Tpnu __nu, _Tp __x) 
# 536
{ 
# 537
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 538
return __detail::__cyl_bessel_i< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 539
} 
# 550 "/usr/include/c++/7/bits/specfun.h" 3
inline float cyl_bessel_jf(float __nu, float __x) 
# 551
{ return __detail::__cyl_bessel_j< float> (__nu, __x); } 
# 560
inline long double cyl_bessel_jl(long double __nu, long double __x) 
# 561
{ return __detail::__cyl_bessel_j< long double> (__nu, __x); } 
# 579 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 581
cyl_bessel_j(_Tpnu __nu, _Tp __x) 
# 582
{ 
# 583
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 584
return __detail::__cyl_bessel_j< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 585
} 
# 596 "/usr/include/c++/7/bits/specfun.h" 3
inline float cyl_bessel_kf(float __nu, float __x) 
# 597
{ return __detail::__cyl_bessel_k< float> (__nu, __x); } 
# 606
inline long double cyl_bessel_kl(long double __nu, long double __x) 
# 607
{ return __detail::__cyl_bessel_k< long double> (__nu, __x); } 
# 631 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 633
cyl_bessel_k(_Tpnu __nu, _Tp __x) 
# 634
{ 
# 635
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 636
return __detail::__cyl_bessel_k< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 637
} 
# 648 "/usr/include/c++/7/bits/specfun.h" 3
inline float cyl_neumannf(float __nu, float __x) 
# 649
{ return __detail::__cyl_neumann_n< float> (__nu, __x); } 
# 658
inline long double cyl_neumannl(long double __nu, long double __x) 
# 659
{ return __detail::__cyl_neumann_n< long double> (__nu, __x); } 
# 679 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 681
cyl_neumann(_Tpnu __nu, _Tp __x) 
# 682
{ 
# 683
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 684
return __detail::__cyl_neumann_n< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 685
} 
# 696 "/usr/include/c++/7/bits/specfun.h" 3
inline float ellint_1f(float __k, float __phi) 
# 697
{ return __detail::__ellint_1< float> (__k, __phi); } 
# 706
inline long double ellint_1l(long double __k, long double __phi) 
# 707
{ return __detail::__ellint_1< long double> (__k, __phi); } 
# 727 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 729
ellint_1(_Tp __k, _Tpp __phi) 
# 730
{ 
# 731
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 732
return __detail::__ellint_1< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 733
} 
# 744 "/usr/include/c++/7/bits/specfun.h" 3
inline float ellint_2f(float __k, float __phi) 
# 745
{ return __detail::__ellint_2< float> (__k, __phi); } 
# 754
inline long double ellint_2l(long double __k, long double __phi) 
# 755
{ return __detail::__ellint_2< long double> (__k, __phi); } 
# 775 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 777
ellint_2(_Tp __k, _Tpp __phi) 
# 778
{ 
# 779
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 780
return __detail::__ellint_2< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 781
} 
# 792 "/usr/include/c++/7/bits/specfun.h" 3
inline float ellint_3f(float __k, float __nu, float __phi) 
# 793
{ return __detail::__ellint_3< float> (__k, __nu, __phi); } 
# 802
inline long double ellint_3l(long double __k, long double __nu, long double __phi) 
# 803
{ return __detail::__ellint_3< long double> (__k, __nu, __phi); } 
# 828 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp, class _Tpn, class _Tpp> inline typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type 
# 830
ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type __type; 
# 833
return __detail::__ellint_3< typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type> (__k, __nu, __phi); 
# 834
} 
# 844 "/usr/include/c++/7/bits/specfun.h" 3
inline float expintf(float __x) 
# 845
{ return __detail::__expint< float> (__x); } 
# 854
inline long double expintl(long double __x) 
# 855
{ return __detail::__expint< long double> (__x); } 
# 868 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 870
expint(_Tp __x) 
# 871
{ 
# 872
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 873
return __detail::__expint< typename __gnu_cxx::__promote< _Tp> ::__type> (__x); 
# 874
} 
# 885 "/usr/include/c++/7/bits/specfun.h" 3
inline float hermitef(unsigned __n, float __x) 
# 886
{ return __detail::__poly_hermite< float> (__n, __x); } 
# 895
inline long double hermitel(unsigned __n, long double __x) 
# 896
{ return __detail::__poly_hermite< long double> (__n, __x); } 
# 916 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 918
hermite(unsigned __n, _Tp __x) 
# 919
{ 
# 920
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 921
return __detail::__poly_hermite< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 922
} 
# 933 "/usr/include/c++/7/bits/specfun.h" 3
inline float laguerref(unsigned __n, float __x) 
# 934
{ return __detail::__laguerre< float> (__n, __x); } 
# 943
inline long double laguerrel(unsigned __n, long double __x) 
# 944
{ return __detail::__laguerre< long double> (__n, __x); } 
# 960 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 962
laguerre(unsigned __n, _Tp __x) 
# 963
{ 
# 964
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 965
return __detail::__laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 966
} 
# 977 "/usr/include/c++/7/bits/specfun.h" 3
inline float legendref(unsigned __l, float __x) 
# 978
{ return __detail::__poly_legendre_p< float> (__l, __x); } 
# 987
inline long double legendrel(unsigned __l, long double __x) 
# 988
{ return __detail::__poly_legendre_p< long double> (__l, __x); } 
# 1005 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1007
legendre(unsigned __l, _Tp __x) 
# 1008
{ 
# 1009
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1010
return __detail::__poly_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __x); 
# 1011
} 
# 1022 "/usr/include/c++/7/bits/specfun.h" 3
inline float riemann_zetaf(float __s) 
# 1023
{ return __detail::__riemann_zeta< float> (__s); } 
# 1032
inline long double riemann_zetal(long double __s) 
# 1033
{ return __detail::__riemann_zeta< long double> (__s); } 
# 1056 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1058
riemann_zeta(_Tp __s) 
# 1059
{ 
# 1060
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1061
return __detail::__riemann_zeta< typename __gnu_cxx::__promote< _Tp> ::__type> (__s); 
# 1062
} 
# 1073 "/usr/include/c++/7/bits/specfun.h" 3
inline float sph_besself(unsigned __n, float __x) 
# 1074
{ return __detail::__sph_bessel< float> (__n, __x); } 
# 1083
inline long double sph_bessell(unsigned __n, long double __x) 
# 1084
{ return __detail::__sph_bessel< long double> (__n, __x); } 
# 1100 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1102
sph_bessel(unsigned __n, _Tp __x) 
# 1103
{ 
# 1104
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1105
return __detail::__sph_bessel< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1106
} 
# 1117 "/usr/include/c++/7/bits/specfun.h" 3
inline float sph_legendref(unsigned __l, unsigned __m, float __theta) 
# 1118
{ return __detail::__sph_legendre< float> (__l, __m, __theta); } 
# 1128 "/usr/include/c++/7/bits/specfun.h" 3
inline long double sph_legendrel(unsigned __l, unsigned __m, long double __theta) 
# 1129
{ return __detail::__sph_legendre< long double> (__l, __m, __theta); } 
# 1147 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1149
sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 1150
{ 
# 1151
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1152
return __detail::__sph_legendre< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __theta); 
# 1153
} 
# 1164 "/usr/include/c++/7/bits/specfun.h" 3
inline float sph_neumannf(unsigned __n, float __x) 
# 1165
{ return __detail::__sph_neumann< float> (__n, __x); } 
# 1174
inline long double sph_neumannl(unsigned __n, long double __x) 
# 1175
{ return __detail::__sph_neumann< long double> (__n, __x); } 
# 1191 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1193
sph_neumann(unsigned __n, _Tp __x) 
# 1194
{ 
# 1195
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1196
return __detail::__sph_neumann< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1197
} 
# 1202
}
# 1204
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 1217 "/usr/include/c++/7/bits/specfun.h" 3
inline float conf_hypergf(float __a, float __c, float __x) 
# 1218
{ return std::__detail::__conf_hyperg< float> (__a, __c, __x); } 
# 1228 "/usr/include/c++/7/bits/specfun.h" 3
inline long double conf_hypergl(long double __a, long double __c, long double __x) 
# 1229
{ return std::__detail::__conf_hyperg< long double> (__a, __c, __x); } 
# 1247 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpa, class _Tpc, class _Tp> inline typename __promote_3< _Tpa, _Tpc, _Tp> ::__type 
# 1249
conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x) 
# 1250
{ 
# 1251
typedef typename __promote_3< _Tpa, _Tpc, _Tp> ::__type __type; 
# 1252
return std::__detail::__conf_hyperg< typename __promote_3< _Tpa, _Tpc, _Tp> ::__type> (__a, __c, __x); 
# 1253
} 
# 1265 "/usr/include/c++/7/bits/specfun.h" 3
inline float hypergf(float __a, float __b, float __c, float __x) 
# 1266
{ return std::__detail::__hyperg< float> (__a, __b, __c, __x); } 
# 1276 "/usr/include/c++/7/bits/specfun.h" 3
inline long double hypergl(long double __a, long double __b, long double __c, long double __x) 
# 1277
{ return std::__detail::__hyperg< long double> (__a, __b, __c, __x); } 
# 1296 "/usr/include/c++/7/bits/specfun.h" 3
template< class _Tpa, class _Tpb, class _Tpc, class _Tp> inline typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type 
# 1298
hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x) 
# 1299
{ 
# 1301
typedef typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type __type; 
# 1302
return std::__detail::__hyperg< typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type> (__a, __b, __c, __x); 
# 1303
} 
# 1305
}
# 1307
#pragma GCC visibility pop
# 1917 "/usr/include/c++/7/cmath" 3
}
# 38 "/usr/include/c++/7/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 132
using ::aligned_alloc;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/7/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 9146 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 9147
constexpr bool signbit(float x); 
# 9148
constexpr bool signbit(double x); 
# 9149
constexpr bool signbit(long double x); 
# 9150
constexpr bool isfinite(float x); 
# 9151
constexpr bool isfinite(double x); 
# 9152
constexpr bool isfinite(long double x); 
# 9153
constexpr bool isnan(float x); 
# 9158
constexpr bool isnan(double x); 
# 9160
constexpr bool isnan(long double x); 
# 9161
constexpr bool isinf(float x); 
# 9166
constexpr bool isinf(double x); 
# 9168
constexpr bool isinf(long double x); 
# 9169
}
# 9322 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 9324
template< class T> extern T __pow_helper(T, int); 
# 9325
template< class T> extern T __cmath_power(T, unsigned); 
# 9326
}
# 9328
using std::abs;
# 9329
using std::fabs;
# 9330
using std::ceil;
# 9331
using std::floor;
# 9332
using std::sqrt;
# 9334
using std::pow;
# 9336
using std::log;
# 9337
using std::log10;
# 9338
using std::fmod;
# 9339
using std::modf;
# 9340
using std::exp;
# 9341
using std::frexp;
# 9342
using std::ldexp;
# 9343
using std::asin;
# 9344
using std::sin;
# 9345
using std::sinh;
# 9346
using std::acos;
# 9347
using std::cos;
# 9348
using std::cosh;
# 9349
using std::atan;
# 9350
using std::atan2;
# 9351
using std::tan;
# 9352
using std::tanh;
# 9723 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 9732 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 9742 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long abs(long); 
# 9743
extern constexpr float abs(float); 
# 9744
extern constexpr double abs(double); 
# 9745
extern constexpr float fabs(float); 
# 9746
extern constexpr float ceil(float); 
# 9747
extern constexpr float floor(float); 
# 9748
extern constexpr float sqrt(float); 
# 9749
extern constexpr float pow(float, float); 
# 9754
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 9764
extern constexpr float log(float); 
# 9765
extern constexpr float log10(float); 
# 9766
extern constexpr float fmod(float, float); 
# 9767
extern inline float modf(float, float *); 
# 9768
extern constexpr float exp(float); 
# 9769
extern inline float frexp(float, int *); 
# 9770
extern constexpr float ldexp(float, int); 
# 9771
extern constexpr float asin(float); 
# 9772
extern constexpr float sin(float); 
# 9773
extern constexpr float sinh(float); 
# 9774
extern constexpr float acos(float); 
# 9775
extern constexpr float cos(float); 
# 9776
extern constexpr float cosh(float); 
# 9777
extern constexpr float atan(float); 
# 9778
extern constexpr float atan2(float, float); 
# 9779
extern constexpr float tan(float); 
# 9780
extern constexpr float tanh(float); 
# 9859 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 9965 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 9966
constexpr float logb(float a); 
# 9967
constexpr int ilogb(float a); 
# 9968
constexpr float scalbn(float a, int b); 
# 9969
constexpr float scalbln(float a, long b); 
# 9970
constexpr float exp2(float a); 
# 9971
constexpr float expm1(float a); 
# 9972
constexpr float log2(float a); 
# 9973
constexpr float log1p(float a); 
# 9974
constexpr float acosh(float a); 
# 9975
constexpr float asinh(float a); 
# 9976
constexpr float atanh(float a); 
# 9977
constexpr float hypot(float a, float b); 
# 9978
constexpr float cbrt(float a); 
# 9979
constexpr float erf(float a); 
# 9980
constexpr float erfc(float a); 
# 9981
constexpr float lgamma(float a); 
# 9982
constexpr float tgamma(float a); 
# 9983
constexpr float copysign(float a, float b); 
# 9984
constexpr float nextafter(float a, float b); 
# 9985
constexpr float remainder(float a, float b); 
# 9986
inline float remquo(float a, float b, int * quo); 
# 9987
constexpr float round(float a); 
# 9988
constexpr long lround(float a); 
# 9989
constexpr long long llround(float a); 
# 9990
constexpr float trunc(float a); 
# 9991
constexpr float rint(float a); 
# 9992
constexpr long lrint(float a); 
# 9993
constexpr long long llrint(float a); 
# 9994
constexpr float nearbyint(float a); 
# 9995
constexpr float fdim(float a, float b); 
# 9996
constexpr float fma(float a, float b, float c); 
# 9997
constexpr float fmax(float a, float b); 
# 9998
constexpr float fmin(float a, float b); 
# 9999
}
# 10104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 10106
static inline float rsqrt(const float a); 
# 10108
static inline float rcbrt(const float a); 
# 10110
static inline float sinpi(const float a); 
# 10112
static inline float cospi(const float a); 
# 10114
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 10116
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 10118
static inline float j0(const float a); 
# 10120
static inline float j1(const float a); 
# 10122
static inline float jn(const int n, const float a); 
# 10124
static inline float y0(const float a); 
# 10126
static inline float y1(const float a); 
# 10128
static inline float yn(const int n, const float a); 
# 10130
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 10132
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 10134
static inline float erfinv(const float a); 
# 10136
static inline float erfcinv(const float a); 
# 10138
static inline float normcdfinv(const float a); 
# 10140
static inline float normcdf(const float a); 
# 10142
static inline float erfcx(const float a); 
# 10144
static inline double copysign(const double a, const float b); 
# 10146
static inline double copysign(const float a, const double b); 
# 10154
static inline unsigned min(const unsigned a, const unsigned b); 
# 10162
static inline unsigned min(const int a, const unsigned b); 
# 10170
static inline unsigned min(const unsigned a, const int b); 
# 10178
static inline long min(const long a, const long b); 
# 10186
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 10194
static inline unsigned long min(const long a, const unsigned long b); 
# 10202
static inline unsigned long min(const unsigned long a, const long b); 
# 10210
static inline long long min(const long long a, const long long b); 
# 10218
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 10226
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 10234
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 10245 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 10256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 10266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 10276 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 10284
static inline unsigned max(const unsigned a, const unsigned b); 
# 10292
static inline unsigned max(const int a, const unsigned b); 
# 10300
static inline unsigned max(const unsigned a, const int b); 
# 10308
static inline long max(const long a, const long b); 
# 10316
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 10324
static inline unsigned long max(const long a, const unsigned long b); 
# 10332
static inline unsigned long max(const unsigned long a, const long b); 
# 10340
static inline long long max(const long long a, const long long b); 
# 10348
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 10356
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 10364
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 10375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 10386 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 10396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 10406 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 10417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 10418
__attribute__((unused)) inline void *__nv_aligned_device_malloc(size_t size, size_t align) 
# 10419
{int volatile ___ = 1;(void)size;(void)align;
# 10422
::exit(___);}
#if 0
# 10419
{ 
# 10420
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(size_t, size_t); 
# 10421
return __nv_aligned_device_malloc_impl(size, align); 
# 10422
} 
#endif
# 10423 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 758 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 74 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 75
struct surface : public surfaceReference { 
# 78
surface() 
# 79
{ 
# 80
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 81
} 
# 83
surface(cudaChannelFormatDesc desc) 
# 84
{ 
# 85
(channelDesc) = desc; 
# 86
} 
# 88
}; 
# 90
template< int dim> 
# 91
struct surface< void, dim>  : public surfaceReference { 
# 94
surface() 
# 95
{ 
# 96
(channelDesc) = cudaCreateChannelDesc< void> (); 
# 97
} 
# 99
}; 
# 74 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 75
struct texture : public textureReference { 
# 78
texture(int norm = 0, cudaTextureFilterMode 
# 79
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 80
aMode = cudaAddressModeClamp) 
# 81
{ 
# 82
(normalized) = norm; 
# 83
(filterMode) = fMode; 
# 84
((addressMode)[0]) = aMode; 
# 85
((addressMode)[1]) = aMode; 
# 86
((addressMode)[2]) = aMode; 
# 87
(channelDesc) = cudaCreateChannelDesc< T> (); 
# 88
(sRGB) = 0; 
# 89
} 
# 91
texture(int norm, cudaTextureFilterMode 
# 92
fMode, cudaTextureAddressMode 
# 93
aMode, cudaChannelFormatDesc 
# 94
desc) 
# 95
{ 
# 96
(normalized) = norm; 
# 97
(filterMode) = fMode; 
# 98
((addressMode)[0]) = aMode; 
# 99
((addressMode)[1]) = aMode; 
# 100
((addressMode)[2]) = aMode; 
# 101
(channelDesc) = desc; 
# 102
(sRGB) = 0; 
# 103
} 
# 105
}; 
# 89 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" {
# 3207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.h"
}
# 3229 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.h"
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline int mulhi(const int a, const int b); 
# 3231
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b); 
# 3233
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b); 
# 3235
__attribute((deprecated("mulhi() is deprecated in favor of __mulhi() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b); 
# 3237
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline long long mul64hi(const long long a, const long long b); 
# 3239
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b); 
# 3241
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b); 
# 3243
__attribute((deprecated("mul64hi() is deprecated in favor of __mul64hi() and may be removed in a future release (Use -Wno-deprecated-declarations to supp" "ress this warning)."))) __attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b); 
# 3245
__attribute((deprecated("float_as_int() is deprecated in favor of __float_as_int() and may be removed in a future release (Use -Wno-deprecated-declaratio" "ns to suppress this warning)."))) __attribute__((unused)) static inline int float_as_int(const float a); 
# 3247
__attribute((deprecated("int_as_float() is deprecated in favor of __int_as_float() and may be removed in a future release (Use -Wno-deprecated-declaratio" "ns to suppress this warning)."))) __attribute__((unused)) static inline float int_as_float(const int a); 
# 3249
__attribute((deprecated("float_as_uint() is deprecated in favor of __float_as_uint() and may be removed in a future release (Use -Wno-deprecated-declarat" "ions to suppress this warning)."))) __attribute__((unused)) static inline unsigned float_as_uint(const float a); 
# 3251
__attribute((deprecated("uint_as_float() is deprecated in favor of __uint_as_float() and may be removed in a future release (Use -Wno-deprecated-declarat" "ions to suppress this warning)."))) __attribute__((unused)) static inline float uint_as_float(const unsigned a); 
# 3253
__attribute((deprecated("saturate() is deprecated in favor of __saturatef() and may be removed in a future release (Use -Wno-deprecated-declarations to s" "uppress this warning)."))) __attribute__((unused)) static inline float saturate(const float a); 
# 3255
__attribute((deprecated("mul24() is deprecated in favor of __mul24() and may be removed in a future release (Use -Wno-deprecated-declarations to suppress" " this warning)."))) __attribute__((unused)) static inline int mul24(const int a, const int b); 
# 3257
__attribute((deprecated("umul24() is deprecated in favor of __umul24() and may be removed in a future release (Use -Wno-deprecated-declarations to suppre" "ss this warning)."))) __attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b); 
# 3259
__attribute((deprecated("float2int() is deprecated in favor of __float2int_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated-d" "eclarations to suppress this warning)."))) __attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3261
__attribute((deprecated("float2uint() is deprecated in favor of __float2uint_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated" "-declarations to suppress this warning)."))) __attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode = cudaRoundZero); 
# 3263
__attribute((deprecated("int2float() is deprecated in favor of __int2float_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated-d" "eclarations to suppress this warning)."))) __attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode = cudaRoundNearest); 
# 3265
__attribute((deprecated("uint2float() is deprecated in favor of __uint2float_ru|_rd|_rn|_rz() and may be removed in a future release (Use -Wno-deprecated" "-declarations to suppress this warning)."))) __attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode = cudaRoundNearest); 
# 90 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(const int a, const int b) 
# 91
{int volatile ___ = 1;(void)a;(void)b;
# 93
::exit(___);}
#if 0
# 91
{ 
# 92
return __mulhi(a, b); 
# 93
} 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const unsigned b) 
# 96
{int volatile ___ = 1;(void)a;(void)b;
# 98
::exit(___);}
#if 0
# 96
{ 
# 97
return __umulhi(a, b); 
# 98
} 
#endif
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const int a, const unsigned b) 
# 101
{int volatile ___ = 1;(void)a;(void)b;
# 103
::exit(___);}
#if 0
# 101
{ 
# 102
return __umulhi(static_cast< unsigned>(a), b); 
# 103
} 
#endif
# 105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(const unsigned a, const int b) 
# 106
{int volatile ___ = 1;(void)a;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
return __umulhi(a, static_cast< unsigned>(b)); 
# 108
} 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(const long long a, const long long b) 
# 111
{int volatile ___ = 1;(void)a;(void)b;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return __mul64hi(a, b); 
# 113
} 
#endif
# 115 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const unsigned long long b) 
# 116
{int volatile ___ = 1;(void)a;(void)b;
# 118
::exit(___);}
#if 0
# 116
{ 
# 117
return __umul64hi(a, b); 
# 118
} 
#endif
# 120 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const long long a, const unsigned long long b) 
# 121
{int volatile ___ = 1;(void)a;(void)b;
# 123
::exit(___);}
#if 0
# 121
{ 
# 122
return __umul64hi(static_cast< unsigned long long>(a), b); 
# 123
} 
#endif
# 125 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(const unsigned long long a, const long long b) 
# 126
{int volatile ___ = 1;(void)a;(void)b;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return __umul64hi(a, static_cast< unsigned long long>(b)); 
# 128
} 
#endif
# 130 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(const float a) 
# 131
{int volatile ___ = 1;(void)a;
# 133
::exit(___);}
#if 0
# 131
{ 
# 132
return __float_as_int(a); 
# 133
} 
#endif
# 135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(const int a) 
# 136
{int volatile ___ = 1;(void)a;
# 138
::exit(___);}
#if 0
# 136
{ 
# 137
return __int_as_float(a); 
# 138
} 
#endif
# 140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(const float a) 
# 141
{int volatile ___ = 1;(void)a;
# 143
::exit(___);}
#if 0
# 141
{ 
# 142
return __float_as_uint(a); 
# 143
} 
#endif
# 145 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(const unsigned a) 
# 146
{int volatile ___ = 1;(void)a;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return __uint_as_float(a); 
# 148
} 
#endif
# 149 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float saturate(const float a) 
# 150
{int volatile ___ = 1;(void)a;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return __saturatef(a); 
# 152
} 
#endif
# 154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int mul24(const int a, const int b) 
# 155
{int volatile ___ = 1;(void)a;(void)b;
# 157
::exit(___);}
#if 0
# 155
{ 
# 156
return __mul24(a, b); 
# 157
} 
#endif
# 159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(const unsigned a, const unsigned b) 
# 160
{int volatile ___ = 1;(void)a;(void)b;
# 162
::exit(___);}
#if 0
# 160
{ 
# 161
return __umul24(a, b); 
# 162
} 
#endif
# 164 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline int float2int(const float a, const cudaRoundMode mode) 
# 165
{int volatile ___ = 1;(void)a;(void)mode;
# 170
::exit(___);}
#if 0
# 165
{ 
# 166
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 170
} 
#endif
# 172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(const float a, const cudaRoundMode mode) 
# 173
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 173
{ 
# 174
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 178
} 
#endif
# 180 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float int2float(const int a, const cudaRoundMode mode) 
# 181
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 181
{ 
# 182
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 186
} 
#endif
# 188 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(const unsigned a, const cudaRoundMode mode) 
# 189
{int volatile ___ = 1;(void)a;(void)mode;
# 194
::exit(___);}
#if 0
# 189
{ 
# 190
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 194
} 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 171 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
extern "C" {
# 180
}
# 189 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 193
{ } 
#endif
# 195 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 197
{ } 
#endif
# 87 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 89 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 89
{ } 
#endif
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 303 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 303
{ } 
#endif
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 306
{ } 
#endif
# 309 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 309
{ } 
#endif
# 312 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 312
{ } 
#endif
# 315 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 315
{ } 
#endif
# 318 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 318
{ } 
#endif
# 321 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 321
{ } 
#endif
# 324 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 324
{ } 
#endif
# 327 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 327
{ } 
#endif
# 330 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 330
{ } 
#endif
# 333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 333
{ } 
#endif
# 336 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 336
{ } 
#endif
# 339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 339
{ } 
#endif
# 342 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 342
{ } 
#endif
# 345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 345
{ } 
#endif
# 348 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 348
{ } 
#endif
# 351 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 351
{ } 
#endif
# 354 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 354
{ } 
#endif
# 357 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 357
{ } 
#endif
# 360 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 360
{ } 
#endif
# 363 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 363
{ } 
#endif
# 366 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 366
{ } 
#endif
# 369 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 369
{ } 
#endif
# 372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 372
{ } 
#endif
# 375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 375
{ } 
#endif
# 378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 378
{ } 
#endif
# 381 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 381
{ } 
#endif
# 384 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 384
{ } 
#endif
# 387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 387
{ } 
#endif
# 390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 390
{ } 
#endif
# 393 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 393
{ } 
#endif
# 396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 396
{ } 
#endif
# 399 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 399
{ } 
#endif
# 402 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 402
{ } 
#endif
# 405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 405
{ } 
#endif
# 408 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 408
{ } 
#endif
# 411 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 414
{ } 
#endif
# 417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 417
{ } 
#endif
# 420 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 420
{ } 
#endif
# 423 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 423
{ } 
#endif
# 426 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 426
{ } 
#endif
# 429 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 429
{ } 
#endif
# 432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 435
{ } 
#endif
# 438 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 439
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 447
compare, unsigned long long 
# 448
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 448
{ } 
#endif
# 451 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 452
compare, unsigned long long 
# 453
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 453
{ } 
#endif
# 456 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 456
{ } 
#endif
# 459 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 459
{ } 
#endif
# 462 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 462
{ } 
#endif
# 465 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 465
{ } 
#endif
# 468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 468
{ } 
#endif
# 471 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 471
{ } 
#endif
# 474 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 474
{ } 
#endif
# 477 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 477
{ } 
#endif
# 480 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 480
{ } 
#endif
# 483 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 483
{ } 
#endif
# 486 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 486
{ } 
#endif
# 489 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 492
{ } 
#endif
# 495 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 495
{ } 
#endif
# 498 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 498
{ } 
#endif
# 501 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 501
{ } 
#endif
# 504 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 507
{ } 
#endif
# 510 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 510
{ } 
#endif
# 513 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 513
{ } 
#endif
# 516 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 516
{ } 
#endif
# 519 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 519
{ } 
#endif
# 522 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 522
{ } 
#endif
# 525 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 525
{ } 
#endif
# 90 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern "C" {
# 1503 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
}
# 1510
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1510
{ } 
#endif
# 1512 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1512
{ } 
#endif
# 1514 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1514
{ } 
#endif
# 1516 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1516
{ } 
#endif
# 1521 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1521
{ } 
#endif
# 1522 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1523 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1523
{ } 
#endif
# 1524 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1527 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1527
{ } 
#endif
# 1528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1529 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1529
{ } 
#endif
# 1531 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1531
{ } 
#endif
# 1532 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1532
{ } 
#endif
# 1533 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 102 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 110
{ } 
#endif
# 119 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 121
{ } 
#endif
# 122 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 123 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 125 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 133 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 162 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 177 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 187 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 87 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 108
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 111
return __nv_associate_access_property_impl(ptr, property); 
# 112
} 
#endif
# 114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 115
src, unsigned 
# 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 121
} 
#endif
# 123 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 124
src, unsigned 
# 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 130
::exit(___);}
#if 0
# 125
{ 
# 126
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 130
} 
#endif
# 132 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 133
src, unsigned 
# 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 139
} 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
}
# 122 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 123
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 124
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 128
::exit(___);}
#if 0
# 124
{ 
# 128
} 
#endif
# 130 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 131
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 132
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 138
::exit(___);}
#if 0
# 132
{ 
# 138
} 
#endif
# 140 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 141
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 142
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 146
::exit(___);}
#if 0
# 142
{ 
# 146
} 
#endif
# 149 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 150
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 151
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 155
::exit(___);}
#if 0
# 151
{ 
# 155
} 
#endif
# 157 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 158
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 159
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 165
::exit(___);}
#if 0
# 159
{ 
# 165
} 
#endif
# 167 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 168
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 169
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 173
::exit(___);}
#if 0
# 169
{ 
# 173
} 
#endif
# 176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 177
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 178
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 182
::exit(___);}
#if 0
# 178
{ 
# 182
} 
#endif
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 186
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 192
::exit(___);}
#if 0
# 186
{ 
# 192
} 
#endif
# 194 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 195
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 196
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 200
::exit(___);}
#if 0
# 196
{ 
# 200
} 
#endif
# 204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 205
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 206
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 210
::exit(___);}
#if 0
# 206
{ 
# 210
} 
#endif
# 212 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 213
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 214
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 220
::exit(___);}
#if 0
# 214
{ 
# 220
} 
#endif
# 223 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 224
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 225
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 229
::exit(___);}
#if 0
# 225
{ 
# 229
} 
#endif
# 232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 233
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 234
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 238
::exit(___);}
#if 0
# 234
{ 
# 238
} 
#endif
# 240 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 241
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 242
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 248
::exit(___);}
#if 0
# 242
{ 
# 248
} 
#endif
# 251 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 252
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 253
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 257
::exit(___);}
#if 0
# 253
{ 
# 257
} 
#endif
# 260 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 266
::exit(___);}
#if 0
# 262
{ 
# 266
} 
#endif
# 268 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 269
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 270
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 277
::exit(___);}
#if 0
# 270
{ 
# 277
} 
#endif
# 279 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 280
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 281
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 285
::exit(___);}
#if 0
# 281
{ 
# 285
} 
#endif
# 288 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 290
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 294
::exit(___);}
#if 0
# 290
{ 
# 294
} 
#endif
# 296 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 297
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 298
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 304
::exit(___);}
#if 0
# 298
{ 
# 304
} 
#endif
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 307
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 308
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 312
::exit(___);}
#if 0
# 308
{ 
# 312
} 
#endif
# 315 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 316
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 317
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 321
::exit(___);}
#if 0
# 317
{ 
# 321
} 
#endif
# 323 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 324
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 325
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 329
::exit(___);}
#if 0
# 325
{ 
# 329
} 
#endif
# 333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 334
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 335
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 339
::exit(___);}
#if 0
# 335
{ 
# 339
} 
#endif
# 341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 342
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 343
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 347
::exit(___);}
#if 0
# 343
{ 
# 347
} 
#endif
# 350 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 351
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 356
::exit(___);}
#if 0
# 352
{ 
# 356
} 
#endif
# 358 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 359
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 360
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 364
::exit(___);}
#if 0
# 360
{ 
# 364
} 
#endif
# 367 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 368
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 369
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 373
::exit(___);}
#if 0
# 369
{ 
# 373
} 
#endif
# 375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 376
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 377
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 381
::exit(___);}
#if 0
# 377
{ 
# 381
} 
#endif
# 384 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 385
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 390
::exit(___);}
#if 0
# 386
{ 
# 390
} 
#endif
# 392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 393
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 394
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 398
::exit(___);}
#if 0
# 394
{ 
# 398
} 
#endif
# 401 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 402
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 407
::exit(___);}
#if 0
# 403
{ 
# 407
} 
#endif
# 409 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 410
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 411
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 415
::exit(___);}
#if 0
# 411
{ 
# 415
} 
#endif
# 419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 420
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 425
::exit(___);}
#if 0
# 421
{ 
# 425
} 
#endif
# 427 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_functions.h"
template< class T> 
# 428
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 429
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 433
::exit(___);}
#if 0
# 429
{ 
# 433
} 
#endif
# 72 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 73
struct __nv_tex_rmet_ret { }; 
# 75
template<> struct __nv_tex_rmet_ret< char>  { typedef char type; }; 
# 76
template<> struct __nv_tex_rmet_ret< signed char>  { typedef signed char type; }; 
# 77
template<> struct __nv_tex_rmet_ret< unsigned char>  { typedef unsigned char type; }; 
# 78
template<> struct __nv_tex_rmet_ret< char1>  { typedef char1 type; }; 
# 79
template<> struct __nv_tex_rmet_ret< uchar1>  { typedef uchar1 type; }; 
# 80
template<> struct __nv_tex_rmet_ret< char2>  { typedef char2 type; }; 
# 81
template<> struct __nv_tex_rmet_ret< uchar2>  { typedef uchar2 type; }; 
# 82
template<> struct __nv_tex_rmet_ret< char4>  { typedef char4 type; }; 
# 83
template<> struct __nv_tex_rmet_ret< uchar4>  { typedef uchar4 type; }; 
# 85
template<> struct __nv_tex_rmet_ret< short>  { typedef short type; }; 
# 86
template<> struct __nv_tex_rmet_ret< unsigned short>  { typedef unsigned short type; }; 
# 87
template<> struct __nv_tex_rmet_ret< short1>  { typedef short1 type; }; 
# 88
template<> struct __nv_tex_rmet_ret< ushort1>  { typedef ushort1 type; }; 
# 89
template<> struct __nv_tex_rmet_ret< short2>  { typedef short2 type; }; 
# 90
template<> struct __nv_tex_rmet_ret< ushort2>  { typedef ushort2 type; }; 
# 91
template<> struct __nv_tex_rmet_ret< short4>  { typedef short4 type; }; 
# 92
template<> struct __nv_tex_rmet_ret< ushort4>  { typedef ushort4 type; }; 
# 94
template<> struct __nv_tex_rmet_ret< int>  { typedef int type; }; 
# 95
template<> struct __nv_tex_rmet_ret< unsigned>  { typedef unsigned type; }; 
# 96
template<> struct __nv_tex_rmet_ret< int1>  { typedef int1 type; }; 
# 97
template<> struct __nv_tex_rmet_ret< uint1>  { typedef uint1 type; }; 
# 98
template<> struct __nv_tex_rmet_ret< int2>  { typedef int2 type; }; 
# 99
template<> struct __nv_tex_rmet_ret< uint2>  { typedef uint2 type; }; 
# 100
template<> struct __nv_tex_rmet_ret< int4>  { typedef int4 type; }; 
# 101
template<> struct __nv_tex_rmet_ret< uint4>  { typedef uint4 type; }; 
# 113 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret< float>  { typedef float type; }; 
# 114
template<> struct __nv_tex_rmet_ret< float1>  { typedef float1 type; }; 
# 115
template<> struct __nv_tex_rmet_ret< float2>  { typedef float2 type; }; 
# 116
template<> struct __nv_tex_rmet_ret< float4>  { typedef float4 type; }; 
# 119
template< class T> struct __nv_tex_rmet_cast { typedef T *type; }; 
# 131 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 132
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeElementType>  t, int x) 
# 133
{int volatile ___ = 1;(void)t;(void)x;
# 139
::exit(___);}
#if 0
# 133
{ 
# 139
} 
#endif
# 141 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 142
struct __nv_tex_rmnf_ret { }; 
# 144
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 145
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 146
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 147
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 148
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 149
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 150
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 151
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 152
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 153
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 154
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 155
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 156
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 157
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 158
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 159
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 160
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 162
template< class T> 
# 163
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat>  t, int x) 
# 164
{int volatile ___ = 1;(void)t;(void)x;
# 171
::exit(___);}
#if 0
# 164
{ 
# 171
} 
#endif
# 174 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 175
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1D(texture< T, 1, cudaReadModeElementType>  t, float x) 
# 176
{int volatile ___ = 1;(void)t;(void)x;
# 182
::exit(___);}
#if 0
# 176
{ 
# 182
} 
#endif
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 185
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1D(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x) 
# 186
{int volatile ___ = 1;(void)t;(void)x;
# 193
::exit(___);}
#if 0
# 186
{ 
# 193
} 
#endif
# 197 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 198
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2D(texture< T, 2, cudaReadModeElementType>  t, float x, float y) 
# 199
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 206
::exit(___);}
#if 0
# 199
{ 
# 206
} 
#endif
# 208 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 209
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2D(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
# 210
{int volatile ___ = 1;(void)t;(void)x;(void)y;
# 217
::exit(___);}
#if 0
# 210
{ 
# 217
} 
#endif
# 221 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 222
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeElementType>  t, float x, int layer) 
# 223
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 229
::exit(___);}
#if 0
# 223
{ 
# 229
} 
#endif
# 231 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 232
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
# 233
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
# 240
::exit(___);}
#if 0
# 233
{ 
# 240
} 
#endif
# 244 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 245
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
# 246
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 252
::exit(___);}
#if 0
# 246
{ 
# 252
} 
#endif
# 254 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 255
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
# 256
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
# 263
::exit(___);}
#if 0
# 256
{ 
# 263
} 
#endif
# 266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 267
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3D(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z) 
# 268
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 274
::exit(___);}
#if 0
# 268
{ 
# 274
} 
#endif
# 276 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 277
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3D(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 285
::exit(___);}
#if 0
# 278
{ 
# 285
} 
#endif
# 288 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 289
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z) 
# 290
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 296
::exit(___);}
#if 0
# 290
{ 
# 296
} 
#endif
# 298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 299
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemap(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
# 307
::exit(___);}
#if 0
# 300
{ 
# 307
} 
#endif
# 310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 311
struct __nv_tex2dgather_ret { }; 
# 312
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 313
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 314
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 315
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 316
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 317
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 318
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 319
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 320
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 321
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 322
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 324
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 325
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 326
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 327
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 328
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 329
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 330
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 331
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 332
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 333
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 335
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 336
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 337
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 338
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 339
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 340
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 341
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 342
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 343
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 344
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 346
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 347
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 348
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 349
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 350
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 352
template< class T> 
# 353
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0) 
# 354
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 361
::exit(___);}
#if 0
# 354
{ 
# 361
} 
#endif
# 364 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> struct __nv_tex2dgather_rmnf_ret { }; 
# 365
template<> struct __nv_tex2dgather_rmnf_ret< char>  { typedef float4 type; }; 
# 366
template<> struct __nv_tex2dgather_rmnf_ret< signed char>  { typedef float4 type; }; 
# 367
template<> struct __nv_tex2dgather_rmnf_ret< unsigned char>  { typedef float4 type; }; 
# 368
template<> struct __nv_tex2dgather_rmnf_ret< char1>  { typedef float4 type; }; 
# 369
template<> struct __nv_tex2dgather_rmnf_ret< uchar1>  { typedef float4 type; }; 
# 370
template<> struct __nv_tex2dgather_rmnf_ret< char2>  { typedef float4 type; }; 
# 371
template<> struct __nv_tex2dgather_rmnf_ret< uchar2>  { typedef float4 type; }; 
# 372
template<> struct __nv_tex2dgather_rmnf_ret< char3>  { typedef float4 type; }; 
# 373
template<> struct __nv_tex2dgather_rmnf_ret< uchar3>  { typedef float4 type; }; 
# 374
template<> struct __nv_tex2dgather_rmnf_ret< char4>  { typedef float4 type; }; 
# 375
template<> struct __nv_tex2dgather_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 376
template<> struct __nv_tex2dgather_rmnf_ret< signed short>  { typedef float4 type; }; 
# 377
template<> struct __nv_tex2dgather_rmnf_ret< unsigned short>  { typedef float4 type; }; 
# 378
template<> struct __nv_tex2dgather_rmnf_ret< short1>  { typedef float4 type; }; 
# 379
template<> struct __nv_tex2dgather_rmnf_ret< ushort1>  { typedef float4 type; }; 
# 380
template<> struct __nv_tex2dgather_rmnf_ret< short2>  { typedef float4 type; }; 
# 381
template<> struct __nv_tex2dgather_rmnf_ret< ushort2>  { typedef float4 type; }; 
# 382
template<> struct __nv_tex2dgather_rmnf_ret< short3>  { typedef float4 type; }; 
# 383
template<> struct __nv_tex2dgather_rmnf_ret< ushort3>  { typedef float4 type; }; 
# 384
template<> struct __nv_tex2dgather_rmnf_ret< short4>  { typedef float4 type; }; 
# 385
template<> struct __nv_tex2dgather_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 387
template< class T> 
# 388
__attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex2dgather_rmnf_ret< T> ::type tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0) 
# 389
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
# 396
::exit(___);}
#if 0
# 389
{ 
# 396
} 
#endif
# 400 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 401
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeElementType>  t, float x, float level) 
# 402
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 408
::exit(___);}
#if 0
# 402
{ 
# 408
} 
#endif
# 410 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 411
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
# 412
{int volatile ___ = 1;(void)t;(void)x;(void)level;
# 419
::exit(___);}
#if 0
# 412
{ 
# 419
} 
#endif
# 422 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 423
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float level) 
# 424
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 430
::exit(___);}
#if 0
# 424
{ 
# 430
} 
#endif
# 432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 433
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
# 434
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
# 441
::exit(___);}
#if 0
# 434
{ 
# 441
} 
#endif
# 444 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 445
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
# 446
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 452
::exit(___);}
#if 0
# 446
{ 
# 452
} 
#endif
# 454 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 455
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
# 456
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
# 463
::exit(___);}
#if 0
# 456
{ 
# 463
} 
#endif
# 466 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 467
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
# 468
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 474
::exit(___);}
#if 0
# 468
{ 
# 474
} 
#endif
# 476 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 477
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
# 478
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
# 485
::exit(___);}
#if 0
# 478
{ 
# 485
} 
#endif
# 488 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 489
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 490
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 496
::exit(___);}
#if 0
# 490
{ 
# 496
} 
#endif
# 498 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 499
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 507
::exit(___);}
#if 0
# 500
{ 
# 507
} 
#endif
# 510 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 511
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
# 512
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 521
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
# 522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
# 529
::exit(___);}
#if 0
# 522
{ 
# 529
} 
#endif
# 533 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 534
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
# 535
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 541
::exit(___);}
#if 0
# 535
{ 
# 541
} 
#endif
# 543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 544
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
# 545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
# 552
::exit(___);}
#if 0
# 545
{ 
# 552
} 
#endif
# 556 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 557
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
# 558
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 564
::exit(___);}
#if 0
# 558
{ 
# 564
} 
#endif
# 566 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 567
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
# 568
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 575
::exit(___);}
#if 0
# 568
{ 
# 575
} 
#endif
# 579 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 580
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 581
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 587
::exit(___);}
#if 0
# 581
{ 
# 587
} 
#endif
# 589 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 590
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapGrad(texture< T, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 598
::exit(___);}
#if 0
# 591
{ 
# 598
} 
#endif
# 602 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 603
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 604
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 610
::exit(___);}
#if 0
# 604
{ 
# 610
} 
#endif
# 612 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 613
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type texCubemapLayeredGrad(texture< T, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 614
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 621
::exit(___);}
#if 0
# 614
{ 
# 621
} 
#endif
# 625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 626
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
# 627
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 627
{ 
# 633
} 
#endif
# 635 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 636
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
# 637
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
# 644
::exit(___);}
#if 0
# 637
{ 
# 644
} 
#endif
# 648 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 649
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 650
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 656
::exit(___);}
#if 0
# 650
{ 
# 656
} 
#endif
# 658 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 659
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
# 660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 667
::exit(___);}
#if 0
# 660
{ 
# 667
} 
#endif
# 670 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 671
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
# 672
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 678
::exit(___);}
#if 0
# 672
{ 
# 678
} 
#endif
# 680 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 681
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
# 682
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 689
::exit(___);}
#if 0
# 682
{ 
# 689
} 
#endif
# 692 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 693
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 700
::exit(___);}
#if 0
# 694
{ 
# 700
} 
#endif
# 702 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 703
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 711
::exit(___);}
#if 0
# 704
{ 
# 711
} 
#endif
# 714 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 715
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmet_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 716
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 722
::exit(___);}
#if 0
# 716
{ 
# 722
} 
#endif
# 724 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template< class T> 
# 725
__attribute((deprecated)) __attribute((always_inline)) __attribute__((unused)) static inline typename __nv_tex_rmnf_ret< T> ::type tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 733
::exit(___);}
#if 0
# 726
{ 
# 733
} 
#endif
# 64 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 65
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 66
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 101
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 107
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 108
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 109
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 113
::exit(___);}
#if 0
# 109
{ 
# 113
} 
#endif
# 115 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 116
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 117
{int volatile ___ = 1;(void)texObject;(void)x;
# 123
::exit(___);}
#if 0
# 117
{ 
# 123
} 
#endif
# 125 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 126
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 127
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 131
::exit(___);}
#if 0
# 127
{ 
# 131
} 
#endif
# 134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 135
tex1D(cudaTextureObject_t texObject, float x) 
# 136
{int volatile ___ = 1;(void)texObject;(void)x;
# 142
::exit(___);}
#if 0
# 136
{ 
# 142
} 
#endif
# 145 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 146
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 147
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 151
::exit(___);}
#if 0
# 147
{ 
# 151
} 
#endif
# 153 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 154
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 155
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 161
::exit(___);}
#if 0
# 155
{ 
# 161
} 
#endif
# 164 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 165
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 166
isResident) 
# 167
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 173
::exit(___);}
#if 0
# 167
{ 
# 173
} 
#endif
# 175 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 177
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 183
::exit(___);}
#if 0
# 177
{ 
# 183
} 
#endif
# 188 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 190
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 194
::exit(___);}
#if 0
# 190
{ 
# 194
} 
#endif
# 196 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 197
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 198
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 204
::exit(___);}
#if 0
# 198
{ 
# 204
} 
#endif
# 207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 209
isResident) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 216
::exit(___);}
#if 0
# 210
{ 
# 216
} 
#endif
# 218 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 219
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 220
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 226
::exit(___);}
#if 0
# 220
{ 
# 226
} 
#endif
# 230 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 231
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 232
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 236
::exit(___);}
#if 0
# 232
{ 
# 236
} 
#endif
# 238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 239
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 240
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 246
::exit(___);}
#if 0
# 240
{ 
# 246
} 
#endif
# 248 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 249
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 250
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 254
::exit(___);}
#if 0
# 250
{ 
# 254
} 
#endif
# 256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 257
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 258
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 264
::exit(___);}
#if 0
# 258
{ 
# 264
} 
#endif
# 267 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 268
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 269
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 275
::exit(___);}
#if 0
# 269
{ 
# 275
} 
#endif
# 277 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 278
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 279
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 285
::exit(___);}
#if 0
# 279
{ 
# 285
} 
#endif
# 289 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 290
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 291
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 295
::exit(___);}
#if 0
# 291
{ 
# 295
} 
#endif
# 298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 299
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 300
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 306
::exit(___);}
#if 0
# 300
{ 
# 306
} 
#endif
# 309 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 310
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 311
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 315
::exit(___);}
#if 0
# 311
{ 
# 315
} 
#endif
# 317 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 318
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 319
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 325
::exit(___);}
#if 0
# 319
{ 
# 325
} 
#endif
# 327 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 328
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 329
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 333
::exit(___);}
#if 0
# 329
{ 
# 333
} 
#endif
# 335 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 336
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 337
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 343
::exit(___);}
#if 0
# 337
{ 
# 343
} 
#endif
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 347
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 348
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 354
::exit(___);}
#if 0
# 348
{ 
# 354
} 
#endif
# 356 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 358
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 364
::exit(___);}
#if 0
# 358
{ 
# 364
} 
#endif
# 368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 369
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 370
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 374
::exit(___);}
#if 0
# 370
{ 
# 374
} 
#endif
# 376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 377
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 378
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 384
::exit(___);}
#if 0
# 378
{ 
# 384
} 
#endif
# 387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 388
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 389
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 393
::exit(___);}
#if 0
# 389
{ 
# 393
} 
#endif
# 395 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 396
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 397
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 403
::exit(___);}
#if 0
# 397
{ 
# 403
} 
#endif
# 407 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 408
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 409
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 415
::exit(___);}
#if 0
# 409
{ 
# 415
} 
#endif
# 417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 418
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 419
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 425
::exit(___);}
#if 0
# 419
{ 
# 425
} 
#endif
# 430 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 431
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 432
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 436
::exit(___);}
#if 0
# 432
{ 
# 436
} 
#endif
# 438 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 439
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 440
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 446
::exit(___);}
#if 0
# 440
{ 
# 446
} 
#endif
# 449 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 450
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 451
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 457
::exit(___);}
#if 0
# 451
{ 
# 457
} 
#endif
# 459 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 460
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 461
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 467
::exit(___);}
#if 0
# 461
{ 
# 467
} 
#endif
# 472 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 473
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 474
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 478
::exit(___);}
#if 0
# 474
{ 
# 478
} 
#endif
# 480 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 481
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 482
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 488
::exit(___);}
#if 0
# 482
{ 
# 488
} 
#endif
# 491 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 497
::exit(___);}
#if 0
# 493
{ 
# 497
} 
#endif
# 499 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 500
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 501
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 507
::exit(___);}
#if 0
# 501
{ 
# 507
} 
#endif
# 510 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 511
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 512
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 518
::exit(___);}
#if 0
# 512
{ 
# 518
} 
#endif
# 520 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 521
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 522
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 528
::exit(___);}
#if 0
# 522
{ 
# 528
} 
#endif
# 531 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 532
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 533
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 537
::exit(___);}
#if 0
# 533
{ 
# 537
} 
#endif
# 539 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 540
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 541
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 547
::exit(___);}
#if 0
# 541
{ 
# 547
} 
#endif
# 550 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 551
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 552
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 556
::exit(___);}
#if 0
# 552
{ 
# 556
} 
#endif
# 558 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 559
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 560
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 566
::exit(___);}
#if 0
# 560
{ 
# 566
} 
#endif
# 568 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 569
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 570
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 574
::exit(___);}
#if 0
# 570
{ 
# 574
} 
#endif
# 576 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 577
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 578
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 584
::exit(___);}
#if 0
# 578
{ 
# 584
} 
#endif
# 586 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 587
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 588
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 588
{ 
# 592
} 
#endif
# 594 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 602
::exit(___);}
#if 0
# 596
{ 
# 602
} 
#endif
# 605 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 606
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 607
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 612
::exit(___);}
#if 0
# 607
{ 
# 612
} 
#endif
# 614 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 615
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 616
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 622
::exit(___);}
#if 0
# 616
{ 
# 622
} 
#endif
# 625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 626
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 627
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 634
::exit(___);}
#if 0
# 627
{ 
# 634
} 
#endif
# 636 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 637
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 638
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 644
::exit(___);}
#if 0
# 638
{ 
# 644
} 
#endif
# 648 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 649
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 650
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 654
::exit(___);}
#if 0
# 650
{ 
# 654
} 
#endif
# 656 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 657
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 658
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 664
::exit(___);}
#if 0
# 658
{ 
# 664
} 
#endif
# 667 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 668
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 669
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 675
::exit(___);}
#if 0
# 669
{ 
# 675
} 
#endif
# 677 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 678
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 679
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 685
::exit(___);}
#if 0
# 679
{ 
# 685
} 
#endif
# 690 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 691
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 692
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 696
::exit(___);}
#if 0
# 692
{ 
# 696
} 
#endif
# 698 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 699
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 700
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 706
::exit(___);}
#if 0
# 700
{ 
# 706
} 
#endif
# 709 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 710
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 711
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 715
::exit(___);}
#if 0
# 711
{ 
# 715
} 
#endif
# 717 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 718
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 719
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 725
::exit(___);}
#if 0
# 719
{ 
# 725
} 
#endif
# 728 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 729
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 730
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 736
::exit(___);}
#if 0
# 730
{ 
# 736
} 
#endif
# 738 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 739
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 740
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 746
::exit(___);}
#if 0
# 740
{ 
# 746
} 
#endif
# 750 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 751
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 752
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 756
::exit(___);}
#if 0
# 752
{ 
# 756
} 
#endif
# 758 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 759
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 760
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 766
::exit(___);}
#if 0
# 760
{ 
# 766
} 
#endif
# 59 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 60
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 78
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 88
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 96
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 99
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 100
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 101
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 105
::exit(___);}
#if 0
# 101
{ 
# 105
} 
#endif
# 107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 108
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 109
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 115
::exit(___);}
#if 0
# 109
{ 
# 115
} 
#endif
# 117 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 118
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 119
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 123
::exit(___);}
#if 0
# 119
{ 
# 123
} 
#endif
# 125 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 126
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 133
::exit(___);}
#if 0
# 127
{ 
# 133
} 
#endif
# 136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 137
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 138
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 142
::exit(___);}
#if 0
# 138
{ 
# 142
} 
#endif
# 144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 146
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 152
::exit(___);}
#if 0
# 146
{ 
# 152
} 
#endif
# 154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 155
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 160
::exit(___);}
#if 0
# 156
{ 
# 160
} 
#endif
# 162 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 164
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 170
::exit(___);}
#if 0
# 164
{ 
# 170
} 
#endif
# 172 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 173
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 178
::exit(___);}
#if 0
# 174
{ 
# 178
} 
#endif
# 180 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 181
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 182
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 188
::exit(___);}
#if 0
# 182
{ 
# 188
} 
#endif
# 190 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 191
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 192
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 196
::exit(___);}
#if 0
# 192
{ 
# 196
} 
#endif
# 198 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 199
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 200
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 206
::exit(___);}
#if 0
# 200
{ 
# 206
} 
#endif
# 208 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 209
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 210
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 214
::exit(___);}
#if 0
# 210
{ 
# 214
} 
#endif
# 216 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 217
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 218
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 224
::exit(___);}
#if 0
# 218
{ 
# 224
} 
#endif
# 226 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 227
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 228
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 232
::exit(___);}
#if 0
# 228
{ 
# 232
} 
#endif
# 234 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 235
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 236
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 240
::exit(___);}
#if 0
# 236
{ 
# 240
} 
#endif
# 242 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 243
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 244
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 248
::exit(___);}
#if 0
# 244
{ 
# 248
} 
#endif
# 250 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 251
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 252
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 256
::exit(___);}
#if 0
# 252
{ 
# 256
} 
#endif
# 258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 259
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 260
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 264
::exit(___);}
#if 0
# 260
{ 
# 264
} 
#endif
# 266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 267
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 268
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 272
::exit(___);}
#if 0
# 268
{ 
# 272
} 
#endif
# 274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 275
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 276
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 280
::exit(___);}
#if 0
# 276
{ 
# 280
} 
#endif
# 3307 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 201 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 202
cudaLaunchKernel(const T *
# 203
func, dim3 
# 204
gridDim, dim3 
# 205
blockDim, void **
# 206
args, size_t 
# 207
sharedMem = 0, cudaStream_t 
# 208
stream = 0) 
# 210
{ 
# 211
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 212
} 
# 263 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 264
cudaLaunchCooperativeKernel(const T *
# 265
func, dim3 
# 266
gridDim, dim3 
# 267
blockDim, void **
# 268
args, size_t 
# 269
sharedMem = 0, cudaStream_t 
# 270
stream = 0) 
# 272
{ 
# 273
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 274
} 
# 307 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 308
event, unsigned 
# 309
flags) 
# 311
{ 
# 312
return ::cudaEventCreateWithFlags(event, flags); 
# 313
} 
# 372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 373
ptr, size_t 
# 374
size, unsigned 
# 375
flags) 
# 377
{ 
# 378
return ::cudaHostAlloc(ptr, size, flags); 
# 379
} 
# 381
template< class T> static inline cudaError_t 
# 382
cudaHostAlloc(T **
# 383
ptr, size_t 
# 384
size, unsigned 
# 385
flags) 
# 387
{ 
# 388
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 389
} 
# 391
template< class T> static inline cudaError_t 
# 392
cudaHostGetDevicePointer(T **
# 393
pDevice, void *
# 394
pHost, unsigned 
# 395
flags) 
# 397
{ 
# 398
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 399
} 
# 501 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 502
cudaMallocManaged(T **
# 503
devPtr, size_t 
# 504
size, unsigned 
# 505
flags = 1) 
# 507
{ 
# 508
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 509
} 
# 591 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 592
cudaStreamAttachMemAsync(cudaStream_t 
# 593
stream, T *
# 594
devPtr, size_t 
# 595
length = 0, unsigned 
# 596
flags = 4) 
# 598
{ 
# 599
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 600
} 
# 602
template< class T> inline cudaError_t 
# 603
cudaMalloc(T **
# 604
devPtr, size_t 
# 605
size) 
# 607
{ 
# 608
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 609
} 
# 611
template< class T> static inline cudaError_t 
# 612
cudaMallocHost(T **
# 613
ptr, size_t 
# 614
size, unsigned 
# 615
flags = 0) 
# 617
{ 
# 618
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 619
} 
# 621
template< class T> static inline cudaError_t 
# 622
cudaMallocPitch(T **
# 623
devPtr, size_t *
# 624
pitch, size_t 
# 625
width, size_t 
# 626
height) 
# 628
{ 
# 629
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 630
} 
# 641 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 642
ptr, size_t 
# 643
size, cudaMemPool_t 
# 644
memPool, cudaStream_t 
# 645
stream) 
# 647
{ 
# 648
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 649
} 
# 651
template< class T> static inline cudaError_t 
# 652
cudaMallocAsync(T **
# 653
ptr, size_t 
# 654
size, cudaMemPool_t 
# 655
memPool, cudaStream_t 
# 656
stream) 
# 658
{ 
# 659
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 660
} 
# 662
template< class T> static inline cudaError_t 
# 663
cudaMallocAsync(T **
# 664
ptr, size_t 
# 665
size, cudaStream_t 
# 666
stream) 
# 668
{ 
# 669
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 670
} 
# 672
template< class T> static inline cudaError_t 
# 673
cudaMallocFromPoolAsync(T **
# 674
ptr, size_t 
# 675
size, cudaMemPool_t 
# 676
memPool, cudaStream_t 
# 677
stream) 
# 679
{ 
# 680
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 681
} 
# 720 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 721
cudaMemcpyToSymbol(const T &
# 722
symbol, const void *
# 723
src, size_t 
# 724
count, size_t 
# 725
offset = 0, cudaMemcpyKind 
# 726
kind = cudaMemcpyHostToDevice) 
# 728
{ 
# 729
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 730
} 
# 774 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 775
cudaMemcpyToSymbolAsync(const T &
# 776
symbol, const void *
# 777
src, size_t 
# 778
count, size_t 
# 779
offset = 0, cudaMemcpyKind 
# 780
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 781
stream = 0) 
# 783
{ 
# 784
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 785
} 
# 822 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 823
cudaMemcpyFromSymbol(void *
# 824
dst, const T &
# 825
symbol, size_t 
# 826
count, size_t 
# 827
offset = 0, cudaMemcpyKind 
# 828
kind = cudaMemcpyDeviceToHost) 
# 830
{ 
# 831
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 832
} 
# 876 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 877
cudaMemcpyFromSymbolAsync(void *
# 878
dst, const T &
# 879
symbol, size_t 
# 880
count, size_t 
# 881
offset = 0, cudaMemcpyKind 
# 882
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 883
stream = 0) 
# 885
{ 
# 886
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 887
} 
# 945 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 946
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 947
pGraphNode, cudaGraph_t 
# 948
graph, const cudaGraphNode_t *
# 949
pDependencies, size_t 
# 950
numDependencies, const T &
# 951
symbol, const void *
# 952
src, size_t 
# 953
count, size_t 
# 954
offset, cudaMemcpyKind 
# 955
kind) 
# 956
{ 
# 957
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 958
} 
# 1016 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1017
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1018
pGraphNode, cudaGraph_t 
# 1019
graph, const cudaGraphNode_t *
# 1020
pDependencies, size_t 
# 1021
numDependencies, void *
# 1022
dst, const T &
# 1023
symbol, size_t 
# 1024
count, size_t 
# 1025
offset, cudaMemcpyKind 
# 1026
kind) 
# 1027
{ 
# 1028
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1029
} 
# 1067 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1068
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1069
node, const T &
# 1070
symbol, const void *
# 1071
src, size_t 
# 1072
count, size_t 
# 1073
offset, cudaMemcpyKind 
# 1074
kind) 
# 1075
{ 
# 1076
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1077
} 
# 1115 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1116
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1117
node, void *
# 1118
dst, const T &
# 1119
symbol, size_t 
# 1120
count, size_t 
# 1121
offset, cudaMemcpyKind 
# 1122
kind) 
# 1123
{ 
# 1124
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1125
} 
# 1173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1174
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1175
hGraphExec, cudaGraphNode_t 
# 1176
node, const T &
# 1177
symbol, const void *
# 1178
src, size_t 
# 1179
count, size_t 
# 1180
offset, cudaMemcpyKind 
# 1181
kind) 
# 1182
{ 
# 1183
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1184
} 
# 1232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1233
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1234
hGraphExec, cudaGraphNode_t 
# 1235
node, void *
# 1236
dst, const T &
# 1237
symbol, size_t 
# 1238
count, size_t 
# 1239
offset, cudaMemcpyKind 
# 1240
kind) 
# 1241
{ 
# 1242
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1243
} 
# 1271 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1272
cudaUserObjectCreate(cudaUserObject_t *
# 1273
object_out, T *
# 1274
objectToWrap, unsigned 
# 1275
initialRefcount, unsigned 
# 1276
flags) 
# 1277
{ 
# 1278
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1281
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1284
} 
# 1286
template< class T> static inline cudaError_t 
# 1287
cudaUserObjectCreate(cudaUserObject_t *
# 1288
object_out, T *
# 1289
objectToWrap, unsigned 
# 1290
initialRefcount, cudaUserObjectFlags 
# 1291
flags) 
# 1292
{ 
# 1293
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1294
} 
# 1321 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1322
cudaGetSymbolAddress(void **
# 1323
devPtr, const T &
# 1324
symbol) 
# 1326
{ 
# 1327
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1328
} 
# 1353 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1354
cudaGetSymbolSize(size_t *
# 1355
size, const T &
# 1356
symbol) 
# 1358
{ 
# 1359
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1360
} 
# 1397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1398
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(size_t *
# 1399
offset, const texture< T, dim, readMode>  &
# 1400
tex, const void *
# 1401
devPtr, const cudaChannelFormatDesc &
# 1402
desc, size_t 
# 1403
size = ((2147483647) * 2U) + 1U) 
# 1405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
{ 
# 1406
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 1407
} 
# 1443 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1444
__attribute((deprecated)) static inline cudaError_t cudaBindTexture(size_t *
# 1445
offset, const texture< T, dim, readMode>  &
# 1446
tex, const void *
# 1447
devPtr, size_t 
# 1448
size = ((2147483647) * 2U) + 1U) 
# 1450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
{ 
# 1451
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 1452
} 
# 1500 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1501
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(size_t *
# 1502
offset, const texture< T, dim, readMode>  &
# 1503
tex, const void *
# 1504
devPtr, const cudaChannelFormatDesc &
# 1505
desc, size_t 
# 1506
width, size_t 
# 1507
height, size_t 
# 1508
pitch) 
# 1510
{ 
# 1511
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 1512
} 
# 1559 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1560
__attribute((deprecated)) static inline cudaError_t cudaBindTexture2D(size_t *
# 1561
offset, const texture< T, dim, readMode>  &
# 1562
tex, const void *
# 1563
devPtr, size_t 
# 1564
width, size_t 
# 1565
height, size_t 
# 1566
pitch) 
# 1568
{ 
# 1569
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1570
} 
# 1602 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1603
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1604
tex, cudaArray_const_t 
# 1605
array, const cudaChannelFormatDesc &
# 1606
desc) 
# 1608
{ 
# 1609
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1610
} 
# 1641 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1642
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1643
tex, cudaArray_const_t 
# 1644
array) 
# 1646
{ 
# 1647
cudaChannelFormatDesc desc; 
# 1648
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1650
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1651
} 
# 1683 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1684
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1685
tex, cudaMipmappedArray_const_t 
# 1686
mipmappedArray, const cudaChannelFormatDesc &
# 1687
desc) 
# 1689
{ 
# 1690
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1691
} 
# 1722 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1723
__attribute((deprecated)) static inline cudaError_t cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1724
tex, cudaMipmappedArray_const_t 
# 1725
mipmappedArray) 
# 1727
{ 
# 1728
cudaChannelFormatDesc desc; 
# 1729
cudaArray_t levelArray; 
# 1730
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1732
if (err != (cudaSuccess)) { 
# 1733
return err; 
# 1734
}  
# 1735
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1737
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1738
} 
# 1765 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1766
__attribute((deprecated)) static inline cudaError_t cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1767
tex) 
# 1769
{ 
# 1770
return ::cudaUnbindTexture(&tex); 
# 1771
} 
# 1801 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> 
# 1802
__attribute((deprecated)) static inline cudaError_t cudaGetTextureAlignmentOffset(size_t *
# 1803
offset, const texture< T, dim, readMode>  &
# 1804
tex) 
# 1806
{ 
# 1807
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1808
} 
# 1853 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1854
cudaFuncSetCacheConfig(T *
# 1855
func, cudaFuncCache 
# 1856
cacheConfig) 
# 1858
{ 
# 1859
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1860
} 
# 1862
template< class T> static inline cudaError_t 
# 1863
cudaFuncSetSharedMemConfig(T *
# 1864
func, cudaSharedMemConfig 
# 1865
config) 
# 1867
{ 
# 1868
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1869
} 
# 1901 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1902
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1903
numBlocks, T 
# 1904
func, int 
# 1905
blockSize, size_t 
# 1906
dynamicSMemSize) 
# 1907
{ 
# 1908
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1909
} 
# 1953 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1954
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1955
numBlocks, T 
# 1956
func, int 
# 1957
blockSize, size_t 
# 1958
dynamicSMemSize, unsigned 
# 1959
flags) 
# 1960
{ 
# 1961
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1962
} 
# 1967
class __cudaOccupancyB2DHelper { 
# 1968
size_t n; 
# 1970
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1971
size_t operator()(int) 
# 1972
{ 
# 1973
return n; 
# 1974
} 
# 1975
}; 
# 2023 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2024
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 2025
minGridSize, int *
# 2026
blockSize, T 
# 2027
func, UnaryFunction 
# 2028
blockSizeToDynamicSMemSize, int 
# 2029
blockSizeLimit = 0, unsigned 
# 2030
flags = 0) 
# 2031
{ 
# 2032
cudaError_t status; 
# 2035
int device; 
# 2036
cudaFuncAttributes attr; 
# 2039
int maxThreadsPerMultiProcessor; 
# 2040
int warpSize; 
# 2041
int devMaxThreadsPerBlock; 
# 2042
int multiProcessorCount; 
# 2043
int funcMaxThreadsPerBlock; 
# 2044
int occupancyLimit; 
# 2045
int granularity; 
# 2048
int maxBlockSize = 0; 
# 2049
int numBlocks = 0; 
# 2050
int maxOccupancy = 0; 
# 2053
int blockSizeToTryAligned; 
# 2054
int blockSizeToTry; 
# 2055
int blockSizeLimitAligned; 
# 2056
int occupancyInBlocks; 
# 2057
int occupancyInThreads; 
# 2058
size_t dynamicSMemSize; 
# 2064
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 2065
return cudaErrorInvalidValue; 
# 2066
}  
# 2072
status = ::cudaGetDevice(&device); 
# 2073
if (status != (cudaSuccess)) { 
# 2074
return status; 
# 2075
}  
# 2077
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 2081
if (status != (cudaSuccess)) { 
# 2082
return status; 
# 2083
}  
# 2085
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 2089
if (status != (cudaSuccess)) { 
# 2090
return status; 
# 2091
}  
# 2093
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 2097
if (status != (cudaSuccess)) { 
# 2098
return status; 
# 2099
}  
# 2101
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 2105
if (status != (cudaSuccess)) { 
# 2106
return status; 
# 2107
}  
# 2109
status = cudaFuncGetAttributes(&attr, func); 
# 2110
if (status != (cudaSuccess)) { 
# 2111
return status; 
# 2112
}  
# 2114
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 2120
occupancyLimit = maxThreadsPerMultiProcessor; 
# 2121
granularity = warpSize; 
# 2123
if (blockSizeLimit == 0) { 
# 2124
blockSizeLimit = devMaxThreadsPerBlock; 
# 2125
}  
# 2127
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 2128
blockSizeLimit = devMaxThreadsPerBlock; 
# 2129
}  
# 2131
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 2132
blockSizeLimit = funcMaxThreadsPerBlock; 
# 2133
}  
# 2135
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 2137
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 2141
if (blockSizeLimit < blockSizeToTryAligned) { 
# 2142
blockSizeToTry = blockSizeLimit; 
# 2143
} else { 
# 2144
blockSizeToTry = blockSizeToTryAligned; 
# 2145
}  
# 2147
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 2149
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 2156
if (status != (cudaSuccess)) { 
# 2157
return status; 
# 2158
}  
# 2160
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 2162
if (occupancyInThreads > maxOccupancy) { 
# 2163
maxBlockSize = blockSizeToTry; 
# 2164
numBlocks = occupancyInBlocks; 
# 2165
maxOccupancy = occupancyInThreads; 
# 2166
}  
# 2170
if (occupancyLimit == maxOccupancy) { 
# 2171
break; 
# 2172
}  
# 2173
}  
# 2181
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 2182
(*blockSize) = maxBlockSize; 
# 2184
return status; 
# 2185
} 
# 2219 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 2220
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 2221
minGridSize, int *
# 2222
blockSize, T 
# 2223
func, UnaryFunction 
# 2224
blockSizeToDynamicSMemSize, int 
# 2225
blockSizeLimit = 0) 
# 2226
{ 
# 2227
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 2228
} 
# 2265 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2266
cudaOccupancyMaxPotentialBlockSize(int *
# 2267
minGridSize, int *
# 2268
blockSize, T 
# 2269
func, size_t 
# 2270
dynamicSMemSize = 0, int 
# 2271
blockSizeLimit = 0) 
# 2272
{ 
# 2273
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 2274
} 
# 2303 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2304
cudaOccupancyAvailableDynamicSMemPerBlock(size_t *
# 2305
dynamicSmemSize, T 
# 2306
func, int 
# 2307
numBlocks, int 
# 2308
blockSize) 
# 2309
{ 
# 2310
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2311
} 
# 2362 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2363
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2364
minGridSize, int *
# 2365
blockSize, T 
# 2366
func, size_t 
# 2367
dynamicSMemSize = 0, int 
# 2368
blockSizeLimit = 0, unsigned 
# 2369
flags = 0) 
# 2370
{ 
# 2371
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2372
} 
# 2405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2406
cudaFuncGetAttributes(cudaFuncAttributes *
# 2407
attr, T *
# 2408
entry) 
# 2410
{ 
# 2411
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2412
} 
# 2450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2451
cudaFuncSetAttribute(T *
# 2452
entry, cudaFuncAttribute 
# 2453
attr, int 
# 2454
value) 
# 2456
{ 
# 2457
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2458
} 
# 2482 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim> 
# 2483
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2484
surf, cudaArray_const_t 
# 2485
array, const cudaChannelFormatDesc &
# 2486
desc) 
# 2488
{ 
# 2489
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 2490
} 
# 2513 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T, int dim> 
# 2514
__attribute((deprecated)) static inline cudaError_t cudaBindSurfaceToArray(const surface< T, dim>  &
# 2515
surf, cudaArray_const_t 
# 2516
array) 
# 2518
{ 
# 2519
cudaChannelFormatDesc desc; 
# 2520
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 2522
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 2523
} 
# 2534 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 21 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 99
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 143 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 144
extern FILE *stdout; 
# 145
extern FILE *stderr; 
# 152
extern int remove(const char * __filename) noexcept(true); 
# 154
extern int rename(const char * __old, const char * __new) noexcept(true); 
# 158
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) noexcept(true); 
# 170 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) noexcept(true); 
# 178
extern int fclose(FILE * __stream); 
# 188 "/usr/include/stdio.h" 3
extern FILE *tmpfile()
# 189
 __attribute((__malloc__)); 
# 200 "/usr/include/stdio.h" 3
extern FILE *tmpfile64()
# 201
 __attribute((__malloc__)); 
# 205
extern char *tmpnam(char [20]) noexcept(true); 
# 210
extern char *tmpnam_r(char  __s[20]) noexcept(true); 
# 222 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) noexcept(true)
# 223
 __attribute((__malloc__)); 
# 230
extern int fflush(FILE * __stream); 
# 239 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 249 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 258 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 260
 __attribute((__malloc__)); 
# 265
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 283 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 285
 __attribute((__malloc__)); 
# 286
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 293
extern FILE *fdopen(int __fd, const char * __modes) noexcept(true)
# 294
 __attribute((__malloc__)); 
# 300
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) noexcept(true)
# 303
 __attribute((__malloc__)); 
# 308
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) noexcept(true)
# 309
 __attribute((__malloc__)); 
# 314
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) noexcept(true)
# 315
 __attribute((__malloc__)); 
# 328 "/usr/include/stdio.h" 3
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) noexcept(true); 
# 332
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) noexcept(true); 
# 338
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) noexcept(true); 
# 342
extern void setlinebuf(FILE * __stream) noexcept(true); 
# 350
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 356
extern int printf(const char *__restrict__ __format, ...); 
# 358
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true); 
# 365
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 371
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 373
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true); 
# 378
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) noexcept(true)
# 380
 __attribute((__format__(__printf__, 3, 4))); 
# 382
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true)
# 384
 __attribute((__format__(__printf__, 3, 0))); 
# 390
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) noexcept(true)
# 392
 __attribute((__format__(__printf__, 2, 0))); 
# 393
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 395
 __attribute((__format__(__printf__, 2, 3))); 
# 396
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 398
 __attribute((__format__(__printf__, 2, 3))); 
# 403
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 405
 __attribute((__format__(__printf__, 2, 0))); 
# 406
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 407
 __attribute((__format__(__printf__, 2, 3))); 
# 415
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 421
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 423
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 434 "/usr/include/stdio.h" 3
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 437
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 439
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 459 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 461
 __attribute((__format__(__scanf__, 2, 0))); 
# 467
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 468
 __attribute((__format__(__scanf__, 1, 0))); 
# 471
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 473
 __attribute((__format__(__scanf__, 2, 0))); 
# 479
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 483
 __attribute((__format__(__scanf__, 2, 0))); 
# 484
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 486
 __attribute((__format__(__scanf__, 1, 0))); 
# 487
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 491
 __attribute((__format__(__scanf__, 2, 0))); 
# 513 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 514
extern int getc(FILE * __stream); 
# 520
extern int getchar(); 
# 527
extern int getc_unlocked(FILE * __stream); 
# 528
extern int getchar_unlocked(); 
# 538 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 549 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 550
extern int putc(int __c, FILE * __stream); 
# 556
extern int putchar(int __c); 
# 565 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 573
extern int putc_unlocked(int __c, FILE * __stream); 
# 574
extern int putchar_unlocked(int __c); 
# 581
extern int getw(FILE * __stream); 
# 584
extern int putw(int __w, FILE * __stream); 
# 592
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 615 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream); 
# 632 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 635
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 645
extern __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 655
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 661
extern int puts(const char * __s); 
# 668
extern int ungetc(int __c, FILE * __stream); 
# 675
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 681
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 691 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 702 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 704
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 713
extern int fseek(FILE * __stream, long __off, int __whence); 
# 718
extern long ftell(FILE * __stream); 
# 723
extern void rewind(FILE * __stream); 
# 736 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 741
extern __off_t ftello(FILE * __stream); 
# 760 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 765
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 779 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 780
extern __off64_t ftello64(FILE * __stream); 
# 781
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 782
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 786
extern void clearerr(FILE * __stream) noexcept(true); 
# 788
extern int feof(FILE * __stream) noexcept(true); 
# 790
extern int ferror(FILE * __stream) noexcept(true); 
# 794
extern void clearerr_unlocked(FILE * __stream) noexcept(true); 
# 795
extern int feof_unlocked(FILE * __stream) noexcept(true); 
# 796
extern int ferror_unlocked(FILE * __stream) noexcept(true); 
# 804
extern void perror(const char * __s); 
# 809
extern int fileno(FILE * __stream) noexcept(true); 
# 814
extern int fileno_unlocked(FILE * __stream) noexcept(true); 
# 823 "/usr/include/stdio.h" 3
extern int pclose(FILE * __stream); 
# 829
extern FILE *popen(const char * __command, const char * __modes)
# 830
 __attribute((__malloc__)); 
# 837
extern char *ctermid(char * __s) noexcept(true); 
# 844
extern char *cuserid(char * __s); 
# 850
struct obstack; 
# 853
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) noexcept(true)
# 855
 __attribute((__format__(__printf__, 2, 3))); 
# 856
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) noexcept(true)
# 859
 __attribute((__format__(__printf__, 2, 0))); 
# 867
extern void flockfile(FILE * __stream) noexcept(true); 
# 871
extern int ftrylockfile(FILE * __stream) noexcept(true); 
# 874
extern void funlockfile(FILE * __stream) noexcept(true); 
# 885 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 886
extern int __overflow(FILE *, int); 
# 902 "/usr/include/stdio.h" 3
}
# 35 "wmma_example_tcsp.cu"
void cudaErrCheck_(cudaError_t stat, const char *file, int line) { 
# 36
if (stat != (cudaSuccess)) { 
# 37
fprintf(stderr, "CUDA Error: %s %s %d\n", cudaGetErrorString(stat), file, line); 
# 39 "wmma_example_tcsp.cu"
printf("CUDA Error: %s %s %d\n", cudaGetErrorString(stat), file, line); 
# 40
}  
# 41
} 
# 134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half; 
# 147 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half2; 
# 163 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __double2half(const double a); 
# 178 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half(const float a); 
# 193 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rn(const float a); 
# 208 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rz(const float a); 
# 224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rd(const float a); 
# 240 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_ru(const float a); 
# 255 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __half2float(const __half a); 
# 273 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float2half2_rn(const float a); 
# 294 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __floats2half2_rn(const float a, const float b); 
# 310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __low2float(const __half2 a); 
# 326 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __high2float(const __half2 a); 
# 348 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float22half2_rn(const float2 a); 
# 364 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float2 __half22float2(const __half2 a); 
# 380 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rn(const __half h); 
# 396 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline int __half2int_rz(const __half h); 
# 412 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rd(const __half h); 
# 428 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_ru(const __half h); 
# 445 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __int2half_rn(const int i); 
# 461 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rz(const int i); 
# 477 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rd(const int i); 
# 493 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_ru(const int i); 
# 511 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rn(const __half h); 
# 527 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline short __half2short_rz(const __half h); 
# 543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rd(const __half h); 
# 559 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_ru(const __half h); 
# 577 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __short2half_rn(const short i); 
# 593 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rz(const short i); 
# 609 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rd(const short i); 
# 625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_ru(const short i); 
# 642 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h); 
# 658 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned __half2uint_rz(const __half h); 
# 674 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h); 
# 690 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h); 
# 707 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __uint2half_rn(const unsigned i); 
# 723 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i); 
# 739 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i); 
# 755 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i); 
# 773 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h); 
# 790 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned short __half2ushort_rz(const __half h); 
# 802 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h); 
# 814 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h); 
# 832 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ushort2half_rn(const unsigned short i); 
# 849 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i); 
# 865 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i); 
# 881 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i); 
# 899 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h); 
# 916 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned long long __half2ull_rz(const __half h); 
# 932 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h); 
# 948 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h); 
# 966 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ull2half_rn(const unsigned long long i); 
# 983 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i); 
# 999 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i); 
# 1015 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i); 
# 1033 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h); 
# 1049 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline long long __half2ll_rz(const __half h); 
# 1065 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h); 
# 1081 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h); 
# 1099 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ll2half_rn(const long long i); 
# 1111 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rz(const long long i); 
# 1127 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i); 
# 1143 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i); 
# 1160 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half htrunc(const __half h); 
# 1175 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hceil(const __half h); 
# 1190 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hfloor(const __half h); 
# 1207 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrint(const __half h); 
# 1224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h); 
# 1240 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h); 
# 1256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h); 
# 1274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h); 
# 1291 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __half2half2(const __half a); 
# 1307 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a); 
# 1327 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b); 
# 1347 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b); 
# 1362 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __high2half(const __half2 a); 
# 1377 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __low2half(const __half2 a); 
# 1394 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __hisinf(const __half a); 
# 1412 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b); 
# 1428 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a); 
# 1444 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a); 
# 1461 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half_as_short(const __half h); 
# 1477 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h); 
# 1493 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short_as_half(const short i); 
# 1509 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i); 
# 1528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width = 32); 
# 1529
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width = 32); 
# 1530
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width = 32); 
# 1531
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width = 32); 
# 1532
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width = 32); 
# 1533
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width = 32); 
# 1534
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width = 32); 
# 1535
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width = 32); 
# 1561 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1586 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1611 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1635 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1660 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1684 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1709 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1733 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1748 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr); 
# 1755
__attribute__((unused)) static inline __half __ldg(const __half *const ptr); 
# 1762
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr); 
# 1769
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr); 
# 1776
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr); 
# 1783
__attribute__((unused)) static inline __half __ldca(const __half *const ptr); 
# 1790
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr); 
# 1797
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr); 
# 1804
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr); 
# 1811
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr); 
# 1818
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr); 
# 1825
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr); 
# 1832
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value); 
# 1839
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value); 
# 1846
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value); 
# 1853
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value); 
# 1860
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value); 
# 1867
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value); 
# 1874
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value); 
# 1881
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value); 
# 1902 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b); 
# 1920 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b); 
# 1938 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b); 
# 1956 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b); 
# 1974 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b); 
# 1992 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b); 
# 2010 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b); 
# 2028 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b); 
# 2046 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b); 
# 2064 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b); 
# 2082 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b); 
# 2100 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b); 
# 2116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a); 
# 2136 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b); 
# 2156 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b); 
# 2176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b); 
# 2196 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b); 
# 2217 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b); 
# 2238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b); 
# 2258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b); 
# 2275 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a); 
# 2294 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b); 
# 2313 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b); 
# 2333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b); 
# 2356 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c); 
# 2378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c); 
# 2397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a); 
# 2412 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __habs(const __half a); 
# 2432 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b); 
# 2452 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b); 
# 2468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b); 
# 2488 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b); 
# 2508 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b); 
# 2524 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b); 
# 2544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b); 
# 2562 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b); 
# 2581 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b); 
# 2600 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b); 
# 2623 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c); 
# 2645 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c); 
# 2663 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hneg(const __half a); 
# 2685 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b); 
# 2707 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b); 
# 2729 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b); 
# 2751 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b); 
# 2773 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b); 
# 2795 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b); 
# 2817 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b); 
# 2839 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b); 
# 2861 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b); 
# 2884 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b); 
# 2906 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b); 
# 2929 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b); 
# 2946 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b); 
# 2963 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b); 
# 2980 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b); 
# 2997 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b); 
# 3014 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b); 
# 3031 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b); 
# 3049 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b); 
# 3067 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b); 
# 3085 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b); 
# 3103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b); 
# 3121 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b); 
# 3139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b); 
# 3154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hisnan(const __half a); 
# 3174 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b); 
# 3193 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b); 
# 3211 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b); 
# 3229 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b); 
# 3251 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c); 
# 3272 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b); 
# 3293 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b); 
# 3313 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b); 
# 3333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b); 
# 3355 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c); 
# 3375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c); 
# 3390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsqrt(const __half a); 
# 3407 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrsqrt(const __half a); 
# 3422 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrcp(const __half a); 
# 3438 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog(const __half a); 
# 3454 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog2(const __half a); 
# 3470 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog10(const __half a); 
# 3487 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp(const __half a); 
# 3504 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp2(const __half a); 
# 3521 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp10(const __half a); 
# 3536 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hcos(const __half a); 
# 3551 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsin(const __half a); 
# 3567 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a); 
# 3584 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a); 
# 3600 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a); 
# 3617 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log(const __half2 a); 
# 3634 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a); 
# 3651 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a); 
# 3668 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a); 
# 3685 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a); 
# 3702 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a); 
# 3718 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a); 
# 3733 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a); 
# 3757 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val); 
# 3779 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val); 
# 67 "/usr/include/c++/7/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
namespace rel_ops { 
# 85 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/7/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 130
}
# 132
}
# 39 "/usr/include/c++/7/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return __ils.begin(); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return __ils.end(); } 
# 101
}
# 103
#pragma GCC visibility pop
# 78 "/usr/include/c++/7/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp> struct tuple_size; 
# 108 "/usr/include/c++/7/utility" 3
template< class _Tp, class 
# 109
_Up = typename remove_cv< _Tp> ::type, class 
# 110
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 111
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 114
template< class _Tp> 
# 115
struct tuple_size< const __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 116
}; 
# 118
template< class _Tp> 
# 119
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 120
}; 
# 122
template< class _Tp> 
# 123
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 124
}; 
# 128
template< size_t __i, class _Tp> struct tuple_element; 
# 132
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 135
template< size_t __i, class _Tp> 
# 136
struct tuple_element< __i, const _Tp>  { 
# 138
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 139
}; 
# 141
template< size_t __i, class _Tp> 
# 142
struct tuple_element< __i, volatile _Tp>  { 
# 144
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 145
}; 
# 147
template< size_t __i, class _Tp> 
# 148
struct tuple_element< __i, const volatile _Tp>  { 
# 150
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 151
}; 
# 156
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 163
template< class _T1, class _T2> 
# 164
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 165
}; 
# 168
template< class _Tp1, class _Tp2> 
# 169
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 170
}; 
# 173
template< class _Tp1, class _Tp2> 
# 174
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 175
typedef _Tp1 type; }; 
# 178
template< class _Tp1, class _Tp2> 
# 179
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 180
typedef _Tp2 type; }; 
# 182
template< size_t _Int> struct __pair_get; 
# 186
template<> struct __pair_get< 0UL>  { 
# 188
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 190
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 191
{ return __pair.first; } 
# 193
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 195
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 196
{ return std::forward< _Tp1> ((__pair.first)); } 
# 198
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 200
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 201
{ return __pair.first; } 
# 202
}; 
# 205
template<> struct __pair_get< 1UL>  { 
# 207
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 209
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 210
{ return __pair.second; } 
# 212
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 214
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 215
{ return std::forward< _Tp2> ((__pair.second)); } 
# 217
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 219
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 220
{ return __pair.second; } 
# 221
}; 
# 223
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 225
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 226
{ return __pair_get< _Int> ::__get(__in); } 
# 228
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 230
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 231
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 233
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 235
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 236
{ return __pair_get< _Int> ::__const_get(__in); } 
# 242
template< class _Tp, class _Up> constexpr _Tp &
# 244
get(pair< _Tp, _Up>  &__p) noexcept 
# 245
{ return __p.first; } 
# 247
template< class _Tp, class _Up> constexpr const _Tp &
# 249
get(const pair< _Tp, _Up>  &__p) noexcept 
# 250
{ return __p.first; } 
# 252
template< class _Tp, class _Up> constexpr _Tp &&
# 254
get(pair< _Tp, _Up>  &&__p) noexcept 
# 255
{ return std::move((__p.first)); } 
# 257
template< class _Tp, class _Up> constexpr _Tp &
# 259
get(pair< _Up, _Tp>  &__p) noexcept 
# 260
{ return __p.second; } 
# 262
template< class _Tp, class _Up> constexpr const _Tp &
# 264
get(const pair< _Up, _Tp>  &__p) noexcept 
# 265
{ return __p.second; } 
# 267
template< class _Tp, class _Up> constexpr _Tp &&
# 269
get(pair< _Up, _Tp>  &&__p) noexcept 
# 270
{ return std::move((__p.second)); } 
# 275
template< class _Tp, class _Up = _Tp> inline _Tp 
# 277
exchange(_Tp &__obj, _Up &&__new_val) 
# 278
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 283
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 286
template< class _Itup1, class _Itup2> struct _Itup_cat; 
# 288
template< size_t ..._Ind1, size_t ..._Ind2> 
# 289
struct _Itup_cat< _Index_tuple< _Ind1...> , _Index_tuple< _Ind2...> >  { 
# 291
using __type = _Index_tuple< _Ind1..., (_Ind2 + sizeof...(_Ind1))...> ; 
# 292
}; 
# 295
template< size_t _Num> 
# 296
struct _Build_index_tuple : public _Itup_cat< typename _Build_index_tuple< _Num / (2)> ::__type, typename _Build_index_tuple< _Num - (_Num / (2))> ::__type>  { 
# 299
}; 
# 302
template<> struct _Build_index_tuple< 1UL>  { 
# 304
typedef _Index_tuple< 0UL>  __type; 
# 305
}; 
# 308
template<> struct _Build_index_tuple< 0UL>  { 
# 310
typedef _Index_tuple< >  __type; 
# 311
}; 
# 318
template< class _Tp, _Tp ..._Idx> 
# 319
struct integer_sequence { 
# 321
typedef _Tp value_type; 
# 322
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 323
}; 
# 325
template< class _Tp, _Tp _Num, class 
# 326
_ISeq = typename _Build_index_tuple< _Num> ::__type> struct _Make_integer_sequence; 
# 329
template< class _Tp, _Tp _Num, size_t ..._Idx> 
# 330
struct _Make_integer_sequence< _Tp, _Num, _Index_tuple< _Idx...> >  { 
# 332
static_assert((_Num >= 0), "Cannot make integer sequence of negative length");
# 335
typedef integer_sequence< _Tp, (static_cast< _Tp>(_Idx))...>  __type; 
# 336
}; 
# 339
template< class _Tp, _Tp _Num> using make_integer_sequence = typename _Make_integer_sequence< _Tp, _Num> ::__type; 
# 344
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 348
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 352
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 358
struct in_place_t { 
# 359
explicit in_place_t() = default;
# 360
}; 
# 362
constexpr inline in_place_t in_place{}; 
# 364
template< class _Tp> struct in_place_type_t { 
# 366
explicit in_place_type_t() = default;
# 367
}; 
# 369
template< class _Tp> constexpr in_place_type_t< _Tp>  
# 370
in_place_type{}; 
# 372
template< size_t _Idx> struct in_place_index_t { 
# 374
explicit in_place_index_t() = default;
# 375
}; 
# 377
template< size_t _Idx> constexpr in_place_index_t< _Idx>  
# 378
in_place_index{}; 
# 380
template< class > 
# 381
struct __is_in_place_type_impl : public false_type { 
# 382
}; 
# 384
template< class _Tp> 
# 385
struct __is_in_place_type_impl< in_place_type_t< _Tp> >  : public true_type { 
# 386
}; 
# 388
template< class _Tp> 
# 389
struct __is_in_place_type : public __is_in_place_type_impl< _Tp>  { 
# 391
}; 
# 394
template< class _Tp> constexpr add_const_t< _Tp>  &
# 395
as_const(_Tp &__t) noexcept { return __t; } 
# 397
template < typename _Tp >
    void as_const ( const _Tp && ) = delete;
# 403
}
# 153 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef 
# 151
struct __attribute((aligned(2))) { 
# 152
unsigned short x; 
# 153
} __half_raw; 
# 158
typedef 
# 155
struct __attribute((aligned(4))) { 
# 156
unsigned short x; 
# 157
unsigned short y; 
# 158
} __half2_raw; 
# 166
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 179 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(2))) __half { 
# 181
protected: unsigned short __x; 
# 185
public: __half() = default;
# 191
__half(const __half_raw &hr) : __x(hr.x) { } 
# 192
__half &operator=(const __half_raw &hr) { (__x) = (hr.x); return *this; } 
# 193
volatile __half &operator=(const __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 194
volatile __half &operator=(const volatile __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 195
operator __half_raw() const { __half_raw ret; (ret.x) = (__x); return ret; } 
# 196
operator __half_raw() const volatile { __half_raw ret; (ret.x) = (__x); return ret; } 
# 201
__half(const float f) { (__x) = (__float2half(f).__x); } 
# 202
__half(const double f) { (__x) = (__double2half(f).__x); } 
# 204
operator float() const { return __half2float(*this); } 
# 205
__half &operator=(const float f) { (__x) = (__float2half(f).__x); return *this; } 
# 208
__half &operator=(const double f) { (__x) = (__double2half(f).__x); return *this; } 
# 214
__half(const short val) { (__x) = (__short2half_rn(val).__x); } 
# 215
__half(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); } 
# 216
__half(const int val) { (__x) = (__int2half_rn(val).__x); } 
# 217
__half(const unsigned val) { (__x) = (__uint2half_rn(val).__x); } 
# 218
__half(const long long val) { (__x) = (__ll2half_rn(val).__x); } 
# 219
__half(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); } 
# 222
operator short() const { return __half2short_rz(*this); } 
# 223
__half &operator=(const short val) { (__x) = (__short2half_rn(val).__x); return *this; } 
# 225
operator unsigned short() const { return __half2ushort_rz(*this); } 
# 226
__half &operator=(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); return *this; } 
# 228
operator int() const { return __half2int_rz(*this); } 
# 229
__half &operator=(const int val) { (__x) = (__int2half_rn(val).__x); return *this; } 
# 231
operator unsigned() const { return __half2uint_rz(*this); } 
# 232
__half &operator=(const unsigned val) { (__x) = (__uint2half_rn(val).__x); return *this; } 
# 234
operator long long() const { return __half2ll_rz(*this); } 
# 235
__half &operator=(const long long val) { (__x) = (__ll2half_rn(val).__x); return *this; } 
# 237
operator unsigned long long() const { return __half2ull_rz(*this); } 
# 238
__half &operator=(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); return *this; } 
# 241
operator bool() const { return ((__x) & 32767U) != 0U; } 
# 244
}; 
# 253 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 253
{ return __hadd(lh, rh); } 
#endif
# 254 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 254
{ return __hsub(lh, rh); } 
#endif
# 255 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator*(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 255
{ return __hmul(lh, rh); } 
#endif
# 256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator/(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 256
{ return __hdiv(lh, rh); } 
#endif
# 258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator+=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 258
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 259 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator-=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 259
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 260 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator*=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 260
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 261 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator/=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 261
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 264 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator++(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 264
{ __half_raw one; (one.x) = (15360U); (h += one); return h; } 
#endif
# 265 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator--(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 265
{ __half_raw one; (one.x) = (15360U); (h -= one); return h; } 
#endif
# 266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator++(__half &h, const int ignored) 
# 267
{int volatile ___ = 1;(void)h;(void)ignored;
# 276
::exit(___);}
#if 0
# 267
{ 
# 269
static_cast< void>(ignored); 
# 271
const __half ret = h; 
# 272
__half_raw one; 
# 273
(one.x) = (15360U); 
# 274
(h += one); 
# 275
return ret; 
# 276
} 
#endif
# 277 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator--(__half &h, const int ignored) 
# 278
{int volatile ___ = 1;(void)h;(void)ignored;
# 287
::exit(___);}
#if 0
# 278
{ 
# 280
static_cast< void>(ignored); 
# 282
const __half ret = h; 
# 283
__half_raw one; 
# 284
(one.x) = (15360U); 
# 285
(h -= one); 
# 286
return ret; 
# 287
} 
#endif
# 290 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 290
{ return h; } 
#endif
# 291 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 291
{ return __hneg(h); } 
#endif
# 294 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 294
{ return __heq(lh, rh); } 
#endif
# 295 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 295
{ return __hneu(lh, rh); } 
#endif
# 296 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 296
{ return __hgt(lh, rh); } 
#endif
# 297 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 297
{ return __hlt(lh, rh); } 
#endif
# 298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 298
{ return __hge(lh, rh); } 
#endif
# 299 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 299
{ return __hle(lh, rh); } 
#endif
# 305 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(4))) __half2 { 
# 306
__half x; 
# 307
__half y; 
# 312
__half2() = default;
# 313
__half2(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 314
__half2 &operator=(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 318
__half2(const __half &a, const __half &b) : x(a), y(b) { } 
# 319
__half2(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 320
__half2 &operator=(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 323
__half2(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 324
__half2 &operator=(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 325
operator __half2_raw() const { __half2_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 326
}; 
# 334
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 334
{ return __hadd2(lh, rh); } 
#endif
# 335 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 335
{ return __hsub2(lh, rh); } 
#endif
# 336 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator*(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 336
{ return __hmul2(lh, rh); } 
#endif
# 337 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator/(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 337
{ return __h2div(lh, rh); } 
#endif
# 339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator+=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 339
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 340 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator-=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 340
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator*=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 341
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 342 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator/=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 342
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 344 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator++(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 344
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hadd2(h, one))); return h; } 
#endif
# 345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator--(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 345
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hsub2(h, one))); return h; } 
#endif
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator++(__half2 &h, const int ignored) 
# 347
{int volatile ___ = 1;(void)h;(void)ignored;
# 357
::exit(___);}
#if 0
# 347
{ 
# 349
static_cast< void>(ignored); 
# 351
const __half2 ret = h; 
# 352
__half2_raw one; 
# 353
(one.x) = (15360U); 
# 354
(one.y) = (15360U); 
# 355
(h = (__hadd2(h, one))); 
# 356
return ret; 
# 357
} 
#endif
# 358 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator--(__half2 &h, const int ignored) 
# 359
{int volatile ___ = 1;(void)h;(void)ignored;
# 369
::exit(___);}
#if 0
# 359
{ 
# 361
static_cast< void>(ignored); 
# 363
const __half2 ret = h; 
# 364
__half2_raw one; 
# 365
(one.x) = (15360U); 
# 366
(one.y) = (15360U); 
# 367
(h = (__hsub2(h, one))); 
# 368
return ret; 
# 369
} 
#endif
# 371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 371
{ return h; } 
#endif
# 372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 372
{ return __hneg2(h); } 
#endif
# 374 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 374
{ return __hbeq2(lh, rh); } 
#endif
# 375 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 375
{ return __hbneu2(lh, rh); } 
#endif
# 376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 376
{ return __hbgt2(lh, rh); } 
#endif
# 377 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 377
{ return __hblt2(lh, rh); } 
#endif
# 378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 378
{ return __hbge2(lh, rh); } 
#endif
# 379 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 379
{ return __hble2(lh, rh); } 
#endif
# 392 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
#pragma GCC diagnostic pop
# 400
static inline unsigned short __internal_float2half(const float f, unsigned &sign, unsigned &remainder) 
# 401
{ 
# 402
unsigned x; 
# 403
unsigned u; 
# 404
unsigned result; 
# 406
(void)memcpy(&x, &f, sizeof f); 
# 410
u = (x & 2147483647U); 
# 411
sign = ((x >> 16U) & 32768U); 
# 413
if (u >= 2139095040U) { 
# 414
remainder = 0U; 
# 415
result = ((u == 2139095040U) ? sign | 31744U : 32767U); 
# 416
} else { if (u > 1199566847U) { 
# 417
remainder = 2147483648U; 
# 418
result = (sign | 31743U); 
# 419
} else { if (u >= 947912704U) { 
# 420
remainder = (u << 19U); 
# 421
u -= 939524096U; 
# 422
result = (sign | (u >> 13U)); 
# 423
} else { if (u < 855638017U) { 
# 424
remainder = u; 
# 425
result = sign; 
# 426
} else { 
# 427
const unsigned exponent = u >> 23U; 
# 428
const unsigned shift = 126U - exponent; 
# 429
unsigned mantissa = u & 8388607U; 
# 430
mantissa |= 8388608U; 
# 431
remainder = (mantissa << (32U - shift)); 
# 432
result = (sign | (mantissa >> shift)); 
# 433
result &= 65535U; 
# 434
}  }  }  }  
# 435
return static_cast< unsigned short>(result); 
# 436
} 
# 439
static inline __half __double2half(const double a) 
# 440
{ 
# 446
__half result; 
# 451
unsigned long long absa; 
# 452
unsigned long long ua; 
# 454
(void)memcpy(&ua, &a, sizeof a); 
# 458
absa = (ua & 9223372036854775807ULL); 
# 459
if ((absa >= 4679240012837945344ULL) || (absa <= 4494592428115755008ULL)) 
# 460
{ 
# 463
result = __float2half(static_cast< float>(a)); 
# 464
} else 
# 466
{ 
# 477 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
unsigned long long shifterBits; 
# 478
if (absa >= 4544132024016830464ULL) 
# 479
{ 
# 481
shifterBits = ((ua & 9218868437227405312ULL) + 189151184349560832ULL); 
# 482
} else 
# 484
{ 
# 486
shifterBits = 4733283208366391296ULL; 
# 487
}  
# 489
shifterBits |= 2251799813685248ULL; 
# 490
double shifter; 
# 492
(void)memcpy(&shifter, &shifterBits, sizeof shifterBits); 
# 496
double aShiftRound = a + shifter; 
# 500
unsigned long long aShiftRoundBits; 
# 502
(void)memcpy(&aShiftRoundBits, &aShiftRound, sizeof aShiftRound); 
# 508
aShiftRoundBits &= 9223372036854775807ULL; 
# 511
(void)memcpy(&aShiftRound, &aShiftRoundBits, sizeof aShiftRound); 
# 516
result = __float2half(static_cast< float>(aShiftRound - shifter)); 
# 517
}  
# 519
return result; 
# 521
} 
# 523
static inline __half __float2half(const float a) 
# 524
{ 
# 525
__half val; 
# 529
__half_raw r; 
# 530
unsigned sign = 0U; 
# 531
unsigned remainder = 0U; 
# 532
(r.x) = __internal_float2half(a, sign, remainder); 
# 533
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 534
(r.x)++; 
# 535
}  
# 536
(val = r); 
# 538
return val; 
# 539
} 
# 540
static inline __half __float2half_rn(const float a) 
# 541
{ 
# 542
__half val; 
# 546
__half_raw r; 
# 547
unsigned sign = 0U; 
# 548
unsigned remainder = 0U; 
# 549
(r.x) = __internal_float2half(a, sign, remainder); 
# 550
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 551
(r.x)++; 
# 552
}  
# 553
(val = r); 
# 555
return val; 
# 556
} 
# 557
static inline __half __float2half_rz(const float a) 
# 558
{ 
# 559
__half val; 
# 563
__half_raw r; 
# 564
unsigned sign = 0U; 
# 565
unsigned remainder = 0U; 
# 566
(r.x) = __internal_float2half(a, sign, remainder); 
# 567
(val = r); 
# 569
return val; 
# 570
} 
# 571
static inline __half __float2half_rd(const float a) 
# 572
{ 
# 573
__half val; 
# 577
__half_raw r; 
# 578
unsigned sign = 0U; 
# 579
unsigned remainder = 0U; 
# 580
(r.x) = __internal_float2half(a, sign, remainder); 
# 581
if ((remainder != 0U) && (sign != 0U)) { 
# 582
(r.x)++; 
# 583
}  
# 584
(val = r); 
# 586
return val; 
# 587
} 
# 588
static inline __half __float2half_ru(const float a) 
# 589
{ 
# 590
__half val; 
# 594
__half_raw r; 
# 595
unsigned sign = 0U; 
# 596
unsigned remainder = 0U; 
# 597
(r.x) = __internal_float2half(a, sign, remainder); 
# 598
if ((remainder != 0U) && (sign == 0U)) { 
# 599
(r.x)++; 
# 600
}  
# 601
(val = r); 
# 603
return val; 
# 604
} 
# 605
static inline __half2 __float2half2_rn(const float a) 
# 606
{ 
# 607
__half2 val; 
# 613
(val = __half2(__float2half_rn(a), __float2half_rn(a))); 
# 615
return val; 
# 616
} 
# 617
static inline __half2 __floats2half2_rn(const float a, const float b) 
# 618
{ 
# 619
__half2 val; 
# 631 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(b))); 
# 633
return val; 
# 634
} 
# 637
static inline float __internal_half2float(const unsigned short h) 
# 638
{ 
# 639
unsigned sign = ((static_cast< unsigned>(h)) >> 15U) & 1U; 
# 640
unsigned exponent = ((static_cast< unsigned>(h)) >> 10U) & 31U; 
# 641
unsigned mantissa = ((static_cast< unsigned>(h)) & 1023U) << 13U; 
# 642
float f; 
# 643
if (exponent == 31U) { 
# 645
sign = ((mantissa != 0U) ? sign >> 1U : sign); 
# 646
mantissa = ((mantissa != 0U) ? 8388607U : 0U); 
# 647
exponent = 255U; 
# 648
} else { if (exponent == 0U) { 
# 649
if (mantissa != 0U) { 
# 650
unsigned msb; 
# 651
exponent = 113U; 
# 652
do { 
# 653
msb = (mantissa & 4194304U); 
# 654
mantissa <<= 1U; 
# 655
--exponent; 
# 656
} while (msb == 0U); 
# 657
mantissa &= 8388607U; 
# 658
}  
# 659
} else { 
# 660
exponent += 112U; 
# 661
}  }  
# 662
const unsigned u = ((sign << 31U) | (exponent << 23U)) | mantissa; 
# 664
(void)memcpy(&f, &u, sizeof u); 
# 668
return f; 
# 669
} 
# 672
static inline float __half2float(const __half a) 
# 673
{ 
# 674
float val; 
# 678
val = __internal_half2float(((__half_raw)a).x); 
# 680
return val; 
# 681
} 
# 682
static inline float __low2float(const __half2 a) 
# 683
{ 
# 684
float val; 
# 690
val = __internal_half2float(((__half2_raw)a).x); 
# 692
return val; 
# 693
} 
# 694
static inline float __high2float(const __half2 a) 
# 695
{ 
# 696
float val; 
# 702
val = __internal_half2float(((__half2_raw)a).y); 
# 704
return val; 
# 705
} 
# 711
static inline __half2 make_half2(const __half x, const __half y) 
# 712
{ 
# 713
__half2 t; (t.x) = x; (t.y) = y; return t; 
# 714
} 
# 719
static inline __half2 __float22half2_rn(const float2 a) 
# 720
{ 
# 721
const __half2 val = __floats2half2_rn(a.x, a.y); 
# 722
return val; 
# 723
} 
# 724
static inline float2 __half22float2(const __half2 a) 
# 725
{ 
# 726
float hi_float; 
# 727
float lo_float; 
# 737 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
lo_float = __internal_half2float(((__half2_raw)a).x); 
# 738
hi_float = __internal_half2float(((__half2_raw)a).y); 
# 740
return make_float2(lo_float, hi_float); 
# 741
} 
# 742
__attribute__((unused)) static inline int __half2int_rn(const __half h) 
# 743
{int volatile ___ = 1;(void)h;
# 747
::exit(___);}
#if 0
# 743
{ 
# 744
int i; 
# 745
__asm__("cvt.rni.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 746
return i; 
# 747
} 
#endif
# 748 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline int __half2int_rz(const __half h) 
# 749
{ 
# 750
int i; 
# 754
const float f = __half2float(h); 
# 755
i = (static_cast< int>(f)); 
# 756
const int max_val = ((int)2147483647U); 
# 757
const int min_val = ((int)2147483648U); 
# 758
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 760
if (bits > ((unsigned short)63488U)) { 
# 762
i = 0; 
# 763
} else { if (f > (static_cast< float>(max_val))) { 
# 765
i = max_val; 
# 766
} else { if (f < (static_cast< float>(min_val))) { 
# 768
i = min_val; 
# 769
} else { 
# 771
}  }  }  
# 773
return i; 
# 774
} 
# 775
__attribute__((unused)) static inline int __half2int_rd(const __half h) 
# 776
{int volatile ___ = 1;(void)h;
# 780
::exit(___);}
#if 0
# 776
{ 
# 777
int i; 
# 778
__asm__("cvt.rmi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 779
return i; 
# 780
} 
#endif
# 781 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_ru(const __half h) 
# 782
{int volatile ___ = 1;(void)h;
# 786
::exit(___);}
#if 0
# 782
{ 
# 783
int i; 
# 784
__asm__("cvt.rpi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 785
return i; 
# 786
} 
#endif
# 787 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __int2half_rn(const int i) 
# 788
{ 
# 789
__half h; 
# 797
const float f = static_cast< float>(i); 
# 798
h = __float2half_rn(f); 
# 800
return h; 
# 801
} 
# 802
__attribute__((unused)) static inline __half __int2half_rz(const int i) 
# 803
{int volatile ___ = 1;(void)i;
# 807
::exit(___);}
#if 0
# 803
{ 
# 804
__half h; 
# 805
__asm__("cvt.rz.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 806
return h; 
# 807
} 
#endif
# 808 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_rd(const int i) 
# 809
{int volatile ___ = 1;(void)i;
# 813
::exit(___);}
#if 0
# 809
{ 
# 810
__half h; 
# 811
__asm__("cvt.rm.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 812
return h; 
# 813
} 
#endif
# 814 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_ru(const int i) 
# 815
{int volatile ___ = 1;(void)i;
# 819
::exit(___);}
#if 0
# 815
{ 
# 816
__half h; 
# 817
__asm__("cvt.rp.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 818
return h; 
# 819
} 
#endif
# 821 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rn(const __half h) 
# 822
{int volatile ___ = 1;(void)h;
# 826
::exit(___);}
#if 0
# 822
{ 
# 823
short i; 
# 824
__asm__("cvt.rni.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 825
return i; 
# 826
} 
#endif
# 827 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline short __half2short_rz(const __half h) 
# 828
{ 
# 829
short i; 
# 833
const float f = __half2float(h); 
# 834
i = (static_cast< short>(f)); 
# 835
const short max_val = ((short)32767U); 
# 836
const short min_val = ((short)32768U); 
# 837
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 839
if (bits > ((unsigned short)63488U)) { 
# 841
i = (0); 
# 842
} else { if (f > (static_cast< float>(max_val))) { 
# 844
i = max_val; 
# 845
} else { if (f < (static_cast< float>(min_val))) { 
# 847
i = min_val; 
# 848
} else { 
# 850
}  }  }  
# 852
return i; 
# 853
} 
# 854
__attribute__((unused)) static inline short __half2short_rd(const __half h) 
# 855
{int volatile ___ = 1;(void)h;
# 859
::exit(___);}
#if 0
# 855
{ 
# 856
short i; 
# 857
__asm__("cvt.rmi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 858
return i; 
# 859
} 
#endif
# 860 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_ru(const __half h) 
# 861
{int volatile ___ = 1;(void)h;
# 865
::exit(___);}
#if 0
# 861
{ 
# 862
short i; 
# 863
__asm__("cvt.rpi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 864
return i; 
# 865
} 
#endif
# 866 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __short2half_rn(const short i) 
# 867
{ 
# 868
__half h; 
# 872
const float f = static_cast< float>(i); 
# 873
h = __float2half_rn(f); 
# 875
return h; 
# 876
} 
# 877
__attribute__((unused)) static inline __half __short2half_rz(const short i) 
# 878
{int volatile ___ = 1;(void)i;
# 882
::exit(___);}
#if 0
# 878
{ 
# 879
__half h; 
# 880
__asm__("cvt.rz.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 881
return h; 
# 882
} 
#endif
# 883 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_rd(const short i) 
# 884
{int volatile ___ = 1;(void)i;
# 888
::exit(___);}
#if 0
# 884
{ 
# 885
__half h; 
# 886
__asm__("cvt.rm.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 887
return h; 
# 888
} 
#endif
# 889 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_ru(const short i) 
# 890
{int volatile ___ = 1;(void)i;
# 894
::exit(___);}
#if 0
# 890
{ 
# 891
__half h; 
# 892
__asm__("cvt.rp.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 893
return h; 
# 894
} 
#endif
# 896 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h) 
# 897
{int volatile ___ = 1;(void)h;
# 901
::exit(___);}
#if 0
# 897
{ 
# 898
unsigned i; 
# 899
__asm__("cvt.rni.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 900
return i; 
# 901
} 
#endif
# 902 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline unsigned __half2uint_rz(const __half h) 
# 903
{ 
# 904
unsigned i; 
# 908
const float f = __half2float(h); 
# 909
i = (static_cast< unsigned>(f)); 
# 910
const unsigned max_val = 4294967295U; 
# 911
const unsigned min_val = 0U; 
# 912
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 914
if (bits > ((unsigned short)63488U)) { 
# 916
i = 0U; 
# 917
} else { if (f > (static_cast< float>(max_val))) { 
# 919
i = max_val; 
# 920
} else { if (f < (static_cast< float>(min_val))) { 
# 922
i = min_val; 
# 923
} else { 
# 925
}  }  }  
# 927
return i; 
# 928
} 
# 929
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h) 
# 930
{int volatile ___ = 1;(void)h;
# 934
::exit(___);}
#if 0
# 930
{ 
# 931
unsigned i; 
# 932
__asm__("cvt.rmi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 933
return i; 
# 934
} 
#endif
# 935 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h) 
# 936
{int volatile ___ = 1;(void)h;
# 940
::exit(___);}
#if 0
# 936
{ 
# 937
unsigned i; 
# 938
__asm__("cvt.rpi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 939
return i; 
# 940
} 
#endif
# 941 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __uint2half_rn(const unsigned i) 
# 942
{ 
# 943
__half h; 
# 951
const float f = static_cast< float>(i); 
# 952
h = __float2half_rn(f); 
# 954
return h; 
# 955
} 
# 956
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i) 
# 957
{int volatile ___ = 1;(void)i;
# 961
::exit(___);}
#if 0
# 957
{ 
# 958
__half h; 
# 959
__asm__("cvt.rz.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 960
return h; 
# 961
} 
#endif
# 962 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i) 
# 963
{int volatile ___ = 1;(void)i;
# 967
::exit(___);}
#if 0
# 963
{ 
# 964
__half h; 
# 965
__asm__("cvt.rm.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 966
return h; 
# 967
} 
#endif
# 968 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i) 
# 969
{int volatile ___ = 1;(void)i;
# 973
::exit(___);}
#if 0
# 969
{ 
# 970
__half h; 
# 971
__asm__("cvt.rp.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 972
return h; 
# 973
} 
#endif
# 975 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h) 
# 976
{int volatile ___ = 1;(void)h;
# 980
::exit(___);}
#if 0
# 976
{ 
# 977
unsigned short i; 
# 978
__asm__("cvt.rni.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 979
return i; 
# 980
} 
#endif
# 981 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline unsigned short __half2ushort_rz(const __half h) 
# 982
{ 
# 983
unsigned short i; 
# 987
const float f = __half2float(h); 
# 988
i = (static_cast< unsigned short>(f)); 
# 989
const unsigned short max_val = (65535U); 
# 990
const unsigned short min_val = (0U); 
# 991
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 993
if (bits > ((unsigned short)63488U)) { 
# 995
i = (0U); 
# 996
} else { if (f > (static_cast< float>(max_val))) { 
# 998
i = max_val; 
# 999
} else { if (f < (static_cast< float>(min_val))) { 
# 1001
i = min_val; 
# 1002
} else { 
# 1004
}  }  }  
# 1006
return i; 
# 1007
} 
# 1008
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h) 
# 1009
{int volatile ___ = 1;(void)h;
# 1013
::exit(___);}
#if 0
# 1009
{ 
# 1010
unsigned short i; 
# 1011
__asm__("cvt.rmi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1012
return i; 
# 1013
} 
#endif
# 1014 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h) 
# 1015
{int volatile ___ = 1;(void)h;
# 1019
::exit(___);}
#if 0
# 1015
{ 
# 1016
unsigned short i; 
# 1017
__asm__("cvt.rpi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1018
return i; 
# 1019
} 
#endif
# 1020 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ushort2half_rn(const unsigned short i) 
# 1021
{ 
# 1022
__half h; 
# 1026
const float f = static_cast< float>(i); 
# 1027
h = __float2half_rn(f); 
# 1029
return h; 
# 1030
} 
# 1031
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i) 
# 1032
{int volatile ___ = 1;(void)i;
# 1036
::exit(___);}
#if 0
# 1032
{ 
# 1033
__half h; 
# 1034
__asm__("cvt.rz.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1035
return h; 
# 1036
} 
#endif
# 1037 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i) 
# 1038
{int volatile ___ = 1;(void)i;
# 1042
::exit(___);}
#if 0
# 1038
{ 
# 1039
__half h; 
# 1040
__asm__("cvt.rm.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1041
return h; 
# 1042
} 
#endif
# 1043 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i) 
# 1044
{int volatile ___ = 1;(void)i;
# 1048
::exit(___);}
#if 0
# 1044
{ 
# 1045
__half h; 
# 1046
__asm__("cvt.rp.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1047
return h; 
# 1048
} 
#endif
# 1050 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h) 
# 1051
{int volatile ___ = 1;(void)h;
# 1055
::exit(___);}
#if 0
# 1051
{ 
# 1052
unsigned long long i; 
# 1053
__asm__("cvt.rni.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1054
return i; 
# 1055
} 
#endif
# 1056 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline unsigned long long __half2ull_rz(const __half h) 
# 1057
{ 
# 1058
unsigned long long i; 
# 1062
const float f = __half2float(h); 
# 1063
i = (static_cast< unsigned long long>(f)); 
# 1064
const unsigned long long max_val = 18446744073709551615ULL; 
# 1065
const unsigned long long min_val = 0ULL; 
# 1066
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 1068
if (bits > ((unsigned short)63488U)) { 
# 1070
i = 9223372036854775808ULL; 
# 1071
} else { if (f > (static_cast< float>(max_val))) { 
# 1073
i = max_val; 
# 1074
} else { if (f < (static_cast< float>(min_val))) { 
# 1076
i = min_val; 
# 1077
} else { 
# 1079
}  }  }  
# 1081
return i; 
# 1082
} 
# 1083
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h) 
# 1084
{int volatile ___ = 1;(void)h;
# 1088
::exit(___);}
#if 0
# 1084
{ 
# 1085
unsigned long long i; 
# 1086
__asm__("cvt.rmi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1087
return i; 
# 1088
} 
#endif
# 1089 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h) 
# 1090
{int volatile ___ = 1;(void)h;
# 1094
::exit(___);}
#if 0
# 1090
{ 
# 1091
unsigned long long i; 
# 1092
__asm__("cvt.rpi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1093
return i; 
# 1094
} 
#endif
# 1095 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ull2half_rn(const unsigned long long i) 
# 1096
{ 
# 1097
__half h; 
# 1105
const float f = static_cast< float>(i); 
# 1106
h = __float2half_rn(f); 
# 1108
return h; 
# 1109
} 
# 1110
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i) 
# 1111
{int volatile ___ = 1;(void)i;
# 1115
::exit(___);}
#if 0
# 1111
{ 
# 1112
__half h; 
# 1113
__asm__("cvt.rz.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1114
return h; 
# 1115
} 
#endif
# 1116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i) 
# 1117
{int volatile ___ = 1;(void)i;
# 1121
::exit(___);}
#if 0
# 1117
{ 
# 1118
__half h; 
# 1119
__asm__("cvt.rm.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1120
return h; 
# 1121
} 
#endif
# 1122 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i) 
# 1123
{int volatile ___ = 1;(void)i;
# 1127
::exit(___);}
#if 0
# 1123
{ 
# 1124
__half h; 
# 1125
__asm__("cvt.rp.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1126
return h; 
# 1127
} 
#endif
# 1129 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h) 
# 1130
{int volatile ___ = 1;(void)h;
# 1134
::exit(___);}
#if 0
# 1130
{ 
# 1131
long long i; 
# 1132
__asm__("cvt.rni.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1133
return i; 
# 1134
} 
#endif
# 1135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline long long __half2ll_rz(const __half h) 
# 1136
{ 
# 1137
long long i; 
# 1141
const float f = __half2float(h); 
# 1142
i = (static_cast< long long>(f)); 
# 1143
const long long max_val = ((long long)9223372036854775807ULL); 
# 1144
const long long min_val = ((long long)9223372036854775808ULL); 
# 1145
const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); 
# 1147
if (bits > ((unsigned short)63488U)) { 
# 1149
i = min_val; 
# 1150
} else { if (f > (static_cast< float>(max_val))) { 
# 1152
i = max_val; 
# 1153
} else { if (f < (static_cast< float>(min_val))) { 
# 1155
i = min_val; 
# 1156
} else { 
# 1158
}  }  }  
# 1160
return i; 
# 1161
} 
# 1162
__attribute__((unused)) static inline long long __half2ll_rd(const __half h) 
# 1163
{int volatile ___ = 1;(void)h;
# 1167
::exit(___);}
#if 0
# 1163
{ 
# 1164
long long i; 
# 1165
__asm__("cvt.rmi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1166
return i; 
# 1167
} 
#endif
# 1168 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h) 
# 1169
{int volatile ___ = 1;(void)h;
# 1173
::exit(___);}
#if 0
# 1169
{ 
# 1170
long long i; 
# 1171
__asm__("cvt.rpi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1172
return i; 
# 1173
} 
#endif
# 1174 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ll2half_rn(const long long i) 
# 1175
{ 
# 1176
__half h; 
# 1184
const float f = static_cast< float>(i); 
# 1185
h = __float2half_rn(f); 
# 1187
return h; 
# 1188
} 
# 1189
__attribute__((unused)) static inline __half __ll2half_rz(const long long i) 
# 1190
{int volatile ___ = 1;(void)i;
# 1194
::exit(___);}
#if 0
# 1190
{ 
# 1191
__half h; 
# 1192
__asm__("cvt.rz.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1193
return h; 
# 1194
} 
#endif
# 1195 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i) 
# 1196
{int volatile ___ = 1;(void)i;
# 1200
::exit(___);}
#if 0
# 1196
{ 
# 1197
__half h; 
# 1198
__asm__("cvt.rm.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1199
return h; 
# 1200
} 
#endif
# 1201 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i) 
# 1202
{int volatile ___ = 1;(void)i;
# 1206
::exit(___);}
#if 0
# 1202
{ 
# 1203
__half h; 
# 1204
__asm__("cvt.rp.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1205
return h; 
# 1206
} 
#endif
# 1208 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half htrunc(const __half h) 
# 1209
{int volatile ___ = 1;(void)h;
# 1213
::exit(___);}
#if 0
# 1209
{ 
# 1210
__half r; 
# 1211
__asm__("cvt.rzi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1212
return r; 
# 1213
} 
#endif
# 1214 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hceil(const __half h) 
# 1215
{int volatile ___ = 1;(void)h;
# 1219
::exit(___);}
#if 0
# 1215
{ 
# 1216
__half r; 
# 1217
__asm__("cvt.rpi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1218
return r; 
# 1219
} 
#endif
# 1220 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hfloor(const __half h) 
# 1221
{int volatile ___ = 1;(void)h;
# 1225
::exit(___);}
#if 0
# 1221
{ 
# 1222
__half r; 
# 1223
__asm__("cvt.rmi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1224
return r; 
# 1225
} 
#endif
# 1226 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrint(const __half h) 
# 1227
{int volatile ___ = 1;(void)h;
# 1231
::exit(___);}
#if 0
# 1227
{ 
# 1228
__half r; 
# 1229
__asm__("cvt.rni.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1230
return r; 
# 1231
} 
#endif
# 1233 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h) 
# 1234
{int volatile ___ = 1;(void)h;
# 1242
::exit(___);}
#if 0
# 1234
{ 
# 1235
__half2 val; 
# 1236
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rzi.f16.f16 low, low;\n  cvt.rzi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1241
return val; 
# 1242
} 
#endif
# 1243 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h) 
# 1244
{int volatile ___ = 1;(void)h;
# 1252
::exit(___);}
#if 0
# 1244
{ 
# 1245
__half2 val; 
# 1246
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rpi.f16.f16 low, low;\n  cvt.rpi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1251
return val; 
# 1252
} 
#endif
# 1253 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h) 
# 1254
{int volatile ___ = 1;(void)h;
# 1262
::exit(___);}
#if 0
# 1254
{ 
# 1255
__half2 val; 
# 1256
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rmi.f16.f16 low, low;\n  cvt.rmi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1261
return val; 
# 1262
} 
#endif
# 1263 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h) 
# 1264
{int volatile ___ = 1;(void)h;
# 1272
::exit(___);}
#if 0
# 1264
{ 
# 1265
__half2 val; 
# 1266
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rni.f16.f16 low, low;\n  cvt.rni.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1271
return val; 
# 1272
} 
#endif
# 1273 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b) 
# 1274
{int volatile ___ = 1;(void)a;(void)b;
# 1281
::exit(___);}
#if 0
# 1274
{ 
# 1275
__half2 val; 
# 1276
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1280
return val; 
# 1281
} 
#endif
# 1282 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b) 
# 1283
{int volatile ___ = 1;(void)a;(void)b;
# 1290
::exit(___);}
#if 0
# 1283
{ 
# 1284
__half2 val; 
# 1285
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1289
return val; 
# 1290
} 
#endif
# 1291 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __low2half(const __half2 a) 
# 1292
{int volatile ___ = 1;(void)a;
# 1298
::exit(___);}
#if 0
# 1292
{ 
# 1293
__half ret; 
# 1294
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1297
return ret; 
# 1298
} 
#endif
# 1299 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __hisinf(const __half a) 
# 1300
{int volatile ___ = 1;(void)a;
# 1310
::exit(___);}
#if 0
# 1300
{ 
# 1301
int retval; 
# 1302
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 64512U) { 
# 1303
retval = (-1); 
# 1304
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 31744U) { 
# 1305
retval = 1; 
# 1306
} else { 
# 1307
retval = 0; 
# 1308
}  }  
# 1309
return retval; 
# 1310
} 
#endif
# 1311 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a) 
# 1312
{int volatile ___ = 1;(void)a;
# 1318
::exit(___);}
#if 0
# 1312
{ 
# 1313
__half2 val; 
# 1314
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1317
return val; 
# 1318
} 
#endif
# 1319 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a) 
# 1320
{int volatile ___ = 1;(void)a;
# 1326
::exit(___);}
#if 0
# 1320
{ 
# 1321
__half2 val; 
# 1322
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1325
return val; 
# 1326
} 
#endif
# 1327 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __high2half(const __half2 a) 
# 1328
{int volatile ___ = 1;(void)a;
# 1334
::exit(___);}
#if 0
# 1328
{ 
# 1329
__half ret; 
# 1330
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1333
return ret; 
# 1334
} 
#endif
# 1335 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b) 
# 1336
{int volatile ___ = 1;(void)a;(void)b;
# 1341
::exit(___);}
#if 0
# 1336
{ 
# 1337
__half2 val; 
# 1338
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1340
return val; 
# 1341
} 
#endif
# 1342 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __half2half2(const __half a) 
# 1343
{int volatile ___ = 1;(void)a;
# 1348
::exit(___);}
#if 0
# 1343
{ 
# 1344
__half2 val; 
# 1345
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1347
return val; 
# 1348
} 
#endif
# 1349 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a) 
# 1350
{int volatile ___ = 1;(void)a;
# 1356
::exit(___);}
#if 0
# 1350
{ 
# 1351
__half2 val; 
# 1352
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1355
return val; 
# 1356
} 
#endif
# 1357 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half_as_short(const __half h) 
# 1358
{int volatile ___ = 1;(void)h;
# 1360
::exit(___);}
#if 0
# 1358
{ 
# 1359
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1360
} 
#endif
# 1361 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h) 
# 1362
{int volatile ___ = 1;(void)h;
# 1364
::exit(___);}
#if 0
# 1362
{ 
# 1363
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1364
} 
#endif
# 1365 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short_as_half(const short i) 
# 1366
{int volatile ___ = 1;(void)i;
# 1370
::exit(___);}
#if 0
# 1366
{ 
# 1367
__half h; 
# 1368
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1369
return h; 
# 1370
} 
#endif
# 1371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i) 
# 1372
{int volatile ___ = 1;(void)i;
# 1376
::exit(___);}
#if 0
# 1372
{ 
# 1373
__half h; 
# 1374
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1375
return h; 
# 1376
} 
#endif
# 1398 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width) 
# 1399
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1404
::exit(___);}
#if 0
# 1399
{ 
# 1400
unsigned warp_size; 
# 1401
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1402
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1403
{ __half2 r; __asm__ volatile("{shfl.idx.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1404
} 
#endif
# 1405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width) 
# 1406
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1411
::exit(___);}
#if 0
# 1406
{ 
# 1407
unsigned warp_size; 
# 1408
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1409
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1410
{ __half2 r; __asm__ volatile("{shfl.up.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1411
} 
#endif
# 1412 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width) 
# 1413
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1418
::exit(___);}
#if 0
# 1413
{ 
# 1414
unsigned warp_size; 
# 1415
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1416
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1417
{ __half2 r; __asm__ volatile("{shfl.down.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1418
} 
#endif
# 1419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width) 
# 1420
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1425
::exit(___);}
#if 0
# 1420
{ 
# 1421
unsigned warp_size; 
# 1422
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1423
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1424
{ __half2 r; __asm__ volatile("{shfl.bfly.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1425
} 
#endif
# 1429 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1430
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1435
::exit(___);}
#if 0
# 1430
{ 
# 1431
unsigned warp_size; 
# 1432
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1433
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1434
{ __half2 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1435
} 
#endif
# 1436 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1437
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1442
::exit(___);}
#if 0
# 1437
{ 
# 1438
unsigned warp_size; 
# 1439
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1440
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1441
{ __half2 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1442
} 
#endif
# 1443 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1444
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1449
::exit(___);}
#if 0
# 1444
{ 
# 1445
unsigned warp_size; 
# 1446
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1447
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1448
{ __half2 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1449
} 
#endif
# 1450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1451
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1456
::exit(___);}
#if 0
# 1451
{ 
# 1452
unsigned warp_size; 
# 1453
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1454
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1455
{ __half2 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1456
} 
#endif
# 1463 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width) 
# 1464
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1468
::exit(___);}
#if 0
# 1464
{ 
# 1465
const __half2 temp1 = __halves2half2(var, var); 
# 1466
const __half2 temp2 = __shfl(temp1, delta, width); 
# 1467
return __low2half(temp2); 
# 1468
} 
#endif
# 1469 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width) 
# 1470
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1474
::exit(___);}
#if 0
# 1470
{ 
# 1471
const __half2 temp1 = __halves2half2(var, var); 
# 1472
const __half2 temp2 = __shfl_up(temp1, delta, width); 
# 1473
return __low2half(temp2); 
# 1474
} 
#endif
# 1475 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width) 
# 1476
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1480
::exit(___);}
#if 0
# 1476
{ 
# 1477
const __half2 temp1 = __halves2half2(var, var); 
# 1478
const __half2 temp2 = __shfl_down(temp1, delta, width); 
# 1479
return __low2half(temp2); 
# 1480
} 
#endif
# 1481 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width) 
# 1482
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1486
::exit(___);}
#if 0
# 1482
{ 
# 1483
const __half2 temp1 = __halves2half2(var, var); 
# 1484
const __half2 temp2 = __shfl_xor(temp1, delta, width); 
# 1485
return __low2half(temp2); 
# 1486
} 
#endif
# 1490 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1491
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1495
::exit(___);}
#if 0
# 1491
{ 
# 1492
const __half2 temp1 = __halves2half2(var, var); 
# 1493
const __half2 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1494
return __low2half(temp2); 
# 1495
} 
#endif
# 1496 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1497
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1501
::exit(___);}
#if 0
# 1497
{ 
# 1498
const __half2 temp1 = __halves2half2(var, var); 
# 1499
const __half2 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1500
return __low2half(temp2); 
# 1501
} 
#endif
# 1502 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1503
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1507
::exit(___);}
#if 0
# 1503
{ 
# 1504
const __half2 temp1 = __halves2half2(var, var); 
# 1505
const __half2 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1506
return __low2half(temp2); 
# 1507
} 
#endif
# 1508 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1509
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1513
::exit(___);}
#if 0
# 1509
{ 
# 1510
const __half2 temp1 = __halves2half2(var, var); 
# 1511
const __half2 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1512
return __low2half(temp2); 
# 1513
} 
#endif
# 1526 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr) 
# 1527
{int volatile ___ = 1;(void)ptr;
# 1531
::exit(___);}
#if 0
# 1527
{ 
# 1528
__half2 ret; 
# 1529
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1530
return ret; 
# 1531
} 
#endif
# 1532 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldg(const __half *const ptr) 
# 1533
{int volatile ___ = 1;(void)ptr;
# 1537
::exit(___);}
#if 0
# 1533
{ 
# 1534
__half ret; 
# 1535
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1536
return ret; 
# 1537
} 
#endif
# 1538 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr) 
# 1539
{int volatile ___ = 1;(void)ptr;
# 1543
::exit(___);}
#if 0
# 1539
{ 
# 1540
__half2 ret; 
# 1541
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1542
return ret; 
# 1543
} 
#endif
# 1544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr) 
# 1545
{int volatile ___ = 1;(void)ptr;
# 1549
::exit(___);}
#if 0
# 1545
{ 
# 1546
__half ret; 
# 1547
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1548
return ret; 
# 1549
} 
#endif
# 1550 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr) 
# 1551
{int volatile ___ = 1;(void)ptr;
# 1555
::exit(___);}
#if 0
# 1551
{ 
# 1552
__half2 ret; 
# 1553
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1554
return ret; 
# 1555
} 
#endif
# 1556 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldca(const __half *const ptr) 
# 1557
{int volatile ___ = 1;(void)ptr;
# 1561
::exit(___);}
#if 0
# 1557
{ 
# 1558
__half ret; 
# 1559
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1560
return ret; 
# 1561
} 
#endif
# 1562 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr) 
# 1563
{int volatile ___ = 1;(void)ptr;
# 1567
::exit(___);}
#if 0
# 1563
{ 
# 1564
__half2 ret; 
# 1565
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1566
return ret; 
# 1567
} 
#endif
# 1568 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr) 
# 1569
{int volatile ___ = 1;(void)ptr;
# 1573
::exit(___);}
#if 0
# 1569
{ 
# 1570
__half ret; 
# 1571
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1572
return ret; 
# 1573
} 
#endif
# 1574 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr) 
# 1575
{int volatile ___ = 1;(void)ptr;
# 1579
::exit(___);}
#if 0
# 1575
{ 
# 1576
__half2 ret; 
# 1577
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1578
return ret; 
# 1579
} 
#endif
# 1580 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr) 
# 1581
{int volatile ___ = 1;(void)ptr;
# 1585
::exit(___);}
#if 0
# 1581
{ 
# 1582
__half ret; 
# 1583
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1584
return ret; 
# 1585
} 
#endif
# 1586 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr) 
# 1587
{int volatile ___ = 1;(void)ptr;
# 1591
::exit(___);}
#if 0
# 1587
{ 
# 1588
__half2 ret; 
# 1589
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1590
return ret; 
# 1591
} 
#endif
# 1592 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr) 
# 1593
{int volatile ___ = 1;(void)ptr;
# 1597
::exit(___);}
#if 0
# 1593
{ 
# 1594
__half ret; 
# 1595
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1596
return ret; 
# 1597
} 
#endif
# 1598 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value) 
# 1599
{int volatile ___ = 1;(void)ptr;(void)value;
# 1601
::exit(___);}
#if 0
# 1599
{ 
# 1600
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1601
} 
#endif
# 1602 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value) 
# 1603
{int volatile ___ = 1;(void)ptr;(void)value;
# 1605
::exit(___);}
#if 0
# 1603
{ 
# 1604
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1605
} 
#endif
# 1606 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value) 
# 1607
{int volatile ___ = 1;(void)ptr;(void)value;
# 1609
::exit(___);}
#if 0
# 1607
{ 
# 1608
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1609
} 
#endif
# 1610 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value) 
# 1611
{int volatile ___ = 1;(void)ptr;(void)value;
# 1613
::exit(___);}
#if 0
# 1611
{ 
# 1612
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1613
} 
#endif
# 1614 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value) 
# 1615
{int volatile ___ = 1;(void)ptr;(void)value;
# 1617
::exit(___);}
#if 0
# 1615
{ 
# 1616
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1617
} 
#endif
# 1618 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value) 
# 1619
{int volatile ___ = 1;(void)ptr;(void)value;
# 1621
::exit(___);}
#if 0
# 1619
{ 
# 1620
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1621
} 
#endif
# 1622 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value) 
# 1623
{int volatile ___ = 1;(void)ptr;(void)value;
# 1625
::exit(___);}
#if 0
# 1623
{ 
# 1624
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1625
} 
#endif
# 1626 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value) 
# 1627
{int volatile ___ = 1;(void)ptr;(void)value;
# 1629
::exit(___);}
#if 0
# 1627
{ 
# 1628
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1629
} 
#endif
# 1642 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b) 
# 1643
{int volatile ___ = 1;(void)a;(void)b;
# 1645
::exit(___);}
#if 0
# 1643
{ 
# 1644
{ __half2 val; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1645
} 
#endif
# 1646 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b) 
# 1647
{int volatile ___ = 1;(void)a;(void)b;
# 1649
::exit(___);}
#if 0
# 1647
{ 
# 1648
{ __half2 val; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1649
} 
#endif
# 1650 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b) 
# 1651
{int volatile ___ = 1;(void)a;(void)b;
# 1653
::exit(___);}
#if 0
# 1651
{ 
# 1652
{ __half2 val; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1653
} 
#endif
# 1654 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b) 
# 1655
{int volatile ___ = 1;(void)a;(void)b;
# 1657
::exit(___);}
#if 0
# 1655
{ 
# 1656
{ __half2 val; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1657
} 
#endif
# 1658 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b) 
# 1659
{int volatile ___ = 1;(void)a;(void)b;
# 1661
::exit(___);}
#if 0
# 1659
{ 
# 1660
{ __half2 val; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1661
} 
#endif
# 1662 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b) 
# 1663
{int volatile ___ = 1;(void)a;(void)b;
# 1665
::exit(___);}
#if 0
# 1663
{ 
# 1664
{ __half2 val; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1665
} 
#endif
# 1666 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b) 
# 1667
{int volatile ___ = 1;(void)a;(void)b;
# 1669
::exit(___);}
#if 0
# 1667
{ 
# 1668
{ __half2 val; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1669
} 
#endif
# 1670 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b) 
# 1671
{int volatile ___ = 1;(void)a;(void)b;
# 1673
::exit(___);}
#if 0
# 1671
{ 
# 1672
{ __half2 val; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1673
} 
#endif
# 1674 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b) 
# 1675
{int volatile ___ = 1;(void)a;(void)b;
# 1677
::exit(___);}
#if 0
# 1675
{ 
# 1676
{ __half2 val; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1677
} 
#endif
# 1678 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b) 
# 1679
{int volatile ___ = 1;(void)a;(void)b;
# 1681
::exit(___);}
#if 0
# 1679
{ 
# 1680
{ __half2 val; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1681
} 
#endif
# 1682 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b) 
# 1683
{int volatile ___ = 1;(void)a;(void)b;
# 1685
::exit(___);}
#if 0
# 1683
{ 
# 1684
{ __half2 val; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1685
} 
#endif
# 1686 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b) 
# 1687
{int volatile ___ = 1;(void)a;(void)b;
# 1689
::exit(___);}
#if 0
# 1687
{ 
# 1688
{ __half2 val; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1689
} 
#endif
# 1703 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b) 
# 1704
{int volatile ___ = 1;(void)a;(void)b;
# 1706
::exit(___);}
#if 0
# 1704
{ 
# 1705
{ __half2 val; bool retval; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1706
} 
#endif
# 1707 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b) 
# 1708
{int volatile ___ = 1;(void)a;(void)b;
# 1710
::exit(___);}
#if 0
# 1708
{ 
# 1709
{ __half2 val; bool retval; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1710
} 
#endif
# 1711 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b) 
# 1712
{int volatile ___ = 1;(void)a;(void)b;
# 1714
::exit(___);}
#if 0
# 1712
{ 
# 1713
{ __half2 val; bool retval; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1714
} 
#endif
# 1715 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b) 
# 1716
{int volatile ___ = 1;(void)a;(void)b;
# 1718
::exit(___);}
#if 0
# 1716
{ 
# 1717
{ __half2 val; bool retval; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1718
} 
#endif
# 1719 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b) 
# 1720
{int volatile ___ = 1;(void)a;(void)b;
# 1722
::exit(___);}
#if 0
# 1720
{ 
# 1721
{ __half2 val; bool retval; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1722
} 
#endif
# 1723 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b) 
# 1724
{int volatile ___ = 1;(void)a;(void)b;
# 1726
::exit(___);}
#if 0
# 1724
{ 
# 1725
{ __half2 val; bool retval; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1726
} 
#endif
# 1727 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b) 
# 1728
{int volatile ___ = 1;(void)a;(void)b;
# 1730
::exit(___);}
#if 0
# 1728
{ 
# 1729
{ __half2 val; bool retval; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1730
} 
#endif
# 1731 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b) 
# 1732
{int volatile ___ = 1;(void)a;(void)b;
# 1734
::exit(___);}
#if 0
# 1732
{ 
# 1733
{ __half2 val; bool retval; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1734
} 
#endif
# 1735 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b) 
# 1736
{int volatile ___ = 1;(void)a;(void)b;
# 1738
::exit(___);}
#if 0
# 1736
{ 
# 1737
{ __half2 val; bool retval; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1738
} 
#endif
# 1739 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b) 
# 1740
{int volatile ___ = 1;(void)a;(void)b;
# 1742
::exit(___);}
#if 0
# 1740
{ 
# 1741
{ __half2 val; bool retval; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1742
} 
#endif
# 1743 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b) 
# 1744
{int volatile ___ = 1;(void)a;(void)b;
# 1746
::exit(___);}
#if 0
# 1744
{ 
# 1745
{ __half2 val; bool retval; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1746
} 
#endif
# 1747 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b) 
# 1748
{int volatile ___ = 1;(void)a;(void)b;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
{ __half2 val; bool retval; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1750
} 
#endif
# 1763 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b) 
# 1764
{int volatile ___ = 1;(void)a;(void)b;
# 1766
::exit(___);}
#if 0
# 1764
{ 
# 1765
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.eq.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1766
} 
#endif
# 1767 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b) 
# 1768
{int volatile ___ = 1;(void)a;(void)b;
# 1770
::exit(___);}
#if 0
# 1768
{ 
# 1769
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ne.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1770
} 
#endif
# 1771 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b) 
# 1772
{int volatile ___ = 1;(void)a;(void)b;
# 1774
::exit(___);}
#if 0
# 1772
{ 
# 1773
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.le.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1774
} 
#endif
# 1775 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b) 
# 1776
{int volatile ___ = 1;(void)a;(void)b;
# 1778
::exit(___);}
#if 0
# 1776
{ 
# 1777
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ge.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1778
} 
#endif
# 1779 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b) 
# 1780
{int volatile ___ = 1;(void)a;(void)b;
# 1782
::exit(___);}
#if 0
# 1780
{ 
# 1781
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.lt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1782
} 
#endif
# 1783 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b) 
# 1784
{int volatile ___ = 1;(void)a;(void)b;
# 1786
::exit(___);}
#if 0
# 1784
{ 
# 1785
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1786
} 
#endif
# 1787 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b) 
# 1788
{int volatile ___ = 1;(void)a;(void)b;
# 1790
::exit(___);}
#if 0
# 1788
{ 
# 1789
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.equ.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1790
} 
#endif
# 1791 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b) 
# 1792
{int volatile ___ = 1;(void)a;(void)b;
# 1794
::exit(___);}
#if 0
# 1792
{ 
# 1793
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.neu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1794
} 
#endif
# 1795 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b) 
# 1796
{int volatile ___ = 1;(void)a;(void)b;
# 1798
::exit(___);}
#if 0
# 1796
{ 
# 1797
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.leu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1798
} 
#endif
# 1799 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b) 
# 1800
{int volatile ___ = 1;(void)a;(void)b;
# 1802
::exit(___);}
#if 0
# 1800
{ 
# 1801
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.geu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1802
} 
#endif
# 1803 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b) 
# 1804
{int volatile ___ = 1;(void)a;(void)b;
# 1806
::exit(___);}
#if 0
# 1804
{ 
# 1805
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ltu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1806
} 
#endif
# 1807 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b) 
# 1808
{int volatile ___ = 1;(void)a;(void)b;
# 1810
::exit(___);}
#if 0
# 1808
{ 
# 1809
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gtu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1810
} 
#endif
# 1815 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b) 
# 1816
{int volatile ___ = 1;(void)a;(void)b;
# 1818
::exit(___);}
#if 0
# 1816
{ 
# 1817
{ __half2 val; __asm__("{add.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1818
} 
#endif
# 1819 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b) 
# 1820
{int volatile ___ = 1;(void)a;(void)b;
# 1822
::exit(___);}
#if 0
# 1820
{ 
# 1821
{ __half2 val; __asm__("{sub.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1822
} 
#endif
# 1823 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b) 
# 1824
{int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __half2 val; __asm__("{mul.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1826
} 
#endif
# 1827 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b) 
# 1828
{int volatile ___ = 1;(void)a;(void)b;
# 1830
::exit(___);}
#if 0
# 1828
{ 
# 1829
{ __half2 val; __asm__("{add.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1830
} 
#endif
# 1831 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b) 
# 1832
{int volatile ___ = 1;(void)a;(void)b;
# 1834
::exit(___);}
#if 0
# 1832
{ 
# 1833
{ __half2 val; __asm__("{sub.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1834
} 
#endif
# 1835 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b) 
# 1836
{int volatile ___ = 1;(void)a;(void)b;
# 1838
::exit(___);}
#if 0
# 1836
{ 
# 1837
{ __half2 val; __asm__("{mul.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1838
} 
#endif
# 1839 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b) 
# 1840
{int volatile ___ = 1;(void)a;(void)b;
# 1842
::exit(___);}
#if 0
# 1840
{ 
# 1841
{ __half2 val; __asm__("{add.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1842
} 
#endif
# 1843 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b) 
# 1844
{int volatile ___ = 1;(void)a;(void)b;
# 1846
::exit(___);}
#if 0
# 1844
{ 
# 1845
{ __half2 val; __asm__("{sub.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1846
} 
#endif
# 1847 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b) 
# 1848
{int volatile ___ = 1;(void)a;(void)b;
# 1850
::exit(___);}
#if 0
# 1848
{ 
# 1849
{ __half2 val; __asm__("{mul.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1850
} 
#endif
# 1851 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c) 
# 1852
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1854
::exit(___);}
#if 0
# 1852
{ 
# 1853
{ __half2 val; __asm__("{fma.rn.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 1854
} 
#endif
# 1855 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c) 
# 1856
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1858
::exit(___);}
#if 0
# 1856
{ 
# 1857
{ __half2 val; __asm__("{fma.rn.sat.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 1858
} 
#endif
# 1859 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b) {int volatile ___ = 1;(void)a;(void)b;
# 1871
::exit(___);}
#if 0
# 1859
{ 
# 1860
__half ha = __low2half(a); 
# 1861
__half hb = __low2half(b); 
# 1863
const __half v1 = __hdiv(ha, hb); 
# 1865
ha = __high2half(a); 
# 1866
hb = __high2half(b); 
# 1868
const __half v2 = __hdiv(ha, hb); 
# 1870
return __halves2half2(v1, v2); 
# 1871
} 
#endif
# 1875 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b) 
# 1876
{int volatile ___ = 1;(void)a;(void)b;
# 1878
::exit(___);}
#if 0
# 1876
{ 
# 1877
{ __half val; __asm__("{add.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1878
} 
#endif
# 1879 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b) 
# 1880
{int volatile ___ = 1;(void)a;(void)b;
# 1882
::exit(___);}
#if 0
# 1880
{ 
# 1881
{ __half val; __asm__("{sub.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1882
} 
#endif
# 1883 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b) 
# 1884
{int volatile ___ = 1;(void)a;(void)b;
# 1886
::exit(___);}
#if 0
# 1884
{ 
# 1885
{ __half val; __asm__("{mul.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1886
} 
#endif
# 1887 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b) 
# 1888
{int volatile ___ = 1;(void)a;(void)b;
# 1890
::exit(___);}
#if 0
# 1888
{ 
# 1889
{ __half val; __asm__("{add.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1890
} 
#endif
# 1891 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b) 
# 1892
{int volatile ___ = 1;(void)a;(void)b;
# 1894
::exit(___);}
#if 0
# 1892
{ 
# 1893
{ __half val; __asm__("{sub.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1894
} 
#endif
# 1895 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b) 
# 1896
{int volatile ___ = 1;(void)a;(void)b;
# 1898
::exit(___);}
#if 0
# 1896
{ 
# 1897
{ __half val; __asm__("{mul.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1898
} 
#endif
# 1899 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b) 
# 1900
{int volatile ___ = 1;(void)a;(void)b;
# 1902
::exit(___);}
#if 0
# 1900
{ 
# 1901
{ __half val; __asm__("{add.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1902
} 
#endif
# 1903 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b) 
# 1904
{int volatile ___ = 1;(void)a;(void)b;
# 1906
::exit(___);}
#if 0
# 1904
{ 
# 1905
{ __half val; __asm__("{sub.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1906
} 
#endif
# 1907 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b) 
# 1908
{int volatile ___ = 1;(void)a;(void)b;
# 1910
::exit(___);}
#if 0
# 1908
{ 
# 1909
{ __half val; __asm__("{mul.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1910
} 
#endif
# 1911 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c) 
# 1912
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1914
::exit(___);}
#if 0
# 1912
{ 
# 1913
{ __half val; __asm__("{fma.rn.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 1914
} 
#endif
# 1915 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c) 
# 1916
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1918
::exit(___);}
#if 0
# 1916
{ 
# 1917
{ __half val; __asm__("{fma.rn.sat.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 1918
} 
#endif
# 1919 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b) {int volatile ___ = 1;(void)a;(void)b;
# 1941
::exit(___);}
#if 0
# 1919
{ 
# 1920
__half v; 
# 1921
__half abs; 
# 1922
__half den; 
# 1923
(*(reinterpret_cast< unsigned short *>(&den))) = (143U); 
# 1925
float rcp; 
# 1926
const float fa = __half2float(a); 
# 1927
const float fb = __half2float(b); 
# 1929
__asm__("{rcp.approx.ftz.f32 %0, %1;\n}" : "=f" (rcp) : "f" (fb)); 
# 1931
float fv = rcp * fa; 
# 1933
v = __float2half(fv); 
# 1934
(*(reinterpret_cast< unsigned short *>(&abs))) = (static_cast< unsigned short>((static_cast< unsigned>(*(reinterpret_cast< const unsigned short *>(&v)))) & 32767U)); 
# 1935
if (__hlt(abs, den) && (!((*(reinterpret_cast< const unsigned short *>(&abs))) == 0U))) { 
# 1936
const float err = __fmaf_rn(-fb, fv, fa); 
# 1937
fv = __fmaf_rn(rcp, err, fv); 
# 1938
v = __float2half(fv); 
# 1939
}  
# 1940
return v; 
# 1941
} 
#endif
# 1985 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a); 
# 1986
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a); 
# 1987
__attribute__((unused)) static inline __half hsin(const __half a) {int volatile ___ = 1;(void)a;
# 2003
::exit(___);}
#if 0
# 1987
{ 
# 1988
const float sl = __float_simpl_sinf(__half2float(a)); 
# 1989
__half r = __float2half_rn(sl); 
# 1990
__asm__("{\n\t  .reg.b16 i,r,t;     \n\t  mov.b16 r, %0;      \n\t  mov.b16 i, %1;      \n\t  and.b16 t, r, 0x8000U; \n\t  abs.f16 r, r; " "  \n\t  abs.f16 i, i;   \n\t{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X32B3U;\n  mov.b16 ulp,0x0800U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X5CB0U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n  or.b16  r,r,t;      \n\t  mov.b16 %0, r;      \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2002
return r; 
# 2003
} 
#endif
# 2004 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a) {int volatile ___ = 1;(void)a;
# 2021
::exit(___);}
#if 0
# 2004
{ 
# 2005
const float sl = __float_simpl_sinf(__half2float(a.x)); 
# 2006
const float sh = __float_simpl_sinf(__half2float(a.y)); 
# 2007
__half2 r = __floats2half2_rn(sl, sh); 
# 2008
__asm__("{\n\t  .reg.b32 i,r,t;             \n\t  mov.b32 r, %0;              \n\t  mov.b32 i, %1;              \n\t  and.b32 t, r, 0x800" "08000U;   \n\t  abs.f16x2 r, r;   \n\t  abs.f16x2 i, i;   \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X32B332B3U;\n  mov.b32 ulp," "0x08000800U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X5CB05CB0U;\n" "  mov.b32 ulp,0x90009000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  or.b32  r, r, t;            \n\t  mo" "v.b32 %0, r;              \n}\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2020
return r; 
# 2021
} 
#endif
# 2022 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hcos(const __half a) {int volatile ___ = 1;(void)a;
# 2034
::exit(___);}
#if 0
# 2022
{ 
# 2023
const float cl = __float_simpl_cosf(__half2float(a)); 
# 2024
__half r = __float2half_rn(cl); 
# 2025
__asm__("{\n\t  .reg.b16 i,r;        \n\t  mov.b16 r, %0;       \n\t  mov.b16 i, %1;       \n\t  abs.f16 i, i;        \n\t{.reg.b16 spc, " "ulp, p;\n  mov.b16 spc,0X2B7CU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,i, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16 %0, r" ";       \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2033
return r; 
# 2034
} 
#endif
# 2035 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a) {int volatile ___ = 1;(void)a;
# 2048
::exit(___);}
#if 0
# 2035
{ 
# 2036
const float cl = __float_simpl_cosf(__half2float(a.x)); 
# 2037
const float ch = __float_simpl_cosf(__half2float(a.y)); 
# 2038
__half2 r = __floats2half2_rn(cl, ch); 
# 2039
__asm__("{\n\t  .reg.b32 i,r;   \n\t  mov.b32 r, %0;  \n\t  mov.b32 i, %1;  \n\t  abs.f16x2 i, i; \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 s" "pc,0X2B7C2B7CU;\n  mov.b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32 %0, r;  \n}" "\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2047
return r; 
# 2048
} 
#endif
# 2049 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_trig_reduction_kernel(const float a, unsigned *const quadrant) 
# 2050
{int volatile ___ = 1;(void)a;(void)quadrant;
# 2058
::exit(___);}
#if 0
# 2050
{ 
# 2051
const float ar = __fmaf_rn(a, (0.63661975F), (1.2582912E7F)); 
# 2052
const unsigned q = __float_as_uint(ar); 
# 2053
const float j = __fsub_rn(ar, (1.2582912E7F)); 
# 2054
float t = __fmaf_rn(j, -(1.5707963F), a); 
# 2055
t = __fmaf_rn(j, -(7.5497894E-8F), t); 
# 2056
(*quadrant) = q; 
# 2057
return t; 
# 2058
} 
#endif
# 2059 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_sin_cos_kernel(const float x, const unsigned i) 
# 2060
{int volatile ___ = 1;(void)x;(void)i;
# 2098
::exit(___);}
#if 0
# 2060
{ 
# 2061
float z; 
# 2062
const float x2 = x * x; 
# 2063
float a8; 
# 2064
float a6; 
# 2065
float a4; 
# 2066
float a2; 
# 2067
float a1; 
# 2068
float a0; 
# 2070
if ((i & 1U) != 0U) { 
# 2072
a8 = (2.4433157E-5F); 
# 2073
a6 = (-(0.0013887316F)); 
# 2074
a4 = (0.041666646F); 
# 2075
a2 = (-(0.5F)); 
# 2076
a1 = x2; 
# 2077
a0 = (1.0F); 
# 2078
} else 
# 2079
{ 
# 2081
a8 = (-(1.9515296E-4F)); 
# 2082
a6 = (0.008332161F); 
# 2083
a4 = (-(0.16666655F)); 
# 2084
a2 = (0.0F); 
# 2085
a1 = x; 
# 2086
a0 = x; 
# 2087
}  
# 2089
z = __fmaf_rn(a8, x2, a6); 
# 2090
z = __fmaf_rn(z, x2, a4); 
# 2091
z = __fmaf_rn(z, x2, a2); 
# 2092
z = __fmaf_rn(z, a1, a0); 
# 2094
if ((i & 2U) != 0U) { 
# 2095
z = (-z); 
# 2096
}  
# 2097
return z; 
# 2098
} 
#endif
# 2099 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a) 
# 2100
{int volatile ___ = 1;(void)a;
# 2106
::exit(___);}
#if 0
# 2100
{ 
# 2101
float z; 
# 2102
unsigned i; 
# 2103
a = __internal_trig_reduction_kernel(a, &i); 
# 2104
z = __internal_sin_cos_kernel(a, i); 
# 2105
return z; 
# 2106
} 
#endif
# 2107 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a) 
# 2108
{int volatile ___ = 1;(void)a;
# 2114
::exit(___);}
#if 0
# 2108
{ 
# 2109
float z; 
# 2110
unsigned i; 
# 2111
a = __internal_trig_reduction_kernel(a, &i); 
# 2112
z = __internal_sin_cos_kernel(a, (i & 3U) + 1U); 
# 2113
return z; 
# 2114
} 
#endif
# 2116 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp(const __half a) {int volatile ___ = 1;(void)a;
# 2134
::exit(___);}
#if 0
# 2116
{ 
# 2117
__half val; 
# 2118
__asm__("{.reg.b32         f, C, nZ;       \n .reg.b16         h,r;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  mov.b32         C, 0x3fb8aa3bU; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f,f;        \n  cvt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X1F79U;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X25CFU;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC13BU;\n  mov.b16 ul" "p,0x0400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC1EFU;\n  mov.b16 ul" "p,0x0200U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2133
return val; 
# 2134
} 
#endif
# 2135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2159
::exit(___);}
#if 0
# 2135
{ 
# 2136
__half2 val; 
# 2137
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x3fb8aa3bU; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X1F791F79U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X25CF25CFU;\n  mov.b32 ulp,0x94009400U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC13BC13BU;\n  mov.b32 ulp,0x0400" "0400U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC1EFC1EFU;\n  mov." "b32 ulp,0x02000200U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2158
return val; 
# 2159
} 
#endif
# 2160 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp2(const __half a) {int volatile ___ = 1;(void)a;
# 2173
::exit(___);}
#if 0
# 2160
{ 
# 2161
__half val; 
# 2162
__asm__("{.reg.b32         f, ULP;         \n .reg.b16         r;              \n  mov.b16         r,%1;           \n  cvt.f32.f16     f," "r;            \n  ex2.approx.ftz.f32      f,f;    \n  mov.b32         ULP, 0x33800000U;\n  fma.rn.f32      f,f,ULP,f;      \n  c" "vt.rn.f16.f32      r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2172
return val; 
# 2173
} 
#endif
# 2174 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2191
::exit(___);}
#if 0
# 2174
{ 
# 2175
__half2 val; 
# 2176
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, ULP;    \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  ex2.approx.ftz.f32  fl, fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  mo" "v.b32         ULP, 0x33800000U;\n  fma.rn.f32      fl,fl,ULP,fl;   \n  fma.rn.f32      fu,fu,ULP,fu;   \n  cvt.rn.f16.f32      h" "l, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2190
return val; 
# 2191
} 
#endif
# 2192 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp10(const __half a) {int volatile ___ = 1;(void)a;
# 2211
::exit(___);}
#if 0
# 2192
{ 
# 2193
__half val; 
# 2194
__asm__("{.reg.b16         h,r;            \n .reg.b32         f, C, nZ;       \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  mov.b32         C, 0x40549A78U; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x34DEU;\n  mov.b16 ul" "p,0x9800U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9766U;\n  mov.b16 ul" "p,0x9000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9972U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xA5C4U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBF0AU;\n  mov.b16 ul" "p,0x8100U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2210
return val; 
# 2211
} 
#endif
# 2212 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2237
::exit(___);}
#if 0
# 2212
{ 
# 2213
__half2 val; 
# 2214
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x40549A78U; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x34DE34DEU;\n  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x97669766U;\n  mov.b32 ulp,0x90009000U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x99729972U;\n  mov.b32 ulp,0x1000" "1000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xA5C4A5C4U;\n  mov." "b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBF0A" "BF0AU;\n  mov.b32 ulp,0x81008100U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2236
return val; 
# 2237
} 
#endif
# 2238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog2(const __half a) {int volatile ___ = 1;(void)a;
# 2251
::exit(___);}
#if 0
# 2238
{ 
# 2239
__half val; 
# 2240
__asm__("{.reg.b16         h, r;           \n .reg.b32         f;              \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "A2E2U;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "BF46U;\n  mov.b16 ulp,0x9400U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2250
return val; 
# 2251
} 
#endif
# 2252 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2269
::exit(___);}
#if 0
# 2252
{ 
# 2253
__half2 val; 
# 2254
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, r, p;   \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  lg2.approx.ftz.f32  fl, fl;     \n  lg2.approx.ftz.f32  fu, fu;     \n  cv" "t.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,0xA2E2A2E2U;\n  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 " "spc, ulp, p;\n  mov.b32 spc,0xBF46BF46U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n" "}\n  mov.b32         %0, r;          \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2268
return val; 
# 2269
} 
#endif
# 2270 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog(const __half a) {int volatile ___ = 1;(void)a;
# 2287
::exit(___);}
#if 0
# 2270
{ 
# 2271
__half val; 
# 2272
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  lg2.approx.ftz.f32  f,f;        \n  mov.b32         C, 0x3f317218U;  \n  mul.f32         f,f,C;          \n  c" "vt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X160DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3BFEU;\n  mov.b16 ulp,0x8010U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3C0BU;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X6051U;\n  mov.b16 ulp,0x1C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2286
return val; 
# 2287
} 
#endif
# 2288 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log(const __half2 a) {int volatile ___ = 1;(void)a;
# 2311
::exit(___);}
#if 0
# 2288
{ 
# 2289
__half2 val; 
# 2290
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X160D160DU;\n  mov.b32 ulp,0x9C009C00U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3BFE3BFEU;\n  mov.b32 ulp," "0x80108010U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3C0B3C0BU;\n" "  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0X60516051U;\n  mov.b32 ulp,0x1C001C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2310
return val; 
# 2311
} 
#endif
# 2312 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog10(const __half a) {int volatile ___ = 1;(void)a;
# 2329
::exit(___);}
#if 0
# 2312
{ 
# 2313
__half val; 
# 2314
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  mov.b32         C, 0x3E9A209BU; \n  mul.f32         f,f,C;          \n  cv" "t.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x338FU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x33F8U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x57E1U;\n  mov.b16 ulp,0x9800U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x719DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2328
return val; 
# 2329
} 
#endif
# 2330 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2353
::exit(___);}
#if 0
# 2330
{ 
# 2331
__half2 val; 
# 2332
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3E9A209BU;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x338F338FU;\n  mov.b32 ulp,0x10001000U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x33F833F8U;\n  mov.b32 ulp," "0x90009000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x57E157E1U;\n" "  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0x719D719DU;\n  mov.b32 ulp,0x9C009C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2352
return val; 
# 2353
} 
#endif
# 2356 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2358
::exit(___);}
#if 0
# 2356
{ 
# 2357
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rcp.approx.ftz.f32   fl, fl;     \n  rcp.approx.ftz.f32   fu, fu;     \n  " "cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2358
} 
#endif
# 2359 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrcp(const __half a) {int volatile ___ = 1;(void)a;
# 2361
::exit(___);}
#if 0
# 2359
{ 
# 2360
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rcp.ap" "prox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2361
} 
#endif
# 2362 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2364
::exit(___);}
#if 0
# 2362
{ 
# 2363
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rsqrt.approx.ftz.f32   fl, fl;     \n  rsqrt.approx.ftz.f32   fu, fu;     " "\n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2364
} 
#endif
# 2365 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2367
::exit(___);}
#if 0
# 2365
{ 
# 2366
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rsqrt." "approx.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2367
} 
#endif
# 2368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2370
::exit(___);}
#if 0
# 2368
{ 
# 2369
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  sqrt.approx.ftz.f32   fl, fl;     \n  sqrt.approx.ftz.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2370
} 
#endif
# 2371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2373
::exit(___);}
#if 0
# 2371
{ 
# 2372
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  sqrt.a" "pprox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2373
} 
#endif
# 2376 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a) 
# 2377
{int volatile ___ = 1;(void)a;
# 2382
::exit(___);}
#if 0
# 2377
{ 
# 2378
__half2 r; 
# 2379
__asm__("{set.nan.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2381
return r; 
# 2382
} 
#endif
# 2383 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __half a) 
# 2384
{int volatile ___ = 1;(void)a;
# 2389
::exit(___);}
#if 0
# 2384
{ 
# 2385
__half r; 
# 2386
__asm__("{set.nan.f16.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2388
return (*(reinterpret_cast< const unsigned short *>(&r))) != 0U; 
# 2389
} 
#endif
# 2390 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a) 
# 2391
{int volatile ___ = 1;(void)a;
# 2396
::exit(___);}
#if 0
# 2391
{ 
# 2392
__half2 r; 
# 2393
__asm__("{neg.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2395
return r; 
# 2396
} 
#endif
# 2397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hneg(const __half a) 
# 2398
{int volatile ___ = 1;(void)a;
# 2403
::exit(___);}
#if 0
# 2398
{ 
# 2399
__half r; 
# 2400
__asm__("{neg.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2402
return r; 
# 2403
} 
#endif
# 2404 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a) 
# 2405
{int volatile ___ = 1;(void)a;
# 2410
::exit(___);}
#if 0
# 2405
{ 
# 2406
__half2 r; 
# 2407
__asm__("{abs.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2409
return r; 
# 2410
} 
#endif
# 2411 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __habs(const __half a) 
# 2412
{int volatile ___ = 1;(void)a;
# 2417
::exit(___);}
#if 0
# 2412
{ 
# 2413
__half r; 
# 2414
__asm__("{abs.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2416
return r; 
# 2417
} 
#endif
# 2419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c) 
# 2420
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2430
::exit(___);}
#if 0
# 2420
{ 
# 2425
__half real_tmp = __hfma(a.x, b.x, c.x); 
# 2426
__half img_tmp = __hfma(a.x, b.y, c.y); 
# 2427
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2428
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2429
return make_half2(real_tmp, img_tmp); 
# 2430
} 
#endif
# 2437 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b) 
# 2438
{int volatile ___ = 1;(void)a;(void)b;
# 2440
::exit(___);}
#if 0
# 2438
{ 
# 2439
{ __half val; __asm__("{max.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2440
} 
#endif
# 2441 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b) 
# 2442
{int volatile ___ = 1;(void)a;(void)b;
# 2444
::exit(___);}
#if 0
# 2442
{ 
# 2443
{ __half val; __asm__("{min.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2444
} 
#endif
# 2445 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b) 
# 2446
{int volatile ___ = 1;(void)a;(void)b;
# 2448
::exit(___);}
#if 0
# 2446
{ 
# 2447
{ __half val; __asm__("{max.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2448
} 
#endif
# 2449 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b) 
# 2450
{int volatile ___ = 1;(void)a;(void)b;
# 2452
::exit(___);}
#if 0
# 2450
{ 
# 2451
{ __half val; __asm__("{min.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2452
} 
#endif
# 2453 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c) 
# 2454
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2456
::exit(___);}
#if 0
# 2454
{ 
# 2455
{ __half val; __asm__("{fma.rn.relu.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2456
} 
#endif
# 2460 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b) 
# 2461
{int volatile ___ = 1;(void)a;(void)b;
# 2463
::exit(___);}
#if 0
# 2461
{ 
# 2462
{ __half2 val; __asm__("{max.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2463
} 
#endif
# 2464 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b) 
# 2465
{int volatile ___ = 1;(void)a;(void)b;
# 2467
::exit(___);}
#if 0
# 2465
{ 
# 2466
{ __half2 val; __asm__("{min.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2467
} 
#endif
# 2468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b) 
# 2469
{int volatile ___ = 1;(void)a;(void)b;
# 2471
::exit(___);}
#if 0
# 2469
{ 
# 2470
{ __half2 val; __asm__("{max.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2471
} 
#endif
# 2472 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b) 
# 2473
{int volatile ___ = 1;(void)a;(void)b;
# 2475
::exit(___);}
#if 0
# 2473
{ 
# 2474
{ __half2 val; __asm__("{min.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2475
} 
#endif
# 2476 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c) 
# 2477
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2479
::exit(___);}
#if 0
# 2477
{ 
# 2478
{ __half2 val; __asm__("{fma.rn.relu.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2479
} 
#endif
# 2491 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val) {int volatile ___ = 1;(void)address;(void)val;
# 2497
::exit(___);}
#if 0
# 2491
{ 
# 2492
__half2 r; 
# 2493
__asm__ volatile("{ atom.add.noftz.f16x2 %0,[%1],%2; }\n" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "l" (address), "r" (*(reinterpret_cast< const unsigned *>(&val))) : "memory"); 
# 2496
return r; 
# 2497
} 
#endif
# 2503 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val) {int volatile ___ = 1;(void)address;(void)val;
# 2510
::exit(___);}
#if 0
# 2503
{ 
# 2504
__half r; 
# 2505
__asm__ volatile("{ atom.add.noftz.f16 %0,[%1],%2; }\n" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "l" (address), "h" (*(reinterpret_cast< const unsigned short *>(&val))) : "memory"); 
# 2509
return r; 
# 2510
} 
#endif
# 2536 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef __half half; 
# 2537
typedef __half2 half2; 
# 2539
typedef __half __nv_half; 
# 2540
typedef __half2 __nv_half2; 
# 2541
typedef __half_raw __nv_half_raw; 
# 2542
typedef __half2_raw __nv_half2_raw; 
# 2543
typedef __half nv_half; 
# 2544
typedef __half2 nv_half2; 
# 128 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat16; 
# 138 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat162; 
# 154 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __double2bfloat16(const double a); 
# 169 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16(const float a); 
# 184 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rn(const float a); 
# 199 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rz(const float a); 
# 215 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rd(const float a); 
# 231 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_ru(const float a); 
# 246 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __bfloat162float(const __nv_bfloat16 a); 
# 264 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float2bfloat162_rn(const float a); 
# 285 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b); 
# 301 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __low2float(const __nv_bfloat162 a); 
# 317 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __high2float(const __nv_bfloat162 a); 
# 339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a); 
# 355 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float2 __bfloat1622float2(const __nv_bfloat162 a); 
# 371 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h); 
# 387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline int __bfloat162int_rz(const __nv_bfloat16 h); 
# 403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h); 
# 419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h); 
# 436 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i); 
# 452 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i); 
# 468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i); 
# 484 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i); 
# 502 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h); 
# 518 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline short __bfloat162short_rz(const __nv_bfloat16 h); 
# 534 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h); 
# 550 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h); 
# 568 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i); 
# 584 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i); 
# 600 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i); 
# 616 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i); 
# 633 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h); 
# 649 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h); 
# 665 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h); 
# 681 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h); 
# 698 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i); 
# 714 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i); 
# 730 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i); 
# 746 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i); 
# 764 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h); 
# 781 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h); 
# 793 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h); 
# 805 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h); 
# 823 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i); 
# 840 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i); 
# 856 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i); 
# 872 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i); 
# 890 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h); 
# 907 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h); 
# 923 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h); 
# 939 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h); 
# 957 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i); 
# 974 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i); 
# 990 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i); 
# 1006 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i); 
# 1024 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h); 
# 1040 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h); 
# 1056 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h); 
# 1072 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h); 
# 1090 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i); 
# 1102 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i); 
# 1118 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i); 
# 1134 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i); 
# 1151 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h); 
# 1166 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h); 
# 1181 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h); 
# 1198 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h); 
# 1215 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h); 
# 1231 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h); 
# 1247 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h); 
# 1265 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h); 
# 1282 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a); 
# 1298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a); 
# 1318 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1338 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1353 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a); 
# 1368 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a); 
# 1385 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a); 
# 1403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 1419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a); 
# 1435 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a); 
# 1452 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h); 
# 1468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h); 
# 1484 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i); 
# 1500 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i); 
# 1531 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1556 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1581 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1605 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1630 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1654 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1679 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1703 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1716 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr); 
# 1723
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr); 
# 1730
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr); 
# 1737
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr); 
# 1744
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr); 
# 1751
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr); 
# 1758
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr); 
# 1765
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr); 
# 1772
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr); 
# 1779
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr); 
# 1786
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr); 
# 1793
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr); 
# 1801
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1808
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1815
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1822
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1829
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1836
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1843
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1850
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1869 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1887 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1905 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1923 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1941 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1959 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1977 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1995 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2013 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2031 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2049 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2067 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2083 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a); 
# 2103 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2123 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2143 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2163 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2183 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2224 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2241 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a); 
# 2260 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2279 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2299 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2322 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2344 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2363 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a); 
# 2378 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a); 
# 2398 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2418 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2434 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2454 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2474 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2490 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2510 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2547 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2566 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2589 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2611 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2629 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a); 
# 2651 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2673 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2695 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2717 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2739 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2761 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2783 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2805 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2827 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2850 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2872 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2895 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2912 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2929 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2946 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2963 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2980 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2997 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3015 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3033 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3051 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3069 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3087 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3105 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3120 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a); 
# 3139 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3158 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3176 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3194 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3216 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 3237 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3258 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3278 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3320 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3339 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3355 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a); 
# 3372 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a); 
# 3387 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a); 
# 3403 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a); 
# 3419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a); 
# 3435 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a); 
# 3452 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a); 
# 3469 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a); 
# 3486 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a); 
# 3501 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a); 
# 3516 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a); 
# 3532 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a); 
# 3549 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a); 
# 3565 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a); 
# 3582 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a); 
# 3599 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a); 
# 3616 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a); 
# 3633 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a); 
# 3650 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a); 
# 3667 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a); 
# 3683 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a); 
# 3698 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a); 
# 3717 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val); 
# 3735 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val); 
# 127 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef 
# 125
struct __attribute((aligned(2))) { 
# 126
unsigned short x; 
# 127
} __nv_bfloat16_raw; 
# 132
typedef 
# 129
struct __attribute((aligned(4))) { 
# 130
unsigned short x; 
# 131
unsigned short y; 
# 132
} __nv_bfloat162_raw; 
# 140
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 153 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(2))) __nv_bfloat16 { 
# 155
protected: unsigned short __x; 
# 159
public: __nv_bfloat16() = default;
# 165
__nv_bfloat16(const __nv_bfloat16_raw &hr) : __x(hr.x) { } 
# 166
__nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) { (__x) = (hr.x); return *this; } 
# 167
volatile __nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 168
volatile __nv_bfloat16 &operator=(const volatile __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 169
operator __nv_bfloat16_raw() const { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 170
operator __nv_bfloat16_raw() const volatile { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 174
__nv_bfloat16(const float f) { (__x) = (__float2bfloat16(f).__x); } 
# 175
__nv_bfloat16(const double f) { (__x) = (__double2bfloat16(f).__x); } 
# 177
operator float() const { return __bfloat162float(*this); } 
# 178
__nv_bfloat16 &operator=(const float f) { (__x) = (__float2bfloat16(f).__x); return *this; } 
# 181
__nv_bfloat16 &operator=(const double f) { (__x) = (__double2bfloat16(f).__x); return *this; } 
# 187
__nv_bfloat16(short val) { (__x) = (__short2bfloat16_rn(val).__x); } 
# 188
__nv_bfloat16(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); } 
# 189
__nv_bfloat16(int val) { (__x) = (__int2bfloat16_rn(val).__x); } 
# 190
__nv_bfloat16(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); } 
# 191
__nv_bfloat16(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); } 
# 192
__nv_bfloat16(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); } 
# 195
operator short() const { return __bfloat162short_rz(*this); } 
# 196
__nv_bfloat16 &operator=(short val) { (__x) = (__short2bfloat16_rn(val).__x); return *this; } 
# 198
operator unsigned short() const { return __bfloat162ushort_rz(*this); } 
# 199
__nv_bfloat16 &operator=(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); return *this; } 
# 201
operator int() const { return __bfloat162int_rz(*this); } 
# 202
__nv_bfloat16 &operator=(int val) { (__x) = (__int2bfloat16_rn(val).__x); return *this; } 
# 204
operator unsigned() const { return __bfloat162uint_rz(*this); } 
# 205
__nv_bfloat16 &operator=(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); return *this; } 
# 207
operator long long() const { return __bfloat162ll_rz(*this); } 
# 208
__nv_bfloat16 &operator=(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); return *this; } 
# 210
operator unsigned long long() const { return __bfloat162ull_rz(*this); } 
# 211
__nv_bfloat16 &operator=(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); return *this; } 
# 214
operator bool() const { return ((__x) & 32767) != 0; } 
# 217
}; 
# 225
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 225
{ return __hadd(lh, rh); } 
#endif
# 226 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 226
{ return __hsub(lh, rh); } 
#endif
# 227 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator*(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 227
{ return __hmul(lh, rh); } 
#endif
# 228 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator/(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 228
{ return __hdiv(lh, rh); } 
#endif
# 230 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator+=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 230
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 231 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator-=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 231
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 232 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator*=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 232
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 233 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator/=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 233
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 236 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator++(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 236
{ __nv_bfloat16_raw one; (one.x) = (16256); (h += one); return h; } 
#endif
# 237 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator--(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 237
{ __nv_bfloat16_raw one; (one.x) = (16256); (h -= one); return h; } 
#endif
# 238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator++(__nv_bfloat16 &h, const int ignored) 
# 239
{int volatile ___ = 1;(void)h;(void)ignored;
# 248
::exit(___);}
#if 0
# 239
{ 
# 241
static_cast< void>(ignored); 
# 243
const __nv_bfloat16 ret = h; 
# 244
__nv_bfloat16_raw one; 
# 245
(one.x) = (16256); 
# 246
(h += one); 
# 247
return ret; 
# 248
} 
#endif
# 249 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator--(__nv_bfloat16 &h, const int ignored) 
# 250
{int volatile ___ = 1;(void)h;(void)ignored;
# 259
::exit(___);}
#if 0
# 250
{ 
# 252
static_cast< void>(ignored); 
# 254
const __nv_bfloat16 ret = h; 
# 255
__nv_bfloat16_raw one; 
# 256
(one.x) = (16256); 
# 257
(h -= one); 
# 258
return ret; 
# 259
} 
#endif
# 261 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 261
{ return h; } 
#endif
# 262 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 262
{ return __hneg(h); } 
#endif
# 265 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 265
{ return __heq(lh, rh); } 
#endif
# 266 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 266
{ return __hneu(lh, rh); } 
#endif
# 267 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 267
{ return __hgt(lh, rh); } 
#endif
# 268 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 268
{ return __hlt(lh, rh); } 
#endif
# 269 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 269
{ return __hge(lh, rh); } 
#endif
# 270 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 270
{ return __hle(lh, rh); } 
#endif
# 276 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(4))) __nv_bfloat162 { 
# 277
__nv_bfloat16 x; 
# 278
__nv_bfloat16 y; 
# 283
__nv_bfloat162() = default;
# 284
__nv_bfloat162(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 285
__nv_bfloat162 &operator=(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 289
__nv_bfloat162(const __nv_bfloat16 &a, const __nv_bfloat16 &b) : x(a), y(b) { } 
# 290
__nv_bfloat162(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 291
__nv_bfloat162 &operator=(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 294
__nv_bfloat162(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 295
__nv_bfloat162 &operator=(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 296
operator __nv_bfloat162_raw() const { __nv_bfloat162_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 297
}; 
# 304
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 304
{ return __hadd2(lh, rh); } 
#endif
# 305 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 305
{ return __hsub2(lh, rh); } 
#endif
# 306 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator*(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 306
{ return __hmul2(lh, rh); } 
#endif
# 307 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator/(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 307
{ return __h2div(lh, rh); } 
#endif
# 309 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator+=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 309
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator-=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 310
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 311 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator*=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 311
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 312 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator/=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 312
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 314 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator++(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 314
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hadd2(h, one))); return h; } 
#endif
# 315 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator--(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 315
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hsub2(h, one))); return h; } 
#endif
# 316 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator++(__nv_bfloat162 &h, const int ignored) 
# 317
{int volatile ___ = 1;(void)h;(void)ignored;
# 327
::exit(___);}
#if 0
# 317
{ 
# 319
static_cast< void>(ignored); 
# 321
const __nv_bfloat162 ret = h; 
# 322
__nv_bfloat162_raw one; 
# 323
(one.x) = (16256); 
# 324
(one.y) = (16256); 
# 325
(h = (__hadd2(h, one))); 
# 326
return ret; 
# 327
} 
#endif
# 328 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator--(__nv_bfloat162 &h, const int ignored) 
# 329
{int volatile ___ = 1;(void)h;(void)ignored;
# 339
::exit(___);}
#if 0
# 329
{ 
# 331
static_cast< void>(ignored); 
# 333
const __nv_bfloat162 ret = h; 
# 334
__nv_bfloat162_raw one; 
# 335
(one.x) = (16256); 
# 336
(one.y) = (16256); 
# 337
(h = (__hsub2(h, one))); 
# 338
return ret; 
# 339
} 
#endif
# 340 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 340
{ return h; } 
#endif
# 341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 341
{ return __hneg2(h); } 
#endif
# 343 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 343
{ return __hbeq2(lh, rh); } 
#endif
# 344 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 344
{ return __hbneu2(lh, rh); } 
#endif
# 345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 345
{ return __hbgt2(lh, rh); } 
#endif
# 346 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 346
{ return __hblt2(lh, rh); } 
#endif
# 347 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 347
{ return __hbge2(lh, rh); } 
#endif
# 348 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 348
{ return __hble2(lh, rh); } 
#endif
# 361 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
#pragma GCC diagnostic pop
# 368
static inline unsigned short __internal_float2bfloat16(const float f, unsigned &sign, unsigned &remainder) 
# 369
{ 
# 370
unsigned x; 
# 375
(void)memcpy(&x, &f, sizeof f); 
# 380
if ((x & 2147483647U) > 2139095040U) { 
# 381
sign = 0U; 
# 382
remainder = 0U; 
# 383
return static_cast< unsigned short>(32767U); 
# 384
}  
# 385
sign = (x >> 31U); 
# 386
remainder = (x << 16U); 
# 387
return static_cast< unsigned short>(x >> 16U); 
# 388
} 
# 390
static inline __nv_bfloat16 __double2bfloat16(const double x) 
# 391
{ 
# 392
float f = static_cast< float>(x); 
# 393
const double d = static_cast< double>(f); 
# 394
unsigned u; 
# 399
(void)memcpy(&u, &f, sizeof f); 
# 403
bool x_is_not_nan = (u << ((unsigned)1U)) <= ((unsigned)4278190080U); 
# 406
if ((x > (0.0)) && (d > x)) { 
# 407
u--; 
# 408
}  
# 409
if ((x < (0.0)) && (d < x)) { 
# 410
u--; 
# 411
}  
# 412
if ((d != x) && x_is_not_nan) { 
# 413
u |= 1U; 
# 414
}  
# 419
(void)memcpy(&f, &u, sizeof f); 
# 424
return __float2bfloat16(f); 
# 425
} 
# 427
static inline __nv_bfloat16 __float2bfloat16(const float a) 
# 428
{ 
# 429
__nv_bfloat16 val; 
# 433
__nv_bfloat16_raw r; 
# 434
unsigned sign = 0U; 
# 435
unsigned remainder = 0U; 
# 436
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 437
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 438
(r.x)++; 
# 439
}  
# 440
(val = r); 
# 442
return val; 
# 443
} 
# 444
static inline __nv_bfloat16 __float2bfloat16_rn(const float a) 
# 445
{ 
# 446
__nv_bfloat16 val; 
# 450
__nv_bfloat16_raw r; 
# 451
unsigned sign = 0U; 
# 452
unsigned remainder = 0U; 
# 453
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 454
if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { 
# 455
(r.x)++; 
# 456
}  
# 457
(val = r); 
# 459
return val; 
# 460
} 
# 461
static inline __nv_bfloat16 __float2bfloat16_rz(const float a) 
# 462
{ 
# 463
__nv_bfloat16 val; 
# 467
__nv_bfloat16_raw r; 
# 468
unsigned sign = 0U; 
# 469
unsigned remainder = 0U; 
# 470
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 471
(val = r); 
# 473
return val; 
# 474
} 
# 475
static inline __nv_bfloat16 __float2bfloat16_rd(const float a) 
# 476
{ 
# 477
__nv_bfloat16 val; 
# 478
__nv_bfloat16_raw r; 
# 479
unsigned sign = 0U; 
# 480
unsigned remainder = 0U; 
# 481
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 482
if ((remainder != 0U) && (sign != 0U)) { 
# 483
(r.x)++; 
# 484
}  
# 485
(val = r); 
# 486
return val; 
# 487
} 
# 488
static inline __nv_bfloat16 __float2bfloat16_ru(const float a) 
# 489
{ 
# 490
__nv_bfloat16 val; 
# 491
__nv_bfloat16_raw r; 
# 492
unsigned sign = 0U; 
# 493
unsigned remainder = 0U; 
# 494
(r.x) = __internal_float2bfloat16(a, sign, remainder); 
# 495
if ((remainder != 0U) && (sign == 0U)) { 
# 496
(r.x)++; 
# 497
}  
# 498
(val = r); 
# 499
return val; 
# 500
} 
# 501
static inline __nv_bfloat162 __float2bfloat162_rn(const float a) 
# 502
{ 
# 503
__nv_bfloat162 val; 
# 509
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(a))); 
# 511
return val; 
# 512
} 
# 513
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b) 
# 514
{ 
# 515
__nv_bfloat162 val; 
# 522
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(b))); 
# 524
return val; 
# 525
} 
# 527
static inline float __internal_bfloat162float(const unsigned short h) 
# 528
{ 
# 529
float f; 
# 533
unsigned u = (static_cast< unsigned>(h)) << 16; 
# 535
(void)memcpy(&f, &u, sizeof f); 
# 540
return f; 
# 541
} 
# 543
static inline float __bfloat162float(const __nv_bfloat16 a) 
# 544
{ 
# 545
return __internal_bfloat162float(((__nv_bfloat16_raw)a).x); 
# 546
} 
# 547
static inline float __low2float(const __nv_bfloat162 a) 
# 548
{ 
# 549
return __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 550
} 
# 552
static inline float __high2float(const __nv_bfloat162 a) 
# 553
{ 
# 554
return __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 555
} 
# 560
static inline __nv_bfloat162 make_bfloat162(const __nv_bfloat16 x, const __nv_bfloat16 y) 
# 561
{ 
# 562
__nv_bfloat162 t; (t.x) = x; (t.y) = y; return t; 
# 563
} 
# 568
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a) 
# 569
{ 
# 570
__nv_bfloat162 val = __floats2bfloat162_rn(a.x, a.y); 
# 571
return val; 
# 572
} 
# 573
static inline float2 __bfloat1622float2(const __nv_bfloat162 a) 
# 574
{ 
# 575
float hi_float; 
# 576
float lo_float; 
# 577
lo_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 578
hi_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 579
return make_float2(lo_float, hi_float); 
# 580
} 
# 581
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h) 
# 582
{int volatile ___ = 1;(void)h;
# 584
::exit(___);}
#if 0
# 582
{ 
# 583
return __float2int_rn(__bfloat162float(h)); 
# 584
} 
#endif
# 585 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline int __bfloat162int_rz(const __nv_bfloat16 h) 
# 586
{ 
# 587
const float f = __bfloat162float(h); 
# 588
int i; 
# 589
i = (static_cast< int>(f)); 
# 591
const int max_val = ((int)2147483647U); 
# 592
const int min_val = ((int)2147483648U); 
# 593
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 595
if (bits > ((unsigned short)65280U)) { 
# 597
i = 0; 
# 598
} else { if (f >= (static_cast< float>(max_val))) { 
# 600
i = max_val; 
# 601
} else { if (f < (static_cast< float>(min_val))) { 
# 603
i = min_val; 
# 604
}  }  }  
# 606
return i; 
# 607
} 
# 608
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h) 
# 609
{int volatile ___ = 1;(void)h;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
return __float2int_rd(__bfloat162float(h)); 
# 611
} 
#endif
# 612 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h) 
# 613
{int volatile ___ = 1;(void)h;
# 615
::exit(___);}
#if 0
# 613
{ 
# 614
return __float2int_ru(__bfloat162float(h)); 
# 615
} 
#endif
# 616 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i) 
# 617
{ 
# 627 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); 
# 628
return __double2bfloat16(d); 
# 630
} 
# 631
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i) 
# 632
{int volatile ___ = 1;(void)i;
# 634
::exit(___);}
#if 0
# 632
{ 
# 633
return __float2bfloat16_rz(__int2float_rz(i)); 
# 634
} 
#endif
# 635 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i) 
# 636
{int volatile ___ = 1;(void)i;
# 638
::exit(___);}
#if 0
# 636
{ 
# 637
return __float2bfloat16_rd(__int2float_rd(i)); 
# 638
} 
#endif
# 639 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i) 
# 640
{int volatile ___ = 1;(void)i;
# 642
::exit(___);}
#if 0
# 640
{ 
# 641
return __float2bfloat16_ru(__int2float_ru(i)); 
# 642
} 
#endif
# 644 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h) 
# 645
{int volatile ___ = 1;(void)h;
# 652
::exit(___);}
#if 0
# 645
{ 
# 646
short val; 
# 647
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 651
return val; 
# 652
} 
#endif
# 653 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline short __bfloat162short_rz(const __nv_bfloat16 h) 
# 654
{ 
# 655
short val; 
# 662
const float f = __bfloat162float(h); 
# 663
val = (static_cast< short>(f)); 
# 664
const short max_val = ((short)32767U); 
# 665
const short min_val = ((short)32768U); 
# 666
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 668
if (bits > ((unsigned short)65280U)) { 
# 670
val = (0); 
# 671
} else { if (f > (static_cast< float>(max_val))) { 
# 673
val = max_val; 
# 674
} else { if (f < (static_cast< float>(min_val))) { 
# 676
val = min_val; 
# 677
}  }  }  
# 679
return val; 
# 680
} 
# 681
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h) 
# 682
{int volatile ___ = 1;(void)h;
# 689
::exit(___);}
#if 0
# 682
{ 
# 683
short val; 
# 684
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 688
return val; 
# 689
} 
#endif
# 690 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h) 
# 691
{int volatile ___ = 1;(void)h;
# 698
::exit(___);}
#if 0
# 691
{ 
# 692
short val; 
# 693
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 697
return val; 
# 698
} 
#endif
# 699 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i) 
# 700
{ 
# 701
const float f = static_cast< float>(i); 
# 702
return __float2bfloat16_rn(f); 
# 703
} 
# 704
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i) 
# 705
{int volatile ___ = 1;(void)i;
# 707
::exit(___);}
#if 0
# 705
{ 
# 706
return __float2bfloat16_rz(__int2float_rz(static_cast< int>(i))); 
# 707
} 
#endif
# 708 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i) 
# 709
{int volatile ___ = 1;(void)i;
# 711
::exit(___);}
#if 0
# 709
{ 
# 710
return __float2bfloat16_rd(__int2float_rd(static_cast< int>(i))); 
# 711
} 
#endif
# 712 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i) 
# 713
{int volatile ___ = 1;(void)i;
# 715
::exit(___);}
#if 0
# 713
{ 
# 714
return __float2bfloat16_ru(__int2float_ru(static_cast< int>(i))); 
# 715
} 
#endif
# 717 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h) 
# 718
{int volatile ___ = 1;(void)h;
# 720
::exit(___);}
#if 0
# 718
{ 
# 719
return __float2uint_rn(__bfloat162float(h)); 
# 720
} 
#endif
# 721 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h) 
# 722
{ 
# 723
const float f = __bfloat162float(h); 
# 724
unsigned i; 
# 725
i = (static_cast< unsigned>(f)); 
# 727
const unsigned max_val = 4294967295U; 
# 728
const unsigned min_val = 0U; 
# 729
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 731
if (bits > ((unsigned short)65280U)) { 
# 733
i = 0U; 
# 734
} else { if (f >= (static_cast< float>(max_val))) { 
# 736
i = max_val; 
# 737
} else { if (f < (static_cast< float>(min_val))) { 
# 739
i = min_val; 
# 740
}  }  }  
# 742
return i; 
# 743
} 
# 744
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h) 
# 745
{int volatile ___ = 1;(void)h;
# 747
::exit(___);}
#if 0
# 745
{ 
# 746
return __float2uint_rd(__bfloat162float(h)); 
# 747
} 
#endif
# 748 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h) 
# 749
{int volatile ___ = 1;(void)h;
# 751
::exit(___);}
#if 0
# 749
{ 
# 750
return __float2uint_ru(__bfloat162float(h)); 
# 751
} 
#endif
# 752 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i) 
# 753
{ 
# 763 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); 
# 764
return __double2bfloat16(d); 
# 766
} 
# 767
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i) 
# 768
{int volatile ___ = 1;(void)i;
# 770
::exit(___);}
#if 0
# 768
{ 
# 769
return __float2bfloat16_rz(__uint2float_rz(i)); 
# 770
} 
#endif
# 771 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i) 
# 772
{int volatile ___ = 1;(void)i;
# 774
::exit(___);}
#if 0
# 772
{ 
# 773
return __float2bfloat16_rd(__uint2float_rd(i)); 
# 774
} 
#endif
# 775 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i) 
# 776
{int volatile ___ = 1;(void)i;
# 778
::exit(___);}
#if 0
# 776
{ 
# 777
return __float2bfloat16_ru(__uint2float_ru(i)); 
# 778
} 
#endif
# 780 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h) 
# 781
{int volatile ___ = 1;(void)h;
# 788
::exit(___);}
#if 0
# 781
{ 
# 782
unsigned short val; 
# 783
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 787
return val; 
# 788
} 
#endif
# 789 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h) 
# 790
{ 
# 791
unsigned short val; 
# 798
const float f = __bfloat162float(h); 
# 799
val = (static_cast< unsigned short>(f)); 
# 800
const unsigned short max_val = (65535U); 
# 801
const unsigned short min_val = (0U); 
# 802
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 804
if (bits > ((unsigned short)65280U)) { 
# 806
val = (0U); 
# 807
} else { if (f > (static_cast< float>(max_val))) { 
# 809
val = max_val; 
# 810
} else { if (f < (static_cast< float>(min_val))) { 
# 812
val = min_val; 
# 813
}  }  }  
# 815
return val; 
# 816
} 
# 817
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h) 
# 818
{int volatile ___ = 1;(void)h;
# 825
::exit(___);}
#if 0
# 818
{ 
# 819
unsigned short val; 
# 820
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 824
return val; 
# 825
} 
#endif
# 826 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h) 
# 827
{int volatile ___ = 1;(void)h;
# 834
::exit(___);}
#if 0
# 827
{ 
# 828
unsigned short val; 
# 829
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 833
return val; 
# 834
} 
#endif
# 835 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i) 
# 836
{ 
# 837
const float f = static_cast< float>(i); 
# 838
return __float2bfloat16_rn(f); 
# 839
} 
# 840
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i) 
# 841
{int volatile ___ = 1;(void)i;
# 843
::exit(___);}
#if 0
# 841
{ 
# 842
return __float2bfloat16_rz(__uint2float_rz(static_cast< unsigned>(i))); 
# 843
} 
#endif
# 844 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i) 
# 845
{int volatile ___ = 1;(void)i;
# 847
::exit(___);}
#if 0
# 845
{ 
# 846
return __float2bfloat16_rd(__uint2float_rd(static_cast< unsigned>(i))); 
# 847
} 
#endif
# 848 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i) 
# 849
{int volatile ___ = 1;(void)i;
# 851
::exit(___);}
#if 0
# 849
{ 
# 850
return __float2bfloat16_ru(__uint2float_ru(static_cast< unsigned>(i))); 
# 851
} 
#endif
# 853 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h) 
# 854
{int volatile ___ = 1;(void)h;
# 856
::exit(___);}
#if 0
# 854
{ 
# 855
return __float2ull_rn(__bfloat162float(h)); 
# 856
} 
#endif
# 857 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h) 
# 858
{ 
# 859
const float f = __bfloat162float(h); 
# 860
unsigned long long i; 
# 861
i = (static_cast< unsigned long long>(f)); 
# 863
const unsigned long long max_val = 18446744073709551615ULL; 
# 864
const unsigned long long min_val = 0ULL; 
# 865
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 867
if (bits > ((unsigned short)65280U)) { 
# 869
i = 9223372036854775808ULL; 
# 870
} else { if (f >= (static_cast< float>(max_val))) { 
# 872
i = max_val; 
# 873
} else { if (f < (static_cast< float>(min_val))) { 
# 875
i = min_val; 
# 876
}  }  }  
# 878
return i; 
# 879
} 
# 880
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h) 
# 881
{int volatile ___ = 1;(void)h;
# 883
::exit(___);}
#if 0
# 881
{ 
# 882
return __float2ull_rd(__bfloat162float(h)); 
# 883
} 
#endif
# 884 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h) 
# 885
{int volatile ___ = 1;(void)h;
# 887
::exit(___);}
#if 0
# 885
{ 
# 886
return __float2ull_ru(__bfloat162float(h)); 
# 887
} 
#endif
# 888 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i) 
# 889
{ 
# 899 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); 
# 900
const unsigned long long uf = static_cast< unsigned long long>(f); 
# 901
unsigned u; 
# 906
(void)memcpy(&u, &f, sizeof f); 
# 913
if (uf > i) { 
# 914
u--; 
# 915
}  
# 916
if (uf != i) { 
# 917
u |= 1U; 
# 918
}  
# 923
(void)memcpy(&f, &u, sizeof f); 
# 928
return __float2bfloat16_rn(f); 
# 930
} 
# 931
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i) 
# 932
{int volatile ___ = 1;(void)i;
# 934
::exit(___);}
#if 0
# 932
{ 
# 933
return __float2bfloat16_rz(__ull2float_rz(i)); 
# 934
} 
#endif
# 935 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i) 
# 936
{int volatile ___ = 1;(void)i;
# 938
::exit(___);}
#if 0
# 936
{ 
# 937
return __float2bfloat16_rd(__ull2float_rd(i)); 
# 938
} 
#endif
# 939 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i) 
# 940
{int volatile ___ = 1;(void)i;
# 942
::exit(___);}
#if 0
# 940
{ 
# 941
return __float2bfloat16_ru(__ull2float_ru(i)); 
# 942
} 
#endif
# 943 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h) 
# 944
{int volatile ___ = 1;(void)h;
# 946
::exit(___);}
#if 0
# 944
{ 
# 945
return __float2ll_rn(__bfloat162float(h)); 
# 946
} 
#endif
# 947 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h) 
# 948
{ 
# 949
const float f = __bfloat162float(h); 
# 950
long long i; 
# 951
i = (static_cast< long long>(f)); 
# 953
const long long max_val = ((long long)9223372036854775807ULL); 
# 954
const long long min_val = ((long long)9223372036854775808ULL); 
# 955
const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); 
# 957
if (bits > ((unsigned short)65280U)) { 
# 959
i = min_val; 
# 960
} else { if (f >= (static_cast< float>(max_val))) { 
# 962
i = max_val; 
# 963
} else { if (f < (static_cast< float>(min_val))) { 
# 965
i = min_val; 
# 966
}  }  }  
# 968
return i; 
# 969
} 
# 970
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h) 
# 971
{int volatile ___ = 1;(void)h;
# 973
::exit(___);}
#if 0
# 971
{ 
# 972
return __float2ll_rd(__bfloat162float(h)); 
# 973
} 
#endif
# 974 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h) 
# 975
{int volatile ___ = 1;(void)h;
# 977
::exit(___);}
#if 0
# 975
{ 
# 976
return __float2ll_ru(__bfloat162float(h)); 
# 977
} 
#endif
# 978 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i) 
# 979
{ 
# 989 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); 
# 990
const long long lf = static_cast< long long>(f); 
# 991
unsigned u; 
# 996
(void)memcpy(&u, &f, sizeof f); 
# 1001
if ((f > (0.0F)) && (lf > i)) { 
# 1002
u--; 
# 1003
}  
# 1004
if ((f < (0.0F)) && (lf < i)) { 
# 1005
u--; 
# 1006
}  
# 1007
if (lf != i) { 
# 1008
u |= 1U; 
# 1009
}  
# 1014
(void)memcpy(&f, &u, sizeof f); 
# 1019
return __float2bfloat16_rn(f); 
# 1021
} 
# 1022
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i) 
# 1023
{int volatile ___ = 1;(void)i;
# 1025
::exit(___);}
#if 0
# 1023
{ 
# 1024
return __float2bfloat16_rz(__ll2float_rz(i)); 
# 1025
} 
#endif
# 1026 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i) 
# 1027
{int volatile ___ = 1;(void)i;
# 1029
::exit(___);}
#if 0
# 1027
{ 
# 1028
return __float2bfloat16_rd(__ll2float_rd(i)); 
# 1029
} 
#endif
# 1030 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i) 
# 1031
{int volatile ___ = 1;(void)i;
# 1033
::exit(___);}
#if 0
# 1031
{ 
# 1032
return __float2bfloat16_ru(__ll2float_ru(i)); 
# 1033
} 
#endif
# 1035 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h) 
# 1036
{int volatile ___ = 1;(void)h;
# 1038
::exit(___);}
#if 0
# 1036
{ 
# 1037
return __float2bfloat16_rz(truncf(__bfloat162float(h))); 
# 1038
} 
#endif
# 1039 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h) 
# 1040
{int volatile ___ = 1;(void)h;
# 1042
::exit(___);}
#if 0
# 1040
{ 
# 1041
return __float2bfloat16_ru(ceilf(__bfloat162float(h))); 
# 1042
} 
#endif
# 1043 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h) 
# 1044
{int volatile ___ = 1;(void)h;
# 1046
::exit(___);}
#if 0
# 1044
{ 
# 1045
return __float2bfloat16_rd(floorf(__bfloat162float(h))); 
# 1046
} 
#endif
# 1047 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h) 
# 1048
{int volatile ___ = 1;(void)h;
# 1050
::exit(___);}
#if 0
# 1048
{ 
# 1049
return __float2bfloat16_rn(rintf(__bfloat162float(h))); 
# 1050
} 
#endif
# 1052 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h) 
# 1053
{int volatile ___ = 1;(void)h;
# 1057
::exit(___);}
#if 0
# 1053
{ 
# 1054
const __nv_bfloat16 low = __float2bfloat16_rz(truncf(__low2float(h))); 
# 1055
const __nv_bfloat16 high = __float2bfloat16_rz(truncf(__high2float(h))); 
# 1056
return __nv_bfloat162(low, high); 
# 1057
} 
#endif
# 1058 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h) 
# 1059
{int volatile ___ = 1;(void)h;
# 1063
::exit(___);}
#if 0
# 1059
{ 
# 1060
const __nv_bfloat16 low = __float2bfloat16_ru(ceilf(__low2float(h))); 
# 1061
const __nv_bfloat16 high = __float2bfloat16_ru(ceilf(__high2float(h))); 
# 1062
return __nv_bfloat162(low, high); 
# 1063
} 
#endif
# 1064 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h) 
# 1065
{int volatile ___ = 1;(void)h;
# 1069
::exit(___);}
#if 0
# 1065
{ 
# 1066
const __nv_bfloat16 low = __float2bfloat16_rd(floorf(__low2float(h))); 
# 1067
const __nv_bfloat16 high = __float2bfloat16_rd(floorf(__high2float(h))); 
# 1068
return __nv_bfloat162(low, high); 
# 1069
} 
#endif
# 1071 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h) 
# 1072
{int volatile ___ = 1;(void)h;
# 1074
::exit(___);}
#if 0
# 1072
{ 
# 1073
return __halves2bfloat162(hrint(__low2bfloat16(h)), hrint(__high2bfloat16(h))); 
# 1074
} 
#endif
# 1075 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1076
{int volatile ___ = 1;(void)a;(void)b;
# 1083
::exit(___);}
#if 0
# 1076
{ 
# 1077
__nv_bfloat162 val; 
# 1078
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1082
return val; 
# 1083
} 
#endif
# 1084 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1085
{int volatile ___ = 1;(void)a;(void)b;
# 1092
::exit(___);}
#if 0
# 1085
{ 
# 1086
__nv_bfloat162 val; 
# 1087
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1091
return val; 
# 1092
} 
#endif
# 1093 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a) 
# 1094
{int volatile ___ = 1;(void)a;
# 1100
::exit(___);}
#if 0
# 1094
{ 
# 1095
__nv_bfloat16 ret; 
# 1096
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1099
return ret; 
# 1100
} 
#endif
# 1101 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a) 
# 1102
{int volatile ___ = 1;(void)a;
# 1112
::exit(___);}
#if 0
# 1102
{ 
# 1103
int retval; 
# 1104
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 65408U) { 
# 1105
retval = (-1); 
# 1106
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 32640U) { 
# 1107
retval = 1; 
# 1108
} else { 
# 1109
retval = 0; 
# 1110
}  }  
# 1111
return retval; 
# 1112
} 
#endif
# 1113 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a) 
# 1114
{int volatile ___ = 1;(void)a;
# 1120
::exit(___);}
#if 0
# 1114
{ 
# 1115
__nv_bfloat162 val; 
# 1116
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1119
return val; 
# 1120
} 
#endif
# 1121 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a) 
# 1122
{int volatile ___ = 1;(void)a;
# 1128
::exit(___);}
#if 0
# 1122
{ 
# 1123
__nv_bfloat162 val; 
# 1124
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1127
return val; 
# 1128
} 
#endif
# 1129 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a) 
# 1130
{int volatile ___ = 1;(void)a;
# 1136
::exit(___);}
#if 0
# 1130
{ 
# 1131
__nv_bfloat16 ret; 
# 1132
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1135
return ret; 
# 1136
} 
#endif
# 1137 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1138
{int volatile ___ = 1;(void)a;(void)b;
# 1143
::exit(___);}
#if 0
# 1138
{ 
# 1139
__nv_bfloat162 val; 
# 1140
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1142
return val; 
# 1143
} 
#endif
# 1144 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a) 
# 1145
{int volatile ___ = 1;(void)a;
# 1150
::exit(___);}
#if 0
# 1145
{ 
# 1146
__nv_bfloat162 val; 
# 1147
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1149
return val; 
# 1150
} 
#endif
# 1151 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a) 
# 1152
{int volatile ___ = 1;(void)a;
# 1158
::exit(___);}
#if 0
# 1152
{ 
# 1153
__nv_bfloat162 val; 
# 1154
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1157
return val; 
# 1158
} 
#endif
# 1159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h) 
# 1160
{int volatile ___ = 1;(void)h;
# 1162
::exit(___);}
#if 0
# 1160
{ 
# 1161
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1162
} 
#endif
# 1163 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h) 
# 1164
{int volatile ___ = 1;(void)h;
# 1166
::exit(___);}
#if 0
# 1164
{ 
# 1165
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1166
} 
#endif
# 1167 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i) 
# 1168
{int volatile ___ = 1;(void)i;
# 1172
::exit(___);}
#if 0
# 1168
{ 
# 1169
__nv_bfloat16 h; 
# 1170
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1171
return h; 
# 1172
} 
#endif
# 1173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i) 
# 1174
{int volatile ___ = 1;(void)i;
# 1178
::exit(___);}
#if 0
# 1174
{ 
# 1175
__nv_bfloat16 h; 
# 1176
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1177
return h; 
# 1178
} 
#endif
# 1190 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1191
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1196
::exit(___);}
#if 0
# 1191
{ 
# 1192
unsigned warp_size; 
# 1193
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1194
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1195
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1196
} 
#endif
# 1197 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1198
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1203
::exit(___);}
#if 0
# 1198
{ 
# 1199
unsigned warp_size; 
# 1200
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1201
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1202
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1203
} 
#endif
# 1204 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1205
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1210
::exit(___);}
#if 0
# 1205
{ 
# 1206
unsigned warp_size; 
# 1207
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1208
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1209
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1210
} 
#endif
# 1211 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1212
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1217
::exit(___);}
#if 0
# 1212
{ 
# 1213
unsigned warp_size; 
# 1214
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1215
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1216
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1217
} 
#endif
# 1221 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1222
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1226
::exit(___);}
#if 0
# 1222
{ 
# 1223
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1224
const __nv_bfloat162 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1225
return __low2bfloat16(temp2); 
# 1226
} 
#endif
# 1227 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1228
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1232
::exit(___);}
#if 0
# 1228
{ 
# 1229
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1230
const __nv_bfloat162 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1231
return __low2bfloat16(temp2); 
# 1232
} 
#endif
# 1233 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1234
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1238
::exit(___);}
#if 0
# 1234
{ 
# 1235
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1236
const __nv_bfloat162 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1237
return __low2bfloat16(temp2); 
# 1238
} 
#endif
# 1239 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1240
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1244
::exit(___);}
#if 0
# 1240
{ 
# 1241
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1242
const __nv_bfloat162 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1243
return __low2bfloat16(temp2); 
# 1244
} 
#endif
# 1256 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr) 
# 1257
{int volatile ___ = 1;(void)ptr;
# 1261
::exit(___);}
#if 0
# 1257
{ 
# 1258
__nv_bfloat162 ret; 
# 1259
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1260
return ret; 
# 1261
} 
#endif
# 1262 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr) 
# 1263
{int volatile ___ = 1;(void)ptr;
# 1267
::exit(___);}
#if 0
# 1263
{ 
# 1264
__nv_bfloat16 ret; 
# 1265
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1266
return ret; 
# 1267
} 
#endif
# 1268 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr) 
# 1269
{int volatile ___ = 1;(void)ptr;
# 1273
::exit(___);}
#if 0
# 1269
{ 
# 1270
__nv_bfloat162 ret; 
# 1271
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1272
return ret; 
# 1273
} 
#endif
# 1274 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr) 
# 1275
{int volatile ___ = 1;(void)ptr;
# 1279
::exit(___);}
#if 0
# 1275
{ 
# 1276
__nv_bfloat16 ret; 
# 1277
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1278
return ret; 
# 1279
} 
#endif
# 1280 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr) 
# 1281
{int volatile ___ = 1;(void)ptr;
# 1285
::exit(___);}
#if 0
# 1281
{ 
# 1282
__nv_bfloat162 ret; 
# 1283
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1284
return ret; 
# 1285
} 
#endif
# 1286 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr) 
# 1287
{int volatile ___ = 1;(void)ptr;
# 1291
::exit(___);}
#if 0
# 1287
{ 
# 1288
__nv_bfloat16 ret; 
# 1289
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1290
return ret; 
# 1291
} 
#endif
# 1292 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr) 
# 1293
{int volatile ___ = 1;(void)ptr;
# 1297
::exit(___);}
#if 0
# 1293
{ 
# 1294
__nv_bfloat162 ret; 
# 1295
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1296
return ret; 
# 1297
} 
#endif
# 1298 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr) 
# 1299
{int volatile ___ = 1;(void)ptr;
# 1303
::exit(___);}
#if 0
# 1299
{ 
# 1300
__nv_bfloat16 ret; 
# 1301
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1302
return ret; 
# 1303
} 
#endif
# 1304 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr) 
# 1305
{int volatile ___ = 1;(void)ptr;
# 1309
::exit(___);}
#if 0
# 1305
{ 
# 1306
__nv_bfloat162 ret; 
# 1307
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1308
return ret; 
# 1309
} 
#endif
# 1310 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr) 
# 1311
{int volatile ___ = 1;(void)ptr;
# 1315
::exit(___);}
#if 0
# 1311
{ 
# 1312
__nv_bfloat16 ret; 
# 1313
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1314
return ret; 
# 1315
} 
#endif
# 1316 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr) 
# 1317
{int volatile ___ = 1;(void)ptr;
# 1321
::exit(___);}
#if 0
# 1317
{ 
# 1318
__nv_bfloat162 ret; 
# 1319
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1320
return ret; 
# 1321
} 
#endif
# 1322 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr) 
# 1323
{int volatile ___ = 1;(void)ptr;
# 1327
::exit(___);}
#if 0
# 1323
{ 
# 1324
__nv_bfloat16 ret; 
# 1325
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1326
return ret; 
# 1327
} 
#endif
# 1329 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1330
{int volatile ___ = 1;(void)ptr;(void)value;
# 1332
::exit(___);}
#if 0
# 1330
{ 
# 1331
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1332
} 
#endif
# 1333 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1334
{int volatile ___ = 1;(void)ptr;(void)value;
# 1336
::exit(___);}
#if 0
# 1334
{ 
# 1335
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1336
} 
#endif
# 1337 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1338
{int volatile ___ = 1;(void)ptr;(void)value;
# 1340
::exit(___);}
#if 0
# 1338
{ 
# 1339
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1340
} 
#endif
# 1341 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1342
{int volatile ___ = 1;(void)ptr;(void)value;
# 1344
::exit(___);}
#if 0
# 1342
{ 
# 1343
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1344
} 
#endif
# 1345 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1346
{int volatile ___ = 1;(void)ptr;(void)value;
# 1348
::exit(___);}
#if 0
# 1346
{ 
# 1347
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1348
} 
#endif
# 1349 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1350
{int volatile ___ = 1;(void)ptr;(void)value;
# 1352
::exit(___);}
#if 0
# 1350
{ 
# 1351
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1352
} 
#endif
# 1353 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1354
{int volatile ___ = 1;(void)ptr;(void)value;
# 1356
::exit(___);}
#if 0
# 1354
{ 
# 1355
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1356
} 
#endif
# 1357 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1358
{int volatile ___ = 1;(void)ptr;(void)value;
# 1360
::exit(___);}
#if 0
# 1358
{ 
# 1359
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1360
} 
#endif
# 1381 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1382
{int volatile ___ = 1;(void)a;(void)b;
# 1384
::exit(___);}
#if 0
# 1382
{ 
# 1383
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1384
} 
#endif
# 1385 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1386
{int volatile ___ = 1;(void)a;(void)b;
# 1388
::exit(___);}
#if 0
# 1386
{ 
# 1387
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1388
} 
#endif
# 1389 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1390
{int volatile ___ = 1;(void)a;(void)b;
# 1392
::exit(___);}
#if 0
# 1390
{ 
# 1391
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1392
} 
#endif
# 1393 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1394
{int volatile ___ = 1;(void)a;(void)b;
# 1396
::exit(___);}
#if 0
# 1394
{ 
# 1395
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1396
} 
#endif
# 1397 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1398
{int volatile ___ = 1;(void)a;(void)b;
# 1400
::exit(___);}
#if 0
# 1398
{ 
# 1399
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1400
} 
#endif
# 1401 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1402
{int volatile ___ = 1;(void)a;(void)b;
# 1404
::exit(___);}
#if 0
# 1402
{ 
# 1403
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1404
} 
#endif
# 1405 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1406
{int volatile ___ = 1;(void)a;(void)b;
# 1408
::exit(___);}
#if 0
# 1406
{ 
# 1407
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1408
} 
#endif
# 1409 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1410
{int volatile ___ = 1;(void)a;(void)b;
# 1412
::exit(___);}
#if 0
# 1410
{ 
# 1411
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1412
} 
#endif
# 1413 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1414
{int volatile ___ = 1;(void)a;(void)b;
# 1416
::exit(___);}
#if 0
# 1414
{ 
# 1415
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1416
} 
#endif
# 1417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1418
{int volatile ___ = 1;(void)a;(void)b;
# 1420
::exit(___);}
#if 0
# 1418
{ 
# 1419
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1420
} 
#endif
# 1421 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1422
{int volatile ___ = 1;(void)a;(void)b;
# 1424
::exit(___);}
#if 0
# 1422
{ 
# 1423
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1424
} 
#endif
# 1425 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1426
{int volatile ___ = 1;(void)a;(void)b;
# 1428
::exit(___);}
#if 0
# 1426
{ 
# 1427
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1428
} 
#endif
# 1443 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1444
{int volatile ___ = 1;(void)a;(void)b;
# 1446
::exit(___);}
#if 0
# 1444
{ 
# 1445
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1446
} 
#endif
# 1447 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1448
{int volatile ___ = 1;(void)a;(void)b;
# 1450
::exit(___);}
#if 0
# 1448
{ 
# 1449
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1450
} 
#endif
# 1451 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1452
{int volatile ___ = 1;(void)a;(void)b;
# 1454
::exit(___);}
#if 0
# 1452
{ 
# 1453
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1454
} 
#endif
# 1455 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1456
{int volatile ___ = 1;(void)a;(void)b;
# 1458
::exit(___);}
#if 0
# 1456
{ 
# 1457
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1458
} 
#endif
# 1459 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1460
{int volatile ___ = 1;(void)a;(void)b;
# 1462
::exit(___);}
#if 0
# 1460
{ 
# 1461
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1462
} 
#endif
# 1463 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1464
{int volatile ___ = 1;(void)a;(void)b;
# 1466
::exit(___);}
#if 0
# 1464
{ 
# 1465
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1466
} 
#endif
# 1467 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1468
{int volatile ___ = 1;(void)a;(void)b;
# 1470
::exit(___);}
#if 0
# 1468
{ 
# 1469
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1470
} 
#endif
# 1471 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1472
{int volatile ___ = 1;(void)a;(void)b;
# 1474
::exit(___);}
#if 0
# 1472
{ 
# 1473
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1474
} 
#endif
# 1475 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1476
{int volatile ___ = 1;(void)a;(void)b;
# 1478
::exit(___);}
#if 0
# 1476
{ 
# 1477
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1478
} 
#endif
# 1479 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1480
{int volatile ___ = 1;(void)a;(void)b;
# 1482
::exit(___);}
#if 0
# 1480
{ 
# 1481
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1482
} 
#endif
# 1483 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1484
{int volatile ___ = 1;(void)a;(void)b;
# 1486
::exit(___);}
#if 0
# 1484
{ 
# 1485
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1486
} 
#endif
# 1487 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1488
{int volatile ___ = 1;(void)a;(void)b;
# 1490
::exit(___);}
#if 0
# 1488
{ 
# 1489
{ unsigned val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; } 
# 1490
} 
#endif
# 1504 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1505
{int volatile ___ = 1;(void)a;(void)b;
# 1507
::exit(___);}
#if 0
# 1505
{ 
# 1506
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.eq.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1507
} 
#endif
# 1508 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1509
{int volatile ___ = 1;(void)a;(void)b;
# 1511
::exit(___);}
#if 0
# 1509
{ 
# 1510
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ne.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1511
} 
#endif
# 1512 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1513
{int volatile ___ = 1;(void)a;(void)b;
# 1515
::exit(___);}
#if 0
# 1513
{ 
# 1514
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.le.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1515
} 
#endif
# 1516 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1517
{int volatile ___ = 1;(void)a;(void)b;
# 1519
::exit(___);}
#if 0
# 1517
{ 
# 1518
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ge.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1519
} 
#endif
# 1520 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1521
{int volatile ___ = 1;(void)a;(void)b;
# 1523
::exit(___);}
#if 0
# 1521
{ 
# 1522
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.lt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1523
} 
#endif
# 1524 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1525
{int volatile ___ = 1;(void)a;(void)b;
# 1527
::exit(___);}
#if 0
# 1525
{ 
# 1526
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1527
} 
#endif
# 1528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1529
{int volatile ___ = 1;(void)a;(void)b;
# 1531
::exit(___);}
#if 0
# 1529
{ 
# 1530
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.equ.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1531
} 
#endif
# 1532 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1533
{int volatile ___ = 1;(void)a;(void)b;
# 1535
::exit(___);}
#if 0
# 1533
{ 
# 1534
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.neu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1535
} 
#endif
# 1536 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1537
{int volatile ___ = 1;(void)a;(void)b;
# 1539
::exit(___);}
#if 0
# 1537
{ 
# 1538
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.leu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1539
} 
#endif
# 1540 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1541
{int volatile ___ = 1;(void)a;(void)b;
# 1543
::exit(___);}
#if 0
# 1541
{ 
# 1542
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.geu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1543
} 
#endif
# 1544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1545
{int volatile ___ = 1;(void)a;(void)b;
# 1547
::exit(___);}
#if 0
# 1545
{ 
# 1546
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ltu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1547
} 
#endif
# 1548 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1549
{int volatile ___ = 1;(void)a;(void)b;
# 1551
::exit(___);}
#if 0
# 1549
{ 
# 1550
{ unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gtu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1551
} 
#endif
# 1573 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1574
{int volatile ___ = 1;(void)a;(void)b;
# 1581
::exit(___);}
#if 0
# 1574
{ 
# 1575
__nv_bfloat162 val; 
# 1576
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1580
return val; 
# 1581
} 
#endif
# 1582 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1583
{int volatile ___ = 1;(void)a;(void)b;
# 1590
::exit(___);}
#if 0
# 1583
{ 
# 1584
__nv_bfloat162 val; 
# 1585
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1589
return val; 
# 1590
} 
#endif
# 1591 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1592
{int volatile ___ = 1;(void)a;(void)b;
# 1599
::exit(___);}
#if 0
# 1592
{ 
# 1593
__nv_bfloat162 val; 
# 1594
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1598
return val; 
# 1599
} 
#endif
# 1600 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1601
{int volatile ___ = 1;(void)a;(void)b;
# 1608
::exit(___);}
#if 0
# 1601
{ 
# 1602
__nv_bfloat162 val; 
# 1603
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1607
return val; 
# 1608
} 
#endif
# 1609 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1610
{int volatile ___ = 1;(void)a;(void)b;
# 1617
::exit(___);}
#if 0
# 1610
{ 
# 1611
__nv_bfloat162 val; 
# 1612
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1616
return val; 
# 1617
} 
#endif
# 1618 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1619
{int volatile ___ = 1;(void)a;(void)b;
# 1626
::exit(___);}
#if 0
# 1619
{ 
# 1620
__nv_bfloat162 val; 
# 1621
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1625
return val; 
# 1626
} 
#endif
# 1627 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1628
{int volatile ___ = 1;(void)a;(void)b;
# 1638
::exit(___);}
#if 0
# 1628
{ 
# 1629
__nv_bfloat162 val; 
# 1630
__asm__("{.reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f,%1,one,%2;\n  max.bf16x2 f, f, zero" ";\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1637
return val; 
# 1638
} 
#endif
# 1639 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1640
{int volatile ___ = 1;(void)a;(void)b;
# 1651
::exit(___);}
#if 0
# 1640
{ 
# 1641
__nv_bfloat162 val; 
# 1642
__asm__("{.reg .b32 f, one, zero, mone;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mone, 0xbf80bf80U;\n  fma.rn.bf16x2 f" ",%2,mone,%1;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1650
return val; 
# 1651
} 
#endif
# 1652 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1653
{int volatile ___ = 1;(void)a;(void)b;
# 1664
::exit(___);}
#if 0
# 1653
{ 
# 1654
__nv_bfloat162 val; 
# 1655
__asm__("{.reg .b32 f, one, zero, mzero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mzero, 0x80008000U;\n  fma.rn.bf16x2" " f,%1,%2,mzero;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1663
return val; 
# 1664
} 
#endif
# 1665 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 1666
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1671
::exit(___);}
#if 0
# 1666
{ 
# 1667
__nv_bfloat162 val; 
# 1668
__asm__("{fma.rn.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 1670
return val; 
# 1671
} 
#endif
# 1672 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 1673
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1683
::exit(___);}
#if 0
# 1673
{ 
# 1674
__nv_bfloat162 val; 
# 1675
__asm__("{ .reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f, %1, %2, %3;\n  max.bf16x2 f, f, z" "ero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 1682
return val; 
# 1683
} 
#endif
# 1684 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b) {int volatile ___ = 1;(void)a;(void)b;
# 1698
::exit(___);}
#if 0
# 1684
{ 
# 1685
__nv_bfloat16 ha, hb; 
# 1687
ha = __low2bfloat16(a); 
# 1688
hb = __low2bfloat16(b); 
# 1690
const __nv_bfloat16 v1 = __hdiv(ha, hb); 
# 1692
ha = __high2bfloat16(a); 
# 1693
hb = __high2bfloat16(b); 
# 1695
const __nv_bfloat16 v2 = __hdiv(ha, hb); 
# 1697
return __halves2bfloat162(v1, v2); 
# 1698
} 
#endif
# 1713 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1714
{int volatile ___ = 1;(void)a;(void)b;
# 1721
::exit(___);}
#if 0
# 1714
{ 
# 1715
__nv_bfloat16 val; 
# 1716
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1720
return val; 
# 1721
} 
#endif
# 1722 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1723
{int volatile ___ = 1;(void)a;(void)b;
# 1730
::exit(___);}
#if 0
# 1723
{ 
# 1724
__nv_bfloat16 val; 
# 1725
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1729
return val; 
# 1730
} 
#endif
# 1731 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1732
{int volatile ___ = 1;(void)a;(void)b;
# 1739
::exit(___);}
#if 0
# 1732
{ 
# 1733
__nv_bfloat16 val; 
# 1734
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1738
return val; 
# 1739
} 
#endif
# 1740 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1741
{int volatile ___ = 1;(void)a;(void)b;
# 1748
::exit(___);}
#if 0
# 1741
{ 
# 1742
__nv_bfloat16 val; 
# 1743
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1747
return val; 
# 1748
} 
#endif
# 1749 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1750
{int volatile ___ = 1;(void)a;(void)b;
# 1757
::exit(___);}
#if 0
# 1750
{ 
# 1751
__nv_bfloat16 val; 
# 1752
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1756
return val; 
# 1757
} 
#endif
# 1758 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1759
{int volatile ___ = 1;(void)a;(void)b;
# 1766
::exit(___);}
#if 0
# 1759
{ 
# 1760
__nv_bfloat16 val; 
# 1761
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1765
return val; 
# 1766
} 
#endif
# 1767 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1768
{int volatile ___ = 1;(void)a;(void)b;
# 1778
::exit(___);}
#if 0
# 1768
{ 
# 1769
__nv_bfloat16 val; 
# 1770
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, one, %2;\n  max.bf16 f, f, zero;\n " " min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1777
return val; 
# 1778
} 
#endif
# 1779 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1780
{int volatile ___ = 1;(void)a;(void)b;
# 1791
::exit(___);}
#if 0
# 1780
{ 
# 1781
__nv_bfloat16 val; 
# 1782
__asm__("{ .reg .b16 f, one, zero, mone;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mone, 0xbf80U;\n  fma.rn.bf16 f, %2, mon" "e, %1;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1790
return val; 
# 1791
} 
#endif
# 1792 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1793
{int volatile ___ = 1;(void)a;(void)b;
# 1804
::exit(___);}
#if 0
# 1793
{ 
# 1794
__nv_bfloat16 val; 
# 1795
__asm__("{ .reg .b16 f, one, zero, mzero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mzero, 0x8000U;\n  fma.rn.bf16 f, %1, %" "2, mzero;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1803
return val; 
# 1804
} 
#endif
# 1805 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 1806
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1811
::exit(___);}
#if 0
# 1806
{ 
# 1807
__nv_bfloat16 val; 
# 1808
__asm__("{fma.rn.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 1810
return val; 
# 1811
} 
#endif
# 1812 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 1813
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 1823
::exit(___);}
#if 0
# 1813
{ 
# 1814
__nv_bfloat16 val; 
# 1815
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, %2, %3;\n  max.bf16 f, f, zero;\n  " "min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 1822
return val; 
# 1823
} 
#endif
# 1824 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b) {int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __nv_bfloat16 val; __asm__("{.reg .b32 a,b,res;\n  mov.b32 a, {0,%1};\n  mov.b32 b, {0,%2};\n  div.rn.f32 res, a, b;\n  cvt.rn.bf16.f32 %0, res;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1826
} 
#endif
# 1858 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsin_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1862
::exit(___);}
#if 0
# 1858
{ 
# 1859
float f = __bfloat162float(a); 
# 1860
f = sinf(f); 
# 1861
return __float2bfloat16_rn(f); 
# 1862
} 
#endif
# 1863 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1865
::exit(___);}
#if 0
# 1863
{ 
# 1864
return __hsin_internal(a); 
# 1865
} 
#endif
# 1866 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1870
::exit(___);}
#if 0
# 1866
{ 
# 1867
const __nv_bfloat16 l = __low2bfloat16(a); 
# 1868
const __nv_bfloat16 h = __high2bfloat16(a); 
# 1869
return __halves2bfloat162(__hsin_internal(l), __hsin_internal(h)); 
# 1870
} 
#endif
# 1871 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hcos_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1875
::exit(___);}
#if 0
# 1871
{ 
# 1872
float f = __bfloat162float(a); 
# 1873
f = cosf(f); 
# 1874
return __float2bfloat16_rn(f); 
# 1875
} 
#endif
# 1876 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1878
::exit(___);}
#if 0
# 1876
{ 
# 1877
return __hcos_internal(a); 
# 1878
} 
#endif
# 1879 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1883
::exit(___);}
#if 0
# 1879
{ 
# 1880
const __nv_bfloat16 l = __low2bfloat16(a); 
# 1881
const __nv_bfloat16 h = __high2bfloat16(a); 
# 1882
return __halves2bfloat162(__hcos_internal(l), __hcos_internal(h)); 
# 1883
} 
#endif
# 1898 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1911
::exit(___);}
#if 0
# 1898
{ 
# 1899
__nv_bfloat16 val; 
# 1900
__asm__("{.reg.b32          f, C;           \n .reg.b16          h,r;            \n  mov.b16          h,%1;           \n  mov.b32        " "  f,{0,h};        \n  mov.b32          C, 0x3fb8aa3cU;  \n  mul.f32          f,f,C;          \n  ex2.approx.f32   f,f;          " "  \n  cvt.rn.bf16.f32 r,f;            \n  mov.b16          %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1910
return val; 
# 1911
} 
#endif
# 1912 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1931
::exit(___);}
#if 0
# 1912
{ 
# 1913
__nv_bfloat162 val; 
# 1914
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  mov.b32         fl, {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x3fb8aa3cU;  \n  m" "ul.f32         fl,fl,C;        \n  mul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      f" "u, fu;     \n  cvt.rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n  mov.b32" "         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1930
return val; 
# 1931
} 
#endif
# 1932 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1934
::exit(___);}
#if 0
# 1932
{ 
# 1933
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  ex2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } ; 
# 1934
} 
#endif
# 1935 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1937
::exit(___);}
#if 0
# 1935
{ 
# 1936
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  ex2.approx.f32   fl, fl;     \n  ex2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } ; 
# 1937
} 
#endif
# 1938 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1952
::exit(___);}
#if 0
# 1938
{ 
# 1939
__nv_bfloat16 val; 
# 1940
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};       \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         f,f,C;          \n  ex2.approx.f32      f, f;       \n  c" "vt.rn.bf16.f32    r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBC95U;\n  mov.b16 ulp,0xbf00U;\n  set.eq.f16.f16 p,%1, s" "pc;\n  fma.rn.bf16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1951
return val; 
# 1952
} 
#endif
# 1953 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1972
::exit(___);}
#if 0
# 1953
{ 
# 1954
__nv_bfloat162 val; 
# 1955
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         fl,fl,C;        \n  m" "ul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      fu, fu;     \n  cvt.rn.bf16.f32    hl" ", fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBC95B" "C95U;\n  mov.b32 ulp,0xbf00bf00U;\n  set.eq.f16x2.f16x2 p,%1, spc;\n  fma.rn.bf16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1971
return val; 
# 1972
} 
#endif
# 1973 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1975
::exit(___);}
#if 0
# 1973
{ 
# 1974
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  lg2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } ; 
# 1975
} 
#endif
# 1976 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 1978
::exit(___);}
#if 0
# 1976
{ 
# 1977
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  lg2.approx.f32   fl, fl;     \n  lg2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } ; 
# 1978
} 
#endif
# 1979 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 1992
::exit(___);}
#if 0
# 1979
{ 
# 1980
__nv_bfloat16 val; 
# 1981
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  mov.b32         f," "{0,h};        \n  lg2.approx.f32      f,f;        \n  mov.b32         C, 0x3f317218U; \n  mul.f32         f,f,C;          \n  cv" "t.rn.bf16.f32    r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1991
return val; 
# 1992
} 
#endif
# 1993 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2012
::exit(___);}
#if 0
# 1993
{ 
# 1994
__nv_bfloat162 val; 
# 1995
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;     " "    \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2011
return val; 
# 2012
} 
#endif
# 2013 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2026
::exit(___);}
#if 0
# 2013
{ 
# 2014
__nv_bfloat16 val; 
# 2015
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};           \n  lg2.approx.f32      f, f;       \n  mov.b32         C, 0x3E9A209BU;  \n  mul.f32         f,f,C;          \n" "  cvt.rn.bf16.f32    r, f;       \n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2025
return val; 
# 2026
} 
#endif
# 2027 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2046
::exit(___);}
#if 0
# 2027
{ 
# 2028
__nv_bfloat162 val; 
# 2029
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3E9A209BU;      \n  mul.f32         fl,fl" ",C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;    " "     \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2045
return val; 
# 2046
} 
#endif
# 2049 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2051
::exit(___);}
#if 0
# 2049
{ 
# 2050
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rcp.approx.f32   fl, fl;     \n  rcp.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2051
} 
#endif
# 2052 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2054
::exit(___);}
#if 0
# 2052
{ 
# 2053
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rcp.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2054
} 
#endif
# 2055 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2057
::exit(___);}
#if 0
# 2055
{ 
# 2056
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rsqrt.approx.f32   fl, fl;     \n  rsqrt.approx.f32   fu, fu;     \n  cvt." "rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2057
} 
#endif
# 2058 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2060
::exit(___);}
#if 0
# 2058
{ 
# 2059
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rsqrt." "approx.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2060
} 
#endif
# 2061 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2063
::exit(___);}
#if 0
# 2061
{ 
# 2062
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  sqrt.approx.f32   fl, fl;     \n  sqrt.approx.f32   fu, fu;     \n  cvt.rn" ".bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2063
} 
#endif
# 2064 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2066
::exit(___);}
#if 0
# 2064
{ 
# 2065
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  sqrt.a" "pprox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2066
} 
#endif
# 2069 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a) 
# 2070
{int volatile ___ = 1;(void)a;
# 2073
::exit(___);}
#if 0
# 2070
{ 
# 2071
const __nv_bfloat162 b = a; 
# 2072
{ __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n .reg .b16 low,high;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high" "_b, %2, 0xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.nan.f32.f32 low_res, low_a, low_b;\n  set.nan.f3" "2.f32 high_res, high_a, high_b;\n  cvt.rn.bf16.f32 low, low_res;\n  cvt.rn.bf16.f32 high, high_res;\n  mov.b32 %0, {low,high};}\n" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2073
} 
#endif
# 2074 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a) 
# 2075
{int volatile ___ = 1;(void)a;
# 2082
::exit(___);}
#if 0
# 2075
{ 
# 2076
unsigned r; 
# 2077
__asm__("{.reg .b32 a;\n  mov.b32 a, {0,%1};\n  set.nan.f32.f32 %0, a, a;}\n" : "=r" (r) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2081
return r != 0U; 
# 2082
} 
#endif
# 2083 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a) 
# 2084
{int volatile ___ = 1;(void)a;
# 2089
::exit(___);}
#if 0
# 2084
{ 
# 2085
__nv_bfloat162 r; 
# 2086
__asm__("{neg.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2088
return r; 
# 2089
} 
#endif
# 2090 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a) 
# 2091
{int volatile ___ = 1;(void)a;
# 2096
::exit(___);}
#if 0
# 2091
{ 
# 2092
__nv_bfloat16 r; 
# 2093
__asm__("{neg.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2095
return r; 
# 2096
} 
#endif
# 2097 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a) 
# 2098
{int volatile ___ = 1;(void)a;
# 2103
::exit(___);}
#if 0
# 2098
{ 
# 2099
__nv_bfloat162 r; 
# 2100
__asm__("{abs.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2102
return r; 
# 2103
} 
#endif
# 2104 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a) 
# 2105
{int volatile ___ = 1;(void)a;
# 2110
::exit(___);}
#if 0
# 2105
{ 
# 2106
__nv_bfloat16 r; 
# 2107
__asm__("{abs.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2109
return r; 
# 2110
} 
#endif
# 2114 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2115
{int volatile ___ = 1;(void)a;(void)b;
# 2120
::exit(___);}
#if 0
# 2115
{ 
# 2116
__nv_bfloat16 val; 
# 2117
__asm__("{ max.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2119
return val; 
# 2120
} 
#endif
# 2121 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2122
{int volatile ___ = 1;(void)a;(void)b;
# 2127
::exit(___);}
#if 0
# 2122
{ 
# 2123
__nv_bfloat16 val; 
# 2124
__asm__("{ min.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2126
return val; 
# 2127
} 
#endif
# 2128 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2129
{int volatile ___ = 1;(void)a;(void)b;
# 2134
::exit(___);}
#if 0
# 2129
{ 
# 2130
__nv_bfloat16 val; 
# 2131
__asm__("{ max.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2133
return val; 
# 2134
} 
#endif
# 2135 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2136
{int volatile ___ = 1;(void)a;(void)b;
# 2141
::exit(___);}
#if 0
# 2136
{ 
# 2137
__nv_bfloat16 val; 
# 2138
__asm__("{ min.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2140
return val; 
# 2141
} 
#endif
# 2142 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2143
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2148
::exit(___);}
#if 0
# 2143
{ 
# 2144
__nv_bfloat16 val; 
# 2145
__asm__("{ fma.rn.relu.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2147
return val; 
# 2148
} 
#endif
# 2152 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2153
{int volatile ___ = 1;(void)a;(void)b;
# 2158
::exit(___);}
#if 0
# 2153
{ 
# 2154
__nv_bfloat162 val; 
# 2155
__asm__("{ max.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2157
return val; 
# 2158
} 
#endif
# 2159 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2160
{int volatile ___ = 1;(void)a;(void)b;
# 2165
::exit(___);}
#if 0
# 2160
{ 
# 2161
__nv_bfloat162 val; 
# 2162
__asm__("{ min.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2164
return val; 
# 2165
} 
#endif
# 2166 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2167
{int volatile ___ = 1;(void)a;(void)b;
# 2172
::exit(___);}
#if 0
# 2167
{ 
# 2168
__nv_bfloat162 val; 
# 2169
__asm__("{ max.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2171
return val; 
# 2172
} 
#endif
# 2173 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2174
{int volatile ___ = 1;(void)a;(void)b;
# 2179
::exit(___);}
#if 0
# 2174
{ 
# 2175
__nv_bfloat162 val; 
# 2176
__asm__("{ min.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2178
return val; 
# 2179
} 
#endif
# 2180 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2181
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2186
::exit(___);}
#if 0
# 2181
{ 
# 2182
__nv_bfloat162 val; 
# 2183
__asm__("{ fma.rn.relu.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2185
return val; 
# 2186
} 
#endif
# 2188 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2189
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2199
::exit(___);}
#if 0
# 2189
{ 
# 2194
__nv_bfloat16 real_tmp = __hfma(a.x, b.x, c.x); 
# 2195
__nv_bfloat16 img_tmp = __hfma(a.x, b.y, c.y); 
# 2196
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2197
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2198
return make_bfloat162(real_tmp, img_tmp); 
# 2199
} 
#endif
# 2201 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val) 
# 2202
{int volatile ___ = 1;(void)address;(void)val;
# 2211
::exit(___);}
#if 0
# 2202
{ 
# 2203
unsigned *address_as_uint = (unsigned *)address; 
# 2204
unsigned old = *address_as_uint, assumed; 
# 2205
do { 
# 2206
assumed = old; 
# 2207
__nv_bfloat162 new_val = __hadd2(val, *((__nv_bfloat162 *)(&assumed))); 
# 2208
old = atomicCAS(address_as_uint, assumed, *((unsigned *)(&new_val))); 
# 2209
} while (assumed != old); 
# 2210
return *((__nv_bfloat162 *)(&old)); 
# 2211
} 
#endif
# 2213 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val) 
# 2214
{int volatile ___ = 1;(void)address;(void)val;
# 2223
::exit(___);}
#if 0
# 2214
{ 
# 2215
unsigned short *address_as_us = (unsigned short *)address; 
# 2216
unsigned short old = *address_as_us, assumed; 
# 2217
do { 
# 2218
assumed = old; 
# 2219
old = atomicCAS(address_as_us, assumed, __bfloat16_as_ushort(__hadd(val, __ushort_as_bfloat16(assumed)))); 
# 2221
} while (assumed != old); 
# 2222
return __ushort_as_bfloat16(old); 
# 2223
} 
#endif
# 2238 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef __nv_bfloat16 nv_bfloat16; 
# 2239
typedef __nv_bfloat162 nv_bfloat162; 
# 91 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
namespace nvcuda { 
# 92
namespace wmma { 
# 96
__attribute__((unused)) inline float __float_to_tf32(float in) 
# 97
{int volatile ___ = 1;(void)in;
# 103
::exit(___);}
#if 0
# 97
{ 
# 98
float ret; 
# 99
__asm__("{\n  .reg .b32 __$1;\n   cvt.rna.tf32.f32 __$1, %1;\n   mov.b32 %0, __$1;\n}\n" : "=f" (ret) : "f" (in)); 
# 102
return ret; 
# 103
} 
#endif
# 109 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
struct row_major; 
# 110
struct col_major; 
# 111
struct matrix_a; 
# 112
struct matrix_b; 
# 113
struct accumulator; 
# 116
namespace precision { 
# 117
struct tf32; 
# 118
}
# 121
namespace experimental { 
# 122
namespace precision { 
# 123
struct u4; 
# 124
struct s4; 
# 125
struct b1; 
# 126
}
# 127
enum bmmaBitOp { bmmaBitOpXOR = 1, 
# 129
bmmaBitOpAND
# 131
}; 
# 132
enum bmmaAccumulateOp { bmmaAccumulateOpPOPC = 1}; 
# 133
}
# 139
enum layout_t { 
# 140
mem_row_major, mem_col_major
# 141
}; 
# 143
template< class T> 
# 144
struct helper_traits { 
# 145
typedef T element_type; 
# 146
typedef T storage_element_type; 
# 147
typedef T fill_argument_type; 
# 148
}; 
# 151
template<> struct helper_traits< experimental::precision::u4>  { 
# 152
typedef experimental::precision::u4 element_type; 
# 153
typedef unsigned storage_element_type; 
# 154
typedef unsigned fill_argument_type; 
# 155
}; 
# 157
template<> struct helper_traits< experimental::precision::s4>  { 
# 158
typedef experimental::precision::s4 element_type; 
# 159
typedef int storage_element_type; 
# 160
typedef int fill_argument_type; 
# 161
}; 
# 163
template<> struct helper_traits< experimental::precision::b1>  { 
# 164
typedef experimental::precision::b1 element_type; 
# 165
typedef unsigned storage_element_type; 
# 166
typedef unsigned fill_argument_type; 
# 167
}; 
# 171
template<> struct helper_traits< precision::tf32>  { 
# 172
typedef precision::tf32 element_type; 
# 173
typedef float storage_element_type; 
# 174
typedef float fill_argument_type; 
# 175
}; 
# 182
template< class T, int size, int packed_size = size> 
# 183
struct __attribute((aligned(8))) __frag_base { 
# 186
enum { num_elements = size}; 
# 196 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
enum { num_storage_elements = packed_size}; 
# 199
typedef T element_type; 
# 210 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
typedef typename helper_traits< T> ::storage_element_type storage_element_type; 
# 213
storage_element_type x[num_storage_elements]; 
# 214
}; 
# 216
template< class FragEleType, class StorageType, class ArgType> __attribute__((unused)) static inline StorageType 
# 217
__get_storage_value(ArgType in) {int volatile ___ = 1;(void)in;::exit(___);}
#if 0
# 217
{ return in; } 
#endif
# 222 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::u4, unsigned, unsigned> (unsigned in) 
# 223
{int volatile ___ = 1;(void)in;
# 229
::exit(___);}
#if 0
# 223
{ 
# 226
unsigned val = in & (15); 
# 227
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 229
} 
#endif
# 233 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline int __get_storage_value< experimental::precision::s4, int, int> (int in) 
# 234
{int volatile ___ = 1;(void)in;
# 240
::exit(___);}
#if 0
# 234
{ 
# 237
int val = in & 15; 
# 238
return (((((((val | (val << 4)) | (val << 8)) | (val << 12)) | (val << 16)) | (val << 20)) | (val << 24)) | (val << 28)); 
# 240
} 
#endif
# 244 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
template<> __attribute__((unused)) inline unsigned __get_storage_value< experimental::precision::b1, unsigned, unsigned> (unsigned in) 
# 245
{int volatile ___ = 1;(void)in;
# 249
::exit(___);}
#if 0
# 245
{ 
# 248
return (in & (1)) ? 4294967295U : (0); 
# 249
} 
#endif
# 252 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
template< class FragEleType, int size, int packed_size> __attribute__((unused)) static inline void 
# 253
fill_fragment(__frag_base< FragEleType, size, packed_size>  &f, const typename helper_traits< FragEleType> ::fill_argument_type &
# 261
in) {int volatile ___ = 1;(void)f;(void)in;
# 270
::exit(___);}
#if 0
# 261
{ 
# 265
typedef typename helper_traits< FragEleType> ::storage_element_type storage_type; 
# 266
storage_type v = __get_storage_value< FragEleType, typename helper_traits< FragEleType> ::storage_element_type> (in); 
# 268
#pragma unroll
for (
# 268
int i = 0; i < (f.num_storage_elements); i++) { 
# 269
((f.x)[i]) = v; }  
# 270
} 
#endif
# 275 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
template< class Use, int m, int n, int k, class T, class Layout = void> class fragment; 
# 280
template<> class fragment< matrix_a, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 281
template<> class fragment< matrix_a, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 282
template<> class fragment< matrix_b, 16, 16, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 283
template<> class fragment< matrix_b, 16, 16, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 284
template<> class fragment< accumulator, 16, 16, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 285
template<> class fragment< accumulator, 16, 16, 16, float>  : public __frag_base< float, 8>  { }; 
# 288
template<> class fragment< matrix_a, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 289
template<> class fragment< matrix_a, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 290
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 291
template<> class fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 292
template<> class fragment< matrix_b, 16, 16, 16, signed char, row_major>  : public __frag_base< signed char, 8>  { }; 
# 293
template<> class fragment< matrix_b, 16, 16, 16, signed char, col_major>  : public __frag_base< signed char, 8>  { }; 
# 294
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 8>  { }; 
# 295
template<> class fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 8>  { }; 
# 296
template<> class fragment< accumulator, 16, 16, 16, int>  : public __frag_base< int, 8>  { }; 
# 300
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 301
template<> class fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 302
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 303
template<> class fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 8>  { }; 
# 309
template<> class fragment< matrix_a, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 310
template<> class fragment< matrix_a, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 311
template<> class fragment< matrix_b, 32, 8, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 312
template<> class fragment< matrix_b, 32, 8, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 313
template<> class fragment< accumulator, 32, 8, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 314
template<> class fragment< accumulator, 32, 8, 16, float>  : public __frag_base< float, 8>  { }; 
# 317
template<> class fragment< matrix_a, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 318
template<> class fragment< matrix_a, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 319
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 320
template<> class fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 321
template<> class fragment< matrix_b, 32, 8, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 322
template<> class fragment< matrix_b, 32, 8, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 323
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 324
template<> class fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 325
template<> class fragment< accumulator, 32, 8, 16, int>  : public __frag_base< int, 8>  { }; 
# 329
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 330
template<> class fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 331
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 332
template<> class fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 338
template<> class fragment< matrix_a, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 339
template<> class fragment< matrix_a, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 340
template<> class fragment< matrix_b, 8, 32, 16, __half, row_major>  : public __frag_base< __half, 16>  { }; 
# 341
template<> class fragment< matrix_b, 8, 32, 16, __half, col_major>  : public __frag_base< __half, 16>  { }; 
# 342
template<> class fragment< accumulator, 8, 32, 16, __half>  : public __frag_base< __half, 8>  { }; 
# 343
template<> class fragment< accumulator, 8, 32, 16, float>  : public __frag_base< float, 8>  { }; 
# 346
template<> class fragment< matrix_a, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 4>  { }; 
# 347
template<> class fragment< matrix_a, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 4>  { }; 
# 348
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 4>  { }; 
# 349
template<> class fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 4>  { }; 
# 350
template<> class fragment< matrix_b, 8, 32, 16, signed char, row_major>  : public __frag_base< signed char, 16>  { }; 
# 351
template<> class fragment< matrix_b, 8, 32, 16, signed char, col_major>  : public __frag_base< signed char, 16>  { }; 
# 352
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  : public __frag_base< unsigned char, 16>  { }; 
# 353
template<> class fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  : public __frag_base< unsigned char, 16>  { }; 
# 354
template<> class fragment< accumulator, 8, 32, 16, int>  : public __frag_base< int, 8>  { }; 
# 358
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 359
template<> class fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 4>  { }; 
# 360
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 361
template<> class fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  : public __frag_base< __nv_bfloat16, 16>  { }; 
# 368
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 369
template<> class fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 370
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  : public __frag_base< experimental::precision::u4, 8, 1>  { }; 
# 371
template<> class fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  : public __frag_base< experimental::precision::s4, 8, 1>  { }; 
# 372
template<> class fragment< accumulator, 8, 8, 32, int>  : public __frag_base< int, 2>  { }; 
# 377
template<> class fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 378
template<> class fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  : public __frag_base< experimental::precision::b1, 32, 1>  { }; 
# 379
template<> class fragment< accumulator, 8, 8, 128, int>  : public __frag_base< int, 2>  { }; 
# 386
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 387
template<> class fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 388
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 389
template<> class fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  : public __frag_base< precision::tf32, 4>  { }; 
# 390
template<> class fragment< accumulator, 16, 16, 8, float>  : public __frag_base< float, 8>  { }; 
# 395
template<> class fragment< matrix_a, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 396
template<> class fragment< matrix_a, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 397
template<> class fragment< matrix_b, 8, 8, 4, double, row_major>  : public __frag_base< double, 1>  { }; 
# 398
template<> class fragment< matrix_b, 8, 8, 4, double, col_major>  : public __frag_base< double, 1>  { }; 
# 399
template<> class fragment< accumulator, 8, 8, 4, double>  : public __frag_base< double, 2>  { }; 
# 406
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 407
{ } 
#endif
# 408 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 408
{ } 
#endif
# 409 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 409
{ } 
#endif
# 410 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 410
{ } 
#endif
# 411 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 411
{ } 
#endif
# 414 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 422
{ } 
#endif
# 426 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 426
{ } 
#endif
# 427 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 429
{ } 
#endif
# 435 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 437
{ } 
#endif
# 438 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 438
{ } 
#endif
# 439 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 440
{ } 
#endif
# 443 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 443
{ } 
#endif
# 444 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 444
{ } 
#endif
# 445 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 445
{ } 
#endif
# 446 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 446
{ } 
#endif
# 447 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 447
{ } 
#endif
# 448 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 448
{ } 
#endif
# 449 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 449
{ } 
#endif
# 450 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 450
{ } 
#endif
# 451 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 32, 8, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 451
{ } 
#endif
# 455 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 455
{ } 
#endif
# 456 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 456
{ } 
#endif
# 457 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 457
{ } 
#endif
# 458 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 458
{ } 
#endif
# 464 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 464
{ } 
#endif
# 465 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 465
{ } 
#endif
# 466 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, row_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 466
{ } 
#endif
# 467 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __half, col_major>  &a, const __half *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 467
{ } 
#endif
# 468 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, __half>  &a, const __half *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 468
{ } 
#endif
# 469 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 472
{ } 
#endif
# 473 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 473
{ } 
#endif
# 474 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 474
{ } 
#endif
# 475 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 475
{ } 
#endif
# 476 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, row_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 476
{ } 
#endif
# 477 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, signed char, col_major>  &a, const signed char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 477
{ } 
#endif
# 478 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 478
{ } 
#endif
# 479 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &a, const unsigned char *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 479
{ } 
#endif
# 480 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 32, 16, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 480
{ } 
#endif
# 484 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 484
{ } 
#endif
# 485 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 485
{ } 
#endif
# 486 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 486
{ } 
#endif
# 487 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &a, const __nv_bfloat16 *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 487
{ } 
#endif
# 494 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 494
{ } 
#endif
# 495 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 495
{ } 
#endif
# 496 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 496
{ } 
#endif
# 497 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 497
{ } 
#endif
# 499 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 32, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 499
{ } 
#endif
# 504 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 504
{ } 
#endif
# 505 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &a, const void *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 505
{ } 
#endif
# 506 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 128, int>  &a, const int *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 506
{ } 
#endif
# 515 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 515
{ } 
#endif
# 516 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 516
{ } 
#endif
# 517 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 517
{ } 
#endif
# 518 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &a, const float *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 518
{ } 
#endif
# 519 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 16, 16, 8, float>  &a, const float *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 519
{ } 
#endif
# 524 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 524
{ } 
#endif
# 525 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 525
{ } 
#endif
# 526 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, row_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 526
{ } 
#endif
# 527 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< matrix_b, 8, 8, 4, double, col_major>  &a, const double *p, unsigned ldm) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;::exit(___);}
#if 0
# 527
{ } 
#endif
# 528 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void load_matrix_sync(fragment< accumulator, 8, 8, 4, double>  &a, const double *p, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)a;(void)p;(void)ldm;(void)layout;::exit(___);}
#if 0
# 528
{ } 
#endif
# 534 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 16, 16, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 534
{ } 
#endif
# 535 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 535
{ } 
#endif
# 537 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 16, 16, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 537
{ } 
#endif
# 543 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 32, 8, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 543
{ } 
#endif
# 544 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 32, 8, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 544
{ } 
#endif
# 546 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 32, 8, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 546
{ } 
#endif
# 552 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(__half *p, const fragment< accumulator, 8, 32, 16, __half>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 552
{ } 
#endif
# 553 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 8, 32, 16, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 553
{ } 
#endif
# 555 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 32, 16, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 555
{ } 
#endif
# 562 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 32, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 562
{ } 
#endif
# 567 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(int *p, const fragment< accumulator, 8, 8, 128, int>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 567
{ } 
#endif
# 575 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(float *p, const fragment< accumulator, 16, 16, 8, float>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 575
{ } 
#endif
# 580 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void store_matrix_sync(double *p, const fragment< accumulator, 8, 8, 4, double>  &a, unsigned ldm, layout_t layout) {int volatile ___ = 1;(void)p;(void)a;(void)ldm;(void)layout;::exit(___);}
#if 0
# 580
{ } 
#endif
# 586 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 586
{ } 
#endif
# 587 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 587
{ } 
#endif
# 588 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 588
{ } 
#endif
# 589 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 589
{ } 
#endif
# 590 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 590
{ } 
#endif
# 591 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 591
{ } 
#endif
# 592 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 592
{ } 
#endif
# 593 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 593
{ } 
#endif
# 594 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 594
{ } 
#endif
# 595 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 595
{ } 
#endif
# 596 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 596
{ } 
#endif
# 597 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 597
{ } 
#endif
# 598 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 598
{ } 
#endif
# 599 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 599
{ } 
#endif
# 600 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 600
{ } 
#endif
# 601 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, __half>  &d, const fragment< matrix_a, 16, 16, 16, __half, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __half, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 601
{ } 
#endif
# 604 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 604
{ } 
#endif
# 605 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 605
{ } 
#endif
# 606 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 606
{ } 
#endif
# 607 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, signed char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, signed char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 607
{ } 
#endif
# 608 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 608
{ } 
#endif
# 609 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, col_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 609
{ } 
#endif
# 610 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 610
{ } 
#endif
# 611 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, int>  &d, const fragment< matrix_a, 16, 16, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 16, 16, 16, unsigned char, row_major>  &b, const fragment< accumulator, 16, 16, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 611
{ } 
#endif
# 615 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 615
{ } 
#endif
# 616 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 616
{ } 
#endif
# 617 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 617
{ } 
#endif
# 618 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 16, float>  &d, const fragment< matrix_a, 16, 16, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 16, 16, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 16, 16, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 618
{ } 
#endif
# 624 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 624
{ } 
#endif
# 625 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 625
{ } 
#endif
# 626 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 626
{ } 
#endif
# 627 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 627
{ } 
#endif
# 628 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 628
{ } 
#endif
# 629 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 629
{ } 
#endif
# 630 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 630
{ } 
#endif
# 631 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 631
{ } 
#endif
# 632 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 632
{ } 
#endif
# 633 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 633
{ } 
#endif
# 634 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 634
{ } 
#endif
# 635 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 635
{ } 
#endif
# 636 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 636
{ } 
#endif
# 637 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 637
{ } 
#endif
# 638 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 638
{ } 
#endif
# 639 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, __half>  &d, const fragment< matrix_a, 32, 8, 16, __half, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __half, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 639
{ } 
#endif
# 642 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 642
{ } 
#endif
# 643 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 643
{ } 
#endif
# 644 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 644
{ } 
#endif
# 645 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, signed char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, signed char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 645
{ } 
#endif
# 646 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 646
{ } 
#endif
# 647 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, col_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 647
{ } 
#endif
# 648 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 648
{ } 
#endif
# 649 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, int>  &d, const fragment< matrix_a, 32, 8, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 32, 8, 16, unsigned char, row_major>  &b, const fragment< accumulator, 32, 8, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 649
{ } 
#endif
# 653 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 653
{ } 
#endif
# 654 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 654
{ } 
#endif
# 655 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 655
{ } 
#endif
# 656 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 32, 8, 16, float>  &d, const fragment< matrix_a, 32, 8, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 32, 8, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 32, 8, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 656
{ } 
#endif
# 662 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 662
{ } 
#endif
# 663 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 663
{ } 
#endif
# 664 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 664
{ } 
#endif
# 665 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 665
{ } 
#endif
# 666 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 666
{ } 
#endif
# 667 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 667
{ } 
#endif
# 668 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 668
{ } 
#endif
# 669 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, __half>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 669
{ } 
#endif
# 670 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 670
{ } 
#endif
# 671 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 671
{ } 
#endif
# 672 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 672
{ } 
#endif
# 673 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 673
{ } 
#endif
# 674 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 674
{ } 
#endif
# 675 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 675
{ } 
#endif
# 676 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 676
{ } 
#endif
# 677 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, __half>  &d, const fragment< matrix_a, 8, 32, 16, __half, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __half, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 677
{ } 
#endif
# 680 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 680
{ } 
#endif
# 681 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 681
{ } 
#endif
# 682 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 682
{ } 
#endif
# 683 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, signed char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, signed char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 683
{ } 
#endif
# 684 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 684
{ } 
#endif
# 685 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, col_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 685
{ } 
#endif
# 686 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, row_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 686
{ } 
#endif
# 687 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, int>  &d, const fragment< matrix_a, 8, 32, 16, unsigned char, col_major>  &a, const fragment< matrix_b, 8, 32, 16, unsigned char, row_major>  &b, const fragment< accumulator, 8, 32, 16, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 687
{ } 
#endif
# 691 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 691
{ } 
#endif
# 692 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, col_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 692
{ } 
#endif
# 693 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, row_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 693
{ } 
#endif
# 694 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 32, 16, float>  &d, const fragment< matrix_a, 8, 32, 16, __nv_bfloat16, col_major>  &a, const fragment< matrix_b, 8, 32, 16, __nv_bfloat16, row_major>  &b, const fragment< accumulator, 8, 32, 16, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 694
{ } 
#endif
# 701 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::s4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::s4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 701
{ } 
#endif
# 702 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 32, int>  &d, const fragment< matrix_a, 8, 8, 32, experimental::precision::u4, row_major>  &a, const fragment< matrix_b, 8, 8, 32, experimental::precision::u4, col_major>  &b, const fragment< accumulator, 8, 8, 32, int>  &c, bool satf = false) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;(void)satf;::exit(___);}
#if 0
# 702
{ } 
#endif
# 708 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void bmma_sync(fragment< accumulator, 8, 8, 128, int>  &d, const fragment< matrix_a, 8, 8, 128, experimental::precision::b1, row_major>  &a, const fragment< matrix_b, 8, 8, 128, experimental::precision::b1, col_major>  &b, const fragment< accumulator, 8, 8, 128, int>  &c, experimental::bmmaBitOp = experimental::bmmaBitOpXOR, experimental::bmmaAccumulateOp = experimental::bmmaAccumulateOpPOPC) 
# 710
{int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 710
{ } 
#endif
# 718 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 718
{ } 
#endif
# 719 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, col_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 719
{ } 
#endif
# 720 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, row_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 720
{ } 
#endif
# 721 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 16, 16, 8, float>  &d, const fragment< matrix_a, 16, 16, 8, precision::tf32, col_major>  &a, const fragment< matrix_b, 16, 16, 8, precision::tf32, row_major>  &b, const fragment< accumulator, 16, 16, 8, float>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 721
{ } 
#endif
# 726 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 726
{ } 
#endif
# 727 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, col_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 727
{ } 
#endif
# 728 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, row_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 728
{ } 
#endif
# 729 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
__attribute__((unused)) static inline void mma_sync(fragment< accumulator, 8, 8, 4, double>  &d, const fragment< matrix_a, 8, 8, 4, double, col_major>  &a, const fragment< matrix_b, 8, 8, 4, double, row_major>  &b, const fragment< accumulator, 8, 8, 4, double>  &c) {int volatile ___ = 1;(void)d;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 729
{ } 
#endif
# 731 "/usr/local/cuda-11.6/bin/../targets/x86_64-linux/include/crt/mma.h"
}
# 732
}
# 61 "wmma_example_tcsp.cu"
using namespace nvcuda;
# 73 "wmma_example_tcsp.cu"
const int WMMA_M = 16; 
# 74
const int WMMA_N = 16; 
# 75
const int WMMA_K = 16; 
# 77
__attribute__((unused)) float sp_computation(float x, float y, int iteration) {int volatile ___ = 1;(void)x;(void)y;(void)iteration;
# 84
::exit(___);}
#if 0
# 77
{ 
# 78
float result = x; 
# 80
#pragma unroll
for (
# 80
int i = 0; i < 10; ++i) { 
# 81
result = (((result * y) + sinf(result)) + cosf((float)iteration)); 
# 82
}  
# 83
return result; 
# 84
} 
#endif
# 93 "wmma_example_tcsp.cu"
void wmma_example(half *a, half *b, float *c, int M, int N, int K, float alpha, float beta) ;
#if 0
# 93
{ 
# 95
int lda = M; 
# 96
int ldb = K; 
# 97
int ldc = M; 
# 100
int warpM = (((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x)) / __device_builtin_variable_warpSize; 
# 101
int warpN = ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)) + (__device_builtin_variable_threadIdx.y); 
# 104
nvcuda::wmma::fragment< nvcuda::wmma::matrix_a, 16, 16, 16, __half, nvcuda::wmma::col_major>  a_frag; 
# 105
nvcuda::wmma::fragment< nvcuda::wmma::matrix_b, 16, 16, 16, __half, nvcuda::wmma::col_major>  b_frag; 
# 106
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, float>  acc_frag; 
# 107
nvcuda::wmma::fragment< nvcuda::wmma::accumulator, 16, 16, 16, float>  c_frag; 
# 109
wmma::fill_fragment(acc_frag, (0.0F)); 
# 112
float sp_result = (0.0F); 
# 113
float sp_x = ((float)(__device_builtin_variable_threadIdx.x)) / (__device_builtin_variable_blockDim.x); 
# 114
float sp_y = ((float)(__device_builtin_variable_threadIdx.y)) / (__device_builtin_variable_blockDim.y); 
# 117
for (int i = 0; i < K; i += WMMA_K) { 
# 118
int aRow = warpM * WMMA_M; 
# 119
int aCol = i; 
# 120
int bRow = i; 
# 121
int bCol = warpN * WMMA_N; 
# 124
if ((aRow < M) && (aCol < K) && (bRow < K) && (bCol < N)) { 
# 126
sp_result += sp_computation(sp_x, sp_y, i); 
# 129
wmma::load_matrix_sync(a_frag, (a + aRow) + (aCol * lda), lda); 
# 130
wmma::load_matrix_sync(b_frag, (b + bRow) + (bCol * ldb), ldb); 
# 133
wmma::mma_sync(acc_frag, a_frag, b_frag, acc_frag); 
# 136
sp_result *= sp_computation(sp_y, sp_x, i + 1); 
# 137
}  
# 138
}  
# 141
int cRow = warpM * WMMA_M; 
# 142
int cCol = warpN * WMMA_N; 
# 144
if ((cRow < M) && (cCol < N)) { 
# 145
wmma::load_matrix_sync(c_frag, (c + cRow) + (cCol * ldc), ldc, wmma::mem_col_major); 
# 148
#pragma unroll
for (
# 148
int i = 0; i < (c_frag.num_elements); i++) { 
# 149
((c_frag.x)[i]) = ((alpha * ((acc_frag.x)[i])) + (beta * ((c_frag.x)[i]))); 
# 151
((c_frag.x)[i]) += (sp_result * (0.01F)); 
# 152
}  
# 155
wmma::store_matrix_sync((c + cRow) + (cCol * ldc), c_frag, ldc, wmma::mem_col_major); 
# 156
}  
# 157
} 
#endif
# 166 "wmma_example_tcsp.cu"
void convertFp32ToFp16(half *out, float *in, int n) ;
#if 0
# 166
{ 
# 167
int idx = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
# 168
if (idx < n) { 
# 169
(out[idx]) = __float2half_rn(in[idx]); 
# 170
}  
# 171
} 
#endif
# 172 "wmma_example_tcsp.cu"
int main(int argc, char *argv[]) { 
# 173
float *a_fp32; 
# 174
float *b_fp32; 
# 175
half *a_fp16; 
# 176
half *b_fp16; 
# 178
float *c_wmma; 
# 179
float *c_host_wmma; 
# 182
float *h_a_fp32 = (float *)malloc((32 * 32) * sizeof(float)); 
# 183
float *h_b_fp32 = (float *)malloc((32 * 32) * sizeof(float)); 
# 184
float *h_c = (float *)malloc((32 * 32) * sizeof(float)); 
# 186
c_host_wmma = ((float *)malloc((32 * 32) * sizeof(float))); 
# 187
if (!c_host_wmma) { 
# 188
fprintf(stderr, "Host memory allocation for result failed\n"); 
# 189 "wmma_example_tcsp.cu"
exit(1); 
# 190
}  
# 193
if ((((!h_a_fp32) || (!h_b_fp32)) || (!h_c)) || (!c_host_wmma)) { 
# 194
printf("Host memory allocation failed\n"); 
# 195
return -1; 
# 196
}  
# 198
for (int i = 0; i < (32 * 32); ++i) { 
# 199
(h_a_fp32[i]) = (((float)((i % 255) - 127)) / (127)); 
# 200
}  
# 201
for (int i = 0; i < (32 * 32); ++i) { 
# 202
(h_b_fp32[i]) = (((float)((i % 255) - 127)) / (127)); 
# 203
}  
# 204
for (int i = 0; i < (32 * 32); ++i) { 
# 205
(h_c[i]) = (((float)((i % 255) - 127)) / (127)); 
# 206
}  
# 209
{ cudaErrCheck_(cudaMalloc((void **)(&a_fp32), (32 * 32) * sizeof(float)), "wmma_example_tcsp.cu", 210); 
# 209 "wmma_example_tcsp.cu"
} 
# 210
; 
# 211
{ cudaErrCheck_(cudaMalloc((void **)(&b_fp32), (32 * 32) * sizeof(float)), "wmma_example_tcsp.cu", 212); 
# 211 "wmma_example_tcsp.cu"
} 
# 212
; 
# 213
{ cudaErrCheck_(cudaMalloc((void **)(&a_fp16), (32 * 32) * sizeof(half)), "wmma_example_tcsp.cu", 214); 
# 213 "wmma_example_tcsp.cu"
} 
# 214
; 
# 215
{ cudaErrCheck_(cudaMalloc((void **)(&b_fp16), (32 * 32) * sizeof(half)), "wmma_example_tcsp.cu", 216); 
# 215 "wmma_example_tcsp.cu"
} 
# 216
; 
# 217
{ cudaErrCheck_(cudaMalloc((void **)(&c_wmma), (32 * 32) * sizeof(float)), "wmma_example_tcsp.cu", 217); } ; 
# 223
{ cudaErrCheck_(cudaMemcpy(a_fp32, h_a_fp32, (32 * 32) * sizeof(float), cudaMemcpyHostToDevice), "wmma_example_tcsp.cu", 223); } ; 
# 224
{ cudaErrCheck_(cudaMemcpy(b_fp32, h_b_fp32, (32 * 32) * sizeof(float), cudaMemcpyHostToDevice), "wmma_example_tcsp.cu", 224); } ; 
# 225
{ cudaErrCheck_(cudaMemcpy(c_wmma, h_c, (32 * 32) * sizeof(float), cudaMemcpyHostToDevice), "wmma_example_tcsp.cu", 225); } ; 
# 248 "wmma_example_tcsp.cu"
(__cudaPushCallConfiguration(((32 * 32) + 31) / 32, 32)) ? (void)0 : convertFp32ToFp16(a_fp16, a_fp32, 32 * 32); 
# 250
(__cudaPushCallConfiguration(((32 * 32) + 31) / 32, 32)) ? (void)0 : convertFp32ToFp16(b_fp16, b_fp32, 32 * 32); 
# 255
float alpha = (2.0F); 
# 256
float beta = (2.0F); 
# 258
printf("\nM = %d, N = %d, K = %d. alpha = %f, beta = %f\n\n", 32, 32, 32, alpha, beta); 
# 262
dim3 gridDim; 
# 263
dim3 blockDim; 
# 268
(blockDim.x) = (32); 
# 269
(blockDim.y) = (1); 
# 271
(gridDim.x) = (((32) + (((WMMA_M * (blockDim.x)) / (32)) - (1))) / ((WMMA_M * (blockDim.x)) / (32))); 
# 273
(gridDim.y) = ((((32) + (WMMA_N * (blockDim.y))) - (1)) / (WMMA_N * (blockDim.y))); 
# 275
printf("gridDim.x = %d, gridDim.y = %d\n", gridDim.x, gridDim.y); 
# 276
printf("Running with wmma...\n"); 
# 278
(__cudaPushCallConfiguration(gridDim, blockDim)) ? (void)0 : wmma_example(a_fp16, b_fp16, c_wmma, 32, 32, 32, alpha, beta); 
# 283
cudaError_t err = cudaDeviceSynchronize(); 
# 284
if (err != (cudaSuccess)) { 
# 285
printf("CUDA Error: %s\n", cudaGetErrorString(err)); 
# 286
}  
# 288
printf("\nChecking results...\n"); 
# 289
{ cudaErrCheck_(cudaMemcpy(c_host_wmma, c_wmma, (32 * 32) * sizeof(float), cudaMemcpyDeviceToHost), "wmma_example_tcsp.cu", 291); 
# 289 "wmma_example_tcsp.cu"
} 
# 291
; 
# 294
printf("\nFinal Result:\n"); 
# 295
for (int i = 0; i < 32; ++i) { 
# 296
for (int j = 0; j < 32; ++j) { 
# 297
printf("%f ", c_host_wmma[(i * 32) + j]); 
# 298
}  
# 299
printf("\n"); 
# 300
}  
# 303
free(h_a_fp32); 
# 304
free(h_b_fp32); 
# 305
free(h_c); 
# 306
free(c_host_wmma); 
# 309
{ cudaErrCheck_(cudaFree(a_fp32), "wmma_example_tcsp.cu", 309); } ; 
# 310
{ cudaErrCheck_(cudaFree(b_fp32), "wmma_example_tcsp.cu", 310); } ; 
# 311
{ cudaErrCheck_(cudaFree(a_fp16), "wmma_example_tcsp.cu", 311); } ; 
# 312
{ cudaErrCheck_(cudaFree(b_fp16), "wmma_example_tcsp.cu", 312); } ; 
# 313
{ cudaErrCheck_(cudaFree(c_wmma), "wmma_example_tcsp.cu", 313); } ; 
# 315
{ cudaErrCheck_(cudaDeviceReset(), "wmma_example_tcsp.cu", 315); } ; 
# 316
return 0; 
# 317
} 

# 1 "wmma_example_tcsp.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__52862be6_20_wmma_example_tcsp_cu_5ce7cf7c
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "wmma_example_tcsp.cudafe1.stub.c"
#include "wmma_example_tcsp.cudafe1.stub.c"
# 1 "wmma_example_tcsp.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
